{"version":3,"file":"static/js/766.a3813954.chunk.js","mappings":"+KAOA,MA+BA,EA/BsBA,IAAwB,IACxCC,EACAC,GAFiB,KAAEC,EAAI,QAAEC,GAASJ,EAItC,OAAQG,GACN,IAAK,QACHF,GAAOI,EAAAA,EAAAA,KAACC,EAAAA,IAAoB,CAACC,UAAU,0BACvCL,EAAa,0BACb,MACF,IAAK,UACHD,GAAOI,EAAAA,EAAAA,KAACG,EAAAA,IAAoB,CAACD,UAAU,4BACvCL,EAAa,8BACb,MACF,IAAK,UACHD,GACEI,EAAAA,EAAAA,KAACI,EAAAA,IAAyB,CAACF,UAAU,wCAEvCL,EAAa,4BACb,MACF,QACED,EAAO,KAGX,OACES,EAAAA,EAAAA,MAAA,OAAKH,UAAS,oCAAAI,OAAsCT,EAAU,cAAaU,SAAA,CACxEX,GACDI,EAAAA,EAAAA,KAAA,QAAME,UAAU,sBAAqBK,SAAER,MACnC,C,2ICjCV,MAEaS,EAAqBC,UAAuB,IAAhB,OAAEC,GAAQf,EACjD,MAAMgB,QAAYC,EAAAA,EAAMC,KAAK,GAADP,OAHfQ,iDAIF,uBACT,CAAEJ,UACF,CAAEK,iBAAiB,IAErB,OAAU,OAAHJ,QAAG,IAAHA,OAAG,EAAHA,EAAKK,IAAI,E,2CCElB,MA6IA,EA7IgBC,KAAO,IAADC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EACpB,MAAOC,EAAeC,IAAoBC,EAAAA,EAAAA,UAAS,wBAC7CC,GAAcC,EAAAA,EAAAA,OACbC,EAAkBC,IAAuBJ,EAAAA,EAAAA,UAAS,IACnDK,GAAWC,EAAAA,EAAAA,GAAY,CAC3BC,WAAYnC,EACZoC,UAAWA,KACTP,EAAYQ,kBAAkB,CAAC,WAAW,IAIxCC,GAASC,EAAAA,EAAAA,IAAU,CACvBC,cAAe,CACbtC,OAAQ,IAEVuC,iBAAkBC,EAAAA,GAAW,CAC3BxC,OAAQwC,EAAAA,KAAaC,SAAS,0BAEhCC,SAAWC,IACTlB,EAAiBkB,EAAO3C,QACxB+B,EAASa,OAAOD,EAAO,IAIrBE,GAAYC,EAAAA,EAAAA,GAAS,CACzBC,QAASC,EAAAA,GACTC,SAAU,CAAC,aAOb,OALAC,EAAAA,EAAAA,YAAU,KACiB,IAADC,EAApBpB,EAASqB,WACXtB,EAA4B,OAARC,QAAQ,IAARA,GAAc,QAANoB,EAARpB,EAAUzB,YAAI,IAAA6C,OAAN,EAARA,EAAgBE,QACtC,GACC,CAACtB,IACAc,EAAUS,WAAkBhE,EAAAA,EAAAA,KAACiE,EAAAA,EAAM,IACnCV,EAAUW,SAEVlE,EAAAA,EAAAA,KAACmE,EAAAA,EAAa,CACZrE,KAAM,UACNC,QAAkB,OAATwD,QAAS,IAATA,GAAgB,QAAPrC,EAATqC,EAAWa,aAAK,IAAAlD,GAAU,QAAVC,EAAhBD,EAAkBmD,gBAAQ,IAAAlD,GAAM,QAANC,EAA1BD,EAA4BH,YAAI,IAAAI,OAAvB,EAATA,EAAkCrB,WAI/CC,EAAAA,EAAAA,KAAA,OAAKE,UAAU,gGAA+FK,UAC5GF,EAAAA,EAAAA,MAAA,OAAKH,UAAU,qEAAoEK,SAAA,EACjFF,EAAAA,EAAAA,MAAA,MAAIH,UAAU,yDAAwDK,SAAA,CAAC,UACpD,OAATgD,QAAS,IAATA,GAAe,QAANlC,EAATkC,EAAWvC,YAAI,IAAAK,GAAM,QAANC,EAAfD,EAAiBiD,YAAI,IAAAhD,OAAZ,EAATA,EAAuBiD,aAEjCvE,EAAAA,EAAAA,KAAA,KAAGE,UAAU,uDAAsDK,SAAC,wEAKpEF,EAAAA,EAAAA,MAAA,OAAKH,UAAU,uBAAsBK,SAAA,EACnCP,EAAAA,EAAAA,KAAA,OAAKE,UAAU,OAAMK,UACnBF,EAAAA,EAAAA,MAAA,QAAMH,UAAU,0DAAyDK,SAAA,CAAC,SACjE,IACG,OAATgD,QAAS,IAATA,GAAe,QAANhC,EAATgC,EAAWvC,YAAI,IAAAO,GAAM,QAANC,EAAfD,EAAiB+C,YAAI,IAAA9C,GAArBA,EAAuBgD,iBACX,OAATjB,QAAS,IAATA,GAAe,QAAN9B,EAAT8B,EAAWvC,YAAI,IAAAS,GAAM,QAANC,EAAfD,EAAiB6C,YAAI,IAAA5C,OAAZ,EAATA,EAAuB8C,iBACvB,cAGRxE,EAAAA,EAAAA,KAAA,OAAKE,UAAU,OAAMK,UACnBF,EAAAA,EAAAA,MAAA,QAAMH,UAAU,0DAAyDK,SAAA,CAAC,aACpD,OAATgD,QAAS,IAATA,GAAe,QAAN5B,EAAT4B,EAAWvC,YAAI,IAAAW,GAAM,QAANC,EAAfD,EAAiB2C,YAAI,IAAA1C,OAAZ,EAATA,EAAuB6C,gBAAgB,KAAG,IAC3C,OAATlB,QAAS,IAATA,GAAe,QAAN1B,EAAT0B,EAAWvC,YAAI,IAAAa,GAAM,QAANC,EAAfD,EAAiByC,YAAI,IAAAxC,OAAZ,EAATA,EAAuB4C,0BAG5B1E,EAAAA,EAAAA,KAAC2E,EAAAA,GAAI,CAACC,GAAG,WAAW1E,UAAU,gBAAeK,UAC3CP,EAAAA,EAAAA,KAAA,UAAAO,SAAQ,uBAKZF,EAAAA,EAAAA,MAAA,QAAM+C,SAAUN,EAAO+B,aAAc3E,UAAU,YAAWK,SAAA,EAExDF,EAAAA,EAAAA,MAAA,OAAAE,SAAA,EACEP,EAAAA,EAAAA,KAAA,SACE8E,QAAQ,SACR5E,UAAU,iDAAgDK,SAC3D,iCAGDP,EAAAA,EAAAA,KAAA,SACE+E,GAAG,SACHjF,KAAK,UACDgD,EAAOkC,cAAc,UACzB9E,UAAU,wEACV+E,YAAY,0BAEbnC,EAAOoC,QAAQxE,QAAUoC,EAAOqC,OAAOzE,SACtCV,EAAAA,EAAAA,KAAA,OAAKE,UAAU,oBAAmBK,SAAEuC,EAAOqC,OAAOzE,aAG7C,OAAR+B,QAAQ,IAARA,OAAQ,EAARA,EAAU2C,aACTpF,EAAAA,EAAAA,KAACmE,EAAAA,EAAa,CACZrE,KAAM,UACNC,QAAS,4BAGJ,OAAR0C,QAAQ,IAARA,OAAQ,EAARA,EAAUqB,aACT9D,EAAAA,EAAAA,KAACmE,EAAAA,EAAa,CAACrE,KAAM,UAAWC,QAAS,oCAElC,OAAR0C,QAAQ,IAARA,OAAQ,EAARA,EAAUyB,WACT7D,EAAAA,EAAAA,MAAAgF,EAAAA,SAAA,CAAA9E,SAAA,EACEP,EAAAA,EAAAA,KAACmE,EAAAA,EAAa,CACZrE,KAAM,QACNC,QAAiB,OAAR0C,QAAQ,IAARA,GAAe,QAAPV,EAARU,EAAU2B,aAAK,IAAArC,GAAU,QAAVC,EAAfD,EAAiBsC,gBAAQ,IAAArC,GAAM,QAANC,EAAzBD,EAA2BhB,YAAI,IAAAiB,OAAvB,EAARA,EAAiClC,WAE5CC,EAAAA,EAAAA,KAAC2E,EAAAA,GAAI,CAACC,GAAG,SAAQrE,UACfP,EAAAA,EAAAA,KAAA,UAAQE,UAAU,iQAAgQK,SAAC,sBAOzRP,EAAAA,EAAAA,KAAA,UACEF,KAAK,SACLI,UAAU,gQACVoF,SAAUpD,IAAkBY,EAAOO,OAAO3C,OAAsBH,SACjE,wBAMFgC,IACClC,EAAAA,EAAAA,MAAA,OAAKH,UAAU,kCAAiCK,SAAA,EAC9CP,EAAAA,EAAAA,KAAA,MAAIE,UAAU,2CAA0CK,SAAC,wBAGzDP,EAAAA,EAAAA,KAAA,KAAGE,UAAU,8BAA6BK,UACxCP,EAAAA,EAAAA,KAACuF,EAAAA,EAAa,CAAChF,SAAUgC,aAK7B,C","sources":["components/StatusMessage.component.jsx","apis/aiApi.js","pages/GenerateContent.page.jsx"],"sourcesContent":["import React from \"react\";\nimport {\n  AiOutlineCheckCircle,\n  AiOutlineCloseCircle,\n  AiOutlineLoading3Quarters,\n} from \"react-icons/ai\";\n\nconst StatusMessage = ({ type, message }) => {\n  let icon;\n  let colorClass;\n\n  switch (type) {\n    case \"error\":\n      icon = <AiOutlineCloseCircle className=\"text-red-500 text-3xl\" />;\n      colorClass = \"bg-red-100 text-red-700\";\n      break;\n    case \"success\":\n      icon = <AiOutlineCheckCircle className=\"text-green-500 text-3xl\" />;\n      colorClass = \"bg-green-100 text-green-700\";\n      break;\n    case \"loading\":\n      icon = (\n        <AiOutlineLoading3Quarters className=\"animate-spin text-blue-500 text-3xl\" />\n      );\n      colorClass = \"bg-blue-100 text-blue-700\";\n      break;\n    default:\n      icon = null;\n  }\n\n  return (\n    <div className={`flex items-center p-4 rounded-lg ${colorClass} space-x-3`}>\n      {icon}\n      <span className=\"text-sm font-medium\">{message}</span>\n    </div>\n  );\n};\n\nexport default StatusMessage;\n","import axios from \"axios\";\nconst server = process.env.REACT_APP_SERVER_URL;\n\nexport const generateContentApi = async ({ prompt }) => {\n  const res = await axios.post(\n    `${server}/api/v1/ai/generate`,\n    { prompt },\n    { withCredentials: true }\n  );\n  return res?.data;\n};\n","import { useMutation, useQuery, useQueryClient } from \"@tanstack/react-query\";\nimport { useFormik } from \"formik\";\nimport React, { useEffect, useState } from \"react\";\nimport ReactMarkdown from \"react-markdown\";\nimport { Link } from \"react-router-dom\";\nimport * as Yup from \"yup\";\nimport { generateContentApi } from \"../apis/aiApi\";\nimport { profileApi } from \"../apis/usersApi\";\nimport Loader from \"../components/Loader.component\";\nimport StatusMessage from \"../components/StatusMessage.component\";\n\nconst Content = () => {\n  const [initialPrompt, setInitialPrompt] = useState(\"A prompt is required\");\n  const queryClient = useQueryClient();\n  const [generatedContent, setGeneratedContent] = useState(\"\");\n  const mutation = useMutation({\n    mutationFn: generateContentApi,\n    onSuccess: () => {\n      queryClient.invalidateQueries([\"profile\"]);\n    },\n  });\n  // Formik setup for handling form data\n  const formik = useFormik({\n    initialValues: {\n      prompt: \"\",\n    },\n    validationSchema: Yup.object({\n      prompt: Yup.string().required(\"A prompt is required\"),\n    }),\n    onSubmit: (values) => {\n      setInitialPrompt(values.prompt);\n      mutation.mutate(values);\n    },\n  });\n\n  const userQuery = useQuery({\n    queryFn: profileApi,\n    queryKey: [\"profile\"],\n  });\n  useEffect(() => {\n    if (mutation.isSuccess) {\n      setGeneratedContent(mutation?.data?.content);\n    }\n  }, [mutation]);\n  if (userQuery.isLoading) return <Loader />;\n  if (userQuery.isError)\n    return (\n      <StatusMessage\n        type={\"loading\"}\n        message={userQuery?.error?.response?.data?.message}\n      />\n    );\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-gray-900 to-gray-900 flex justify-center items-center p-6\">\n      <div className=\"bg-white rounded-xl shadow-xl overflow-hidden max-w-2xl w-full p-6\">\n        <h4 className=\"text-3xl font-extrabold text-gray-800 mb-2 text-center\">\n          Hello, {userQuery?.data?.user?.username}\n        </h4>\n        <p className=\"text-xl font-semibold text-gray-800 mb-6 text-center\">\n          Get help with writing, planning, learning, and more from Gemini AI\n        </p>\n\n        {/* Static display for Plan and Credits */}\n        <div className=\"flex flex-wrap gap-2\">\n          <div className=\"mb-3\">\n            <span className=\"text-sm font-semibold bg-green-300 px-4 py-1 rounded-md\">\n              Plan :{\" \"}\n              {userQuery?.data?.user?.subscriptionPlan\n                ? userQuery?.data?.user?.subscriptionPlan\n                : \"Trial\"}\n            </span>\n          </div>\n          <div className=\"mb-3\">\n            <span className=\"text-sm font-semibold bg-green-300 px-4 py-1 rounded-md\">\n              Credits : {userQuery?.data?.user?.apiRequestCount} /{\" \"}\n              {userQuery?.data?.user?.monthlyRequestCount}\n            </span>\n          </div>\n          <Link to=\"/history\" className=\"text-blue-600\">\n            <strong>View history</strong>\n          </Link>\n        </div>\n\n        {/* Form for generating content */}\n        <form onSubmit={formik.handleSubmit} className=\"space-y-4\">\n          {/* Prompt input field */}\n          <div>\n            <label\n              htmlFor=\"prompt\"\n              className=\"block text-gray-700 text-sm font-semibold mb-2\"\n            >\n              Enter a prompt of your idea\n            </label>\n            <input\n              id=\"prompt\"\n              type=\"text\"\n              {...formik.getFieldProps(\"prompt\")}\n              className=\"px-4 py-2 w-full border rounded-md focus:ring-2 focus:ring-indigo-500\"\n              placeholder=\"Enter a topic or idea\"\n            />\n            {formik.touched.prompt && formik.errors.prompt && (\n              <div className=\"text-red-500 mt-1\">{formik.errors.prompt}</div>\n            )}\n          </div>\n          {mutation?.isPending && (\n            <StatusMessage\n              type={\"loading\"}\n              message={\"Loading Please Wait...\"}\n            />\n          )}\n          {mutation?.isSuccess && (\n            <StatusMessage type={\"success\"} message={\"Content Generated ðŸŽ‰\"} />\n          )}\n          {mutation?.isError && (\n            <>\n              <StatusMessage\n                type={\"error\"}\n                message={mutation?.error?.response?.data?.message}\n              />\n              <Link to=\"/plans\">\n                <button className=\" mt-4 w-full py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-gradient-to-r from-green-500 to-lime-500 hover:from-lime-600 hover:to-lime-600 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-lime-500\">\n                  Buy Credits\n                </button>\n              </Link>\n            </>\n          )}\n          {/* Submit button */}\n          <button\n            type=\"submit\"\n            className=\"w-full py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-gradient-to-r from-purple-500 to-blue-500 hover:from-indigo-600 hover:to-blue-600 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500\"\n            disabled={initialPrompt === formik.values.prompt ? true : false}\n          >\n            Generate Content\n          </button>\n        </form>\n\n        {/* Display generated content */}\n        {generatedContent && (\n          <div className=\"mt-6 p-4 bg-gray-100 rounded-md\">\n            <h3 className=\"text-lg font-semibold text-gray-800 mb-2\">\n              Generated Content:\n            </h3>\n            <p className=\"text-gray-900 overflow-auto\">\n              <ReactMarkdown children={generatedContent} />\n            </p>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default Content;\n"],"names":["_ref","icon","colorClass","type","message","_jsx","AiOutlineCloseCircle","className","AiOutlineCheckCircle","AiOutlineLoading3Quarters","_jsxs","concat","children","generateContentApi","async","prompt","res","axios","post","process","withCredentials","data","Content","_userQuery$error","_userQuery$error$resp","_userQuery$error$resp2","_userQuery$data","_userQuery$data$user","_userQuery$data2","_userQuery$data2$user","_userQuery$data3","_userQuery$data3$user","_userQuery$data4","_userQuery$data4$user","_userQuery$data5","_userQuery$data5$user","_mutation$error","_mutation$error$respo","_mutation$error$respo2","initialPrompt","setInitialPrompt","useState","queryClient","useQueryClient","generatedContent","setGeneratedContent","mutation","useMutation","mutationFn","onSuccess","invalidateQueries","formik","useFormik","initialValues","validationSchema","Yup","required","onSubmit","values","mutate","userQuery","useQuery","queryFn","profileApi","queryKey","useEffect","_mutation$data","isSuccess","content","isLoading","Loader","isError","StatusMessage","error","response","user","username","subscriptionPlan","apiRequestCount","monthlyRequestCount","Link","to","handleSubmit","htmlFor","id","getFieldProps","placeholder","touched","errors","isPending","_Fragment","disabled","ReactMarkdown"],"sourceRoot":""}