{"version":3,"file":"static/js/105.688b4a23.chunk.js","mappings":"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","sources":["../node_modules/extend/index.js","../node_modules/inline-style-parser/index.js","../node_modules/style-to-object/src/index.ts","../node_modules/estree-util-is-identifier-name/lib/index.js","../node_modules/hast-util-whitespace/lib/index.js","../node_modules/property-information/lib/util/schema.js","../node_modules/property-information/lib/util/merge.js","../node_modules/property-information/lib/normalize.js","../node_modules/property-information/lib/util/info.js","../node_modules/property-information/lib/util/types.js","../node_modules/property-information/lib/util/defined-info.js","../node_modules/property-information/lib/util/create.js","../node_modules/property-information/lib/xlink.js","../node_modules/property-information/lib/xml.js","../node_modules/property-information/lib/util/case-sensitive-transform.js","../node_modules/property-information/lib/util/case-insensitive-transform.js","../node_modules/property-information/lib/xmlns.js","../node_modules/property-information/lib/aria.js","../node_modules/property-information/lib/html.js","../node_modules/property-information/lib/svg.js","../node_modules/property-information/index.js","../node_modules/property-information/lib/find.js","../node_modules/property-information/lib/hast-to-react.js","../node_modules/style-to-object/esm/index.mjs","../node_modules/unist-util-position/lib/index.js","../node_modules/unist-util-stringify-position/lib/index.js","../node_modules/vfile-message/lib/index.js","../node_modules/hast-util-to-jsx-runtime/lib/index.js","../node_modules/comma-separated-tokens/index.js","../node_modules/space-separated-tokens/index.js","../node_modules/html-url-attributes/lib/index.js","../node_modules/mdast-util-to-string/lib/index.js","../node_modules/micromark-util-chunked/index.js","../node_modules/micromark-util-subtokenize/index.js","../node_modules/micromark-util-combine-extensions/index.js","../node_modules/micromark-util-character/index.js","../node_modules/micromark-factory-space/index.js","../node_modules/micromark/lib/initialize/content.js","../node_modules/micromark/lib/initialize/document.js","../node_modules/micromark-core-commonmark/lib/blank-line.js","../node_modules/micromark-core-commonmark/lib/content.js","../node_modules/micromark/lib/initialize/flow.js","../node_modules/micromark/lib/initialize/text.js","../node_modules/micromark-util-resolve-all/index.js","../node_modules/micromark/lib/create-tokenizer.js","../node_modules/micromark-core-commonmark/lib/thematic-break.js","../node_modules/micromark-core-commonmark/lib/list.js","../node_modules/micromark-core-commonmark/lib/block-quote.js","../node_modules/micromark-factory-destination/index.js","../node_modules/micromark-factory-label/index.js","../node_modules/micromark-factory-title/index.js","../node_modules/micromark-factory-whitespace/index.js","../node_modules/micromark-util-normalize-identifier/index.js","../node_modules/micromark-core-commonmark/lib/definition.js","../node_modules/micromark-core-commonmark/lib/code-indented.js","../node_modules/micromark-core-commonmark/lib/heading-atx.js","../node_modules/micromark-core-commonmark/lib/setext-underline.js","../node_modules/micromark-util-html-tag-name/index.js","../node_modules/micromark-core-commonmark/lib/html-flow.js","../node_modules/micromark-core-commonmark/lib/code-fenced.js","../node_modules/decode-named-character-reference/index.dom.js","../node_modules/micromark-core-commonmark/lib/character-reference.js","../node_modules/micromark-core-commonmark/lib/character-escape.js","../node_modules/micromark-core-commonmark/lib/line-ending.js","../node_modules/micromark-core-commonmark/lib/label-end.js","../node_modules/micromark-core-commonmark/lib/label-start-image.js","../node_modules/micromark-util-classify-character/index.js","../node_modules/micromark-core-commonmark/lib/attention.js","../node_modules/micromark-core-commonmark/lib/autolink.js","../node_modules/micromark-core-commonmark/lib/html-text.js","../node_modules/micromark-core-commonmark/lib/label-start-link.js","../node_modules/micromark-core-commonmark/lib/hard-break-escape.js","../node_modules/micromark-core-commonmark/lib/code-text.js","../node_modules/micromark/lib/constructs.js","../node_modules/micromark/lib/parse.js","../node_modules/micromark/lib/preprocess.js","../node_modules/micromark-util-decode-numeric-character-reference/index.js","../node_modules/micromark-util-decode-string/index.js","../node_modules/mdast-util-from-markdown/lib/index.js","../node_modules/micromark/lib/postprocess.js","../node_modules/remark-parse/lib/index.js","../node_modules/@ungap/structured-clone/esm/types.js","../node_modules/@ungap/structured-clone/esm/deserialize.js","../node_modules/@ungap/structured-clone/esm/serialize.js","../node_modules/@ungap/structured-clone/esm/index.js","../node_modules/micromark-util-sanitize-uri/index.js","../node_modules/mdast-util-to-hast/lib/footer.js","../node_modules/unist-util-is/lib/index.js","../node_modules/unist-util-visit-parents/lib/index.js","../node_modules/unist-util-visit/lib/index.js","../node_modules/mdast-util-to-hast/lib/revert.js","../node_modules/mdast-util-to-hast/lib/handlers/list-item.js","../node_modules/trim-lines/index.js","../node_modules/mdast-util-to-hast/lib/handlers/index.js","../node_modules/mdast-util-to-hast/lib/handlers/blockquote.js","../node_modules/mdast-util-to-hast/lib/handlers/break.js","../node_modules/mdast-util-to-hast/lib/handlers/code.js","../node_modules/mdast-util-to-hast/lib/handlers/delete.js","../node_modules/mdast-util-to-hast/lib/handlers/emphasis.js","../node_modules/mdast-util-to-hast/lib/handlers/footnote-reference.js","../node_modules/mdast-util-to-hast/lib/handlers/heading.js","../node_modules/mdast-util-to-hast/lib/handlers/html.js","../node_modules/mdast-util-to-hast/lib/handlers/image-reference.js","../node_modules/mdast-util-to-hast/lib/handlers/image.js","../node_modules/mdast-util-to-hast/lib/handlers/inline-code.js","../node_modules/mdast-util-to-hast/lib/handlers/link-reference.js","../node_modules/mdast-util-to-hast/lib/handlers/link.js","../node_modules/mdast-util-to-hast/lib/handlers/list.js","../node_modules/mdast-util-to-hast/lib/handlers/paragraph.js","../node_modules/mdast-util-to-hast/lib/handlers/root.js","../node_modules/mdast-util-to-hast/lib/handlers/strong.js","../node_modules/mdast-util-to-hast/lib/handlers/table.js","../node_modules/mdast-util-to-hast/lib/handlers/table-cell.js","../node_modules/mdast-util-to-hast/lib/handlers/table-row.js","../node_modules/mdast-util-to-hast/lib/handlers/text.js","../node_modules/mdast-util-to-hast/lib/handlers/thematic-break.js","../node_modules/mdast-util-to-hast/lib/state.js","../node_modules/mdast-util-to-hast/lib/index.js","../node_modules/remark-rehype/lib/index.js","../node_modules/bail/index.js","../node_modules/unified/node_modules/is-plain-obj/index.js","../node_modules/trough/lib/index.js","../node_modules/vfile/lib/minpath.browser.js","../node_modules/vfile/lib/minproc.browser.js","../node_modules/vfile/lib/minurl.shared.js","../node_modules/vfile/lib/minurl.browser.js","../node_modules/vfile/lib/index.js","../node_modules/unified/lib/callable-instance.js","../node_modules/unified/lib/index.js","../node_modules/react-markdown/lib/index.js"],"sourcesContent":["'use strict';\n\nvar hasOwn = Object.prototype.hasOwnProperty;\nvar toStr = Object.prototype.toString;\nvar defineProperty = Object.defineProperty;\nvar gOPD = Object.getOwnPropertyDescriptor;\n\nvar isArray = function isArray(arr) {\n\tif (typeof Array.isArray === 'function') {\n\t\treturn Array.isArray(arr);\n\t}\n\n\treturn toStr.call(arr) === '[object Array]';\n};\n\nvar isPlainObject = function isPlainObject(obj) {\n\tif (!obj || toStr.call(obj) !== '[object Object]') {\n\t\treturn false;\n\t}\n\n\tvar hasOwnConstructor = hasOwn.call(obj, 'constructor');\n\tvar hasIsPrototypeOf = obj.constructor && obj.constructor.prototype && hasOwn.call(obj.constructor.prototype, 'isPrototypeOf');\n\t// Not own constructor property must be Object\n\tif (obj.constructor && !hasOwnConstructor && !hasIsPrototypeOf) {\n\t\treturn false;\n\t}\n\n\t// Own properties are enumerated firstly, so to speed up,\n\t// if last one is own, then all properties are own.\n\tvar key;\n\tfor (key in obj) { /**/ }\n\n\treturn typeof key === 'undefined' || hasOwn.call(obj, key);\n};\n\n// If name is '__proto__', and Object.defineProperty is available, define __proto__ as an own property on target\nvar setProperty = function setProperty(target, options) {\n\tif (defineProperty && options.name === '__proto__') {\n\t\tdefineProperty(target, options.name, {\n\t\t\tenumerable: true,\n\t\t\tconfigurable: true,\n\t\t\tvalue: options.newValue,\n\t\t\twritable: true\n\t\t});\n\t} else {\n\t\ttarget[options.name] = options.newValue;\n\t}\n};\n\n// Return undefined instead of __proto__ if '__proto__' is not an own property\nvar getProperty = function getProperty(obj, name) {\n\tif (name === '__proto__') {\n\t\tif (!hasOwn.call(obj, name)) {\n\t\t\treturn void 0;\n\t\t} else if (gOPD) {\n\t\t\t// In early versions of node, obj['__proto__'] is buggy when obj has\n\t\t\t// __proto__ as an own property. Object.getOwnPropertyDescriptor() works.\n\t\t\treturn gOPD(obj, name).value;\n\t\t}\n\t}\n\n\treturn obj[name];\n};\n\nmodule.exports = function extend() {\n\tvar options, name, src, copy, copyIsArray, clone;\n\tvar target = arguments[0];\n\tvar i = 1;\n\tvar length = arguments.length;\n\tvar deep = false;\n\n\t// Handle a deep copy situation\n\tif (typeof target === 'boolean') {\n\t\tdeep = target;\n\t\ttarget = arguments[1] || {};\n\t\t// skip the boolean and the target\n\t\ti = 2;\n\t}\n\tif (target == null || (typeof target !== 'object' && typeof target !== 'function')) {\n\t\ttarget = {};\n\t}\n\n\tfor (; i < length; ++i) {\n\t\toptions = arguments[i];\n\t\t// Only deal with non-null/undefined values\n\t\tif (options != null) {\n\t\t\t// Extend the base object\n\t\t\tfor (name in options) {\n\t\t\t\tsrc = getProperty(target, name);\n\t\t\t\tcopy = getProperty(options, name);\n\n\t\t\t\t// Prevent never-ending loop\n\t\t\t\tif (target !== copy) {\n\t\t\t\t\t// Recurse if we're merging plain objects or arrays\n\t\t\t\t\tif (deep && copy && (isPlainObject(copy) || (copyIsArray = isArray(copy)))) {\n\t\t\t\t\t\tif (copyIsArray) {\n\t\t\t\t\t\t\tcopyIsArray = false;\n\t\t\t\t\t\t\tclone = src && isArray(src) ? src : [];\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tclone = src && isPlainObject(src) ? src : {};\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Never move original objects, clone them\n\t\t\t\t\t\tsetProperty(target, { name: name, newValue: extend(deep, clone, copy) });\n\n\t\t\t\t\t// Don't bring in undefined values\n\t\t\t\t\t} else if (typeof copy !== 'undefined') {\n\t\t\t\t\t\tsetProperty(target, { name: name, newValue: copy });\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// Return the modified object\n\treturn target;\n};\n","// http://www.w3.org/TR/CSS21/grammar.html\n// https://github.com/visionmedia/css-parse/pull/49#issuecomment-30088027\nvar COMMENT_REGEX = /\\/\\*[^*]*\\*+([^/*][^*]*\\*+)*\\//g;\n\nvar NEWLINE_REGEX = /\\n/g;\nvar WHITESPACE_REGEX = /^\\s*/;\n\n// declaration\nvar PROPERTY_REGEX = /^(\\*?[-#/*\\\\\\w]+(\\[[0-9a-z_-]+\\])?)\\s*/;\nvar COLON_REGEX = /^:\\s*/;\nvar VALUE_REGEX = /^((?:'(?:\\\\'|.)*?'|\"(?:\\\\\"|.)*?\"|\\([^)]*?\\)|[^};])+)/;\nvar SEMICOLON_REGEX = /^[;\\s]*/;\n\n// https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/String/Trim#Polyfill\nvar TRIM_REGEX = /^\\s+|\\s+$/g;\n\n// strings\nvar NEWLINE = '\\n';\nvar FORWARD_SLASH = '/';\nvar ASTERISK = '*';\nvar EMPTY_STRING = '';\n\n// types\nvar TYPE_COMMENT = 'comment';\nvar TYPE_DECLARATION = 'declaration';\n\n/**\n * @param {String} style\n * @param {Object} [options]\n * @return {Object[]}\n * @throws {TypeError}\n * @throws {Error}\n */\nmodule.exports = function (style, options) {\n  if (typeof style !== 'string') {\n    throw new TypeError('First argument must be a string');\n  }\n\n  if (!style) return [];\n\n  options = options || {};\n\n  /**\n   * Positional.\n   */\n  var lineno = 1;\n  var column = 1;\n\n  /**\n   * Update lineno and column based on `str`.\n   *\n   * @param {String} str\n   */\n  function updatePosition(str) {\n    var lines = str.match(NEWLINE_REGEX);\n    if (lines) lineno += lines.length;\n    var i = str.lastIndexOf(NEWLINE);\n    column = ~i ? str.length - i : column + str.length;\n  }\n\n  /**\n   * Mark position and patch `node.position`.\n   *\n   * @return {Function}\n   */\n  function position() {\n    var start = { line: lineno, column: column };\n    return function (node) {\n      node.position = new Position(start);\n      whitespace();\n      return node;\n    };\n  }\n\n  /**\n   * Store position information for a node.\n   *\n   * @constructor\n   * @property {Object} start\n   * @property {Object} end\n   * @property {undefined|String} source\n   */\n  function Position(start) {\n    this.start = start;\n    this.end = { line: lineno, column: column };\n    this.source = options.source;\n  }\n\n  /**\n   * Non-enumerable source string.\n   */\n  Position.prototype.content = style;\n\n  var errorsList = [];\n\n  /**\n   * Error `msg`.\n   *\n   * @param {String} msg\n   * @throws {Error}\n   */\n  function error(msg) {\n    var err = new Error(\n      options.source + ':' + lineno + ':' + column + ': ' + msg\n    );\n    err.reason = msg;\n    err.filename = options.source;\n    err.line = lineno;\n    err.column = column;\n    err.source = style;\n\n    if (options.silent) {\n      errorsList.push(err);\n    } else {\n      throw err;\n    }\n  }\n\n  /**\n   * Match `re` and return captures.\n   *\n   * @param {RegExp} re\n   * @return {undefined|Array}\n   */\n  function match(re) {\n    var m = re.exec(style);\n    if (!m) return;\n    var str = m[0];\n    updatePosition(str);\n    style = style.slice(str.length);\n    return m;\n  }\n\n  /**\n   * Parse whitespace.\n   */\n  function whitespace() {\n    match(WHITESPACE_REGEX);\n  }\n\n  /**\n   * Parse comments.\n   *\n   * @param {Object[]} [rules]\n   * @return {Object[]}\n   */\n  function comments(rules) {\n    var c;\n    rules = rules || [];\n    while ((c = comment())) {\n      if (c !== false) {\n        rules.push(c);\n      }\n    }\n    return rules;\n  }\n\n  /**\n   * Parse comment.\n   *\n   * @return {Object}\n   * @throws {Error}\n   */\n  function comment() {\n    var pos = position();\n    if (FORWARD_SLASH != style.charAt(0) || ASTERISK != style.charAt(1)) return;\n\n    var i = 2;\n    while (\n      EMPTY_STRING != style.charAt(i) &&\n      (ASTERISK != style.charAt(i) || FORWARD_SLASH != style.charAt(i + 1))\n    ) {\n      ++i;\n    }\n    i += 2;\n\n    if (EMPTY_STRING === style.charAt(i - 1)) {\n      return error('End of comment missing');\n    }\n\n    var str = style.slice(2, i - 2);\n    column += 2;\n    updatePosition(str);\n    style = style.slice(i);\n    column += 2;\n\n    return pos({\n      type: TYPE_COMMENT,\n      comment: str\n    });\n  }\n\n  /**\n   * Parse declaration.\n   *\n   * @return {Object}\n   * @throws {Error}\n   */\n  function declaration() {\n    var pos = position();\n\n    // prop\n    var prop = match(PROPERTY_REGEX);\n    if (!prop) return;\n    comment();\n\n    // :\n    if (!match(COLON_REGEX)) return error(\"property missing ':'\");\n\n    // val\n    var val = match(VALUE_REGEX);\n\n    var ret = pos({\n      type: TYPE_DECLARATION,\n      property: trim(prop[0].replace(COMMENT_REGEX, EMPTY_STRING)),\n      value: val\n        ? trim(val[0].replace(COMMENT_REGEX, EMPTY_STRING))\n        : EMPTY_STRING\n    });\n\n    // ;\n    match(SEMICOLON_REGEX);\n\n    return ret;\n  }\n\n  /**\n   * Parse declarations.\n   *\n   * @return {Object[]}\n   */\n  function declarations() {\n    var decls = [];\n\n    comments(decls);\n\n    // declarations\n    var decl;\n    while ((decl = declaration())) {\n      if (decl !== false) {\n        decls.push(decl);\n        comments(decls);\n      }\n    }\n\n    return decls;\n  }\n\n  whitespace();\n  return declarations();\n};\n\n/**\n * Trim `str`.\n *\n * @param {String} str\n * @return {String}\n */\nfunction trim(str) {\n  return str ? str.replace(TRIM_REGEX, EMPTY_STRING) : EMPTY_STRING;\n}\n","import parse from 'inline-style-parser';\nimport type { Declaration } from 'inline-style-parser';\n\nexport { Declaration };\n\ninterface StyleObject {\n  [name: string]: string;\n}\n\ntype Iterator = (\n  property: string,\n  value: string,\n  declaration: Declaration,\n) => void;\n\n/**\n * Parses inline style to object.\n *\n * @param style - Inline style.\n * @param iterator - Iterator.\n * @returns - Style object or null.\n *\n * @example Parsing inline style to object:\n *\n * ```js\n * import parse from 'style-to-object';\n * parse('line-height: 42;'); // { 'line-height': '42' }\n * ```\n */\nexport default function StyleToObject(\n  style: string,\n  iterator?: Iterator,\n): StyleObject | null {\n  let styleObject: StyleObject | null = null;\n\n  if (!style || typeof style !== 'string') {\n    return styleObject;\n  }\n\n  const declarations = parse(style);\n  const hasIterator = typeof iterator === 'function';\n\n  declarations.forEach((declaration) => {\n    if (declaration.type !== 'declaration') {\n      return;\n    }\n\n    const { property, value } = declaration;\n\n    if (hasIterator) {\n      iterator(property, value, declaration);\n    } else if (value) {\n      styleObject = styleObject || {};\n      styleObject[property] = value;\n    }\n  });\n\n  return styleObject;\n}\n","/**\n * @typedef Options\n *   Configuration.\n * @property {boolean | null | undefined} [jsx=false]\n *   Support JSX identifiers (default: `false`).\n */\n\nconst startRe = /[$_\\p{ID_Start}]/u\nconst contRe = /[$_\\u{200C}\\u{200D}\\p{ID_Continue}]/u\nconst contReJsx = /[-$_\\u{200C}\\u{200D}\\p{ID_Continue}]/u\nconst nameRe = /^[$_\\p{ID_Start}][$_\\u{200C}\\u{200D}\\p{ID_Continue}]*$/u\nconst nameReJsx = /^[$_\\p{ID_Start}][-$_\\u{200C}\\u{200D}\\p{ID_Continue}]*$/u\n\n/** @type {Options} */\nconst emptyOptions = {}\n\n/**\n * Checks if the given code point can start an identifier.\n *\n * @param {number | undefined} code\n *   Code point to check.\n * @returns {boolean}\n *   Whether `code` can start an identifier.\n */\n// Note: `undefined` is supported so you can pass the result from `''.codePointAt`.\nexport function start(code) {\n  return code ? startRe.test(String.fromCodePoint(code)) : false\n}\n\n/**\n * Checks if the given code point can continue an identifier.\n *\n * @param {number | undefined} code\n *   Code point to check.\n * @param {Options | null | undefined} [options]\n *   Configuration (optional).\n * @returns {boolean}\n *   Whether `code` can continue an identifier.\n */\n// Note: `undefined` is supported so you can pass the result from `''.codePointAt`.\nexport function cont(code, options) {\n  const settings = options || emptyOptions\n  const re = settings.jsx ? contReJsx : contRe\n  return code ? re.test(String.fromCodePoint(code)) : false\n}\n\n/**\n * Checks if the given value is a valid identifier name.\n *\n * @param {string} name\n *   Identifier to check.\n * @param {Options | null | undefined} [options]\n *   Configuration (optional).\n * @returns {boolean}\n *   Whether `name` can be an identifier.\n */\nexport function name(name, options) {\n  const settings = options || emptyOptions\n  const re = settings.jsx ? nameReJsx : nameRe\n  return re.test(name)\n}\n","/**\n * @typedef {import('hast').Nodes} Nodes\n */\n\n// HTML whitespace expression.\n// See <https://infra.spec.whatwg.org/#ascii-whitespace>.\nconst re = /[ \\t\\n\\f\\r]/g\n\n/**\n * Check if the given value is *inter-element whitespace*.\n *\n * @param {Nodes | string} thing\n *   Thing to check (`Node` or `string`).\n * @returns {boolean}\n *   Whether the `value` is inter-element whitespace (`boolean`): consisting of\n *   zero or more of space, tab (`\\t`), line feed (`\\n`), carriage return\n *   (`\\r`), or form feed (`\\f`); if a node is passed it must be a `Text` node,\n *   whose `value` field is checked.\n */\nexport function whitespace(thing) {\n  return typeof thing === 'object'\n    ? thing.type === 'text'\n      ? empty(thing.value)\n      : false\n    : empty(thing)\n}\n\n/**\n * @param {string} value\n * @returns {boolean}\n */\nfunction empty(value) {\n  return value.replace(re, '') === ''\n}\n","/**\n * @typedef {import('./info.js').Info} Info\n * @typedef {Record<string, Info>} Properties\n * @typedef {Record<string, string>} Normal\n */\n\nexport class Schema {\n  /**\n   * @constructor\n   * @param {Properties} property\n   * @param {Normal} normal\n   * @param {string} [space]\n   */\n  constructor(property, normal, space) {\n    this.property = property\n    this.normal = normal\n    if (space) {\n      this.space = space\n    }\n  }\n}\n\n/** @type {Properties} */\nSchema.prototype.property = {}\n/** @type {Normal} */\nSchema.prototype.normal = {}\n/** @type {string|null} */\nSchema.prototype.space = null\n","/**\n * @typedef {import('./schema.js').Properties} Properties\n * @typedef {import('./schema.js').Normal} Normal\n */\n\nimport {Schema} from './schema.js'\n\n/**\n * @param {Schema[]} definitions\n * @param {string} [space]\n * @returns {Schema}\n */\nexport function merge(definitions, space) {\n  /** @type {Properties} */\n  const property = {}\n  /** @type {Normal} */\n  const normal = {}\n  let index = -1\n\n  while (++index < definitions.length) {\n    Object.assign(property, definitions[index].property)\n    Object.assign(normal, definitions[index].normal)\n  }\n\n  return new Schema(property, normal, space)\n}\n","/**\n * @param {string} value\n * @returns {string}\n */\nexport function normalize(value) {\n  return value.toLowerCase()\n}\n","export class Info {\n  /**\n   * @constructor\n   * @param {string} property\n   * @param {string} attribute\n   */\n  constructor(property, attribute) {\n    /** @type {string} */\n    this.property = property\n    /** @type {string} */\n    this.attribute = attribute\n  }\n}\n\n/** @type {string|null} */\nInfo.prototype.space = null\nInfo.prototype.boolean = false\nInfo.prototype.booleanish = false\nInfo.prototype.overloadedBoolean = false\nInfo.prototype.number = false\nInfo.prototype.commaSeparated = false\nInfo.prototype.spaceSeparated = false\nInfo.prototype.commaOrSpaceSeparated = false\nInfo.prototype.mustUseProperty = false\nInfo.prototype.defined = false\n","let powers = 0\n\nexport const boolean = increment()\nexport const booleanish = increment()\nexport const overloadedBoolean = increment()\nexport const number = increment()\nexport const spaceSeparated = increment()\nexport const commaSeparated = increment()\nexport const commaOrSpaceSeparated = increment()\n\nfunction increment() {\n  return 2 ** ++powers\n}\n","import {Info} from './info.js'\nimport * as types from './types.js'\n\n/** @type {Array<keyof types>} */\n// @ts-expect-error: hush.\nconst checks = Object.keys(types)\n\nexport class DefinedInfo extends Info {\n  /**\n   * @constructor\n   * @param {string} property\n   * @param {string} attribute\n   * @param {number|null} [mask]\n   * @param {string} [space]\n   */\n  constructor(property, attribute, mask, space) {\n    let index = -1\n\n    super(property, attribute)\n\n    mark(this, 'space', space)\n\n    if (typeof mask === 'number') {\n      while (++index < checks.length) {\n        const check = checks[index]\n        mark(this, checks[index], (mask & types[check]) === types[check])\n      }\n    }\n  }\n}\n\nDefinedInfo.prototype.defined = true\n\n/**\n * @param {DefinedInfo} values\n * @param {string} key\n * @param {unknown} value\n */\nfunction mark(values, key, value) {\n  if (value) {\n    // @ts-expect-error: assume `value` matches the expected value of `key`.\n    values[key] = value\n  }\n}\n","/**\n * @typedef {import('./schema.js').Properties} Properties\n * @typedef {import('./schema.js').Normal} Normal\n *\n * @typedef {Record<string, string>} Attributes\n *\n * @typedef {Object} Definition\n * @property {Record<string, number|null>} properties\n * @property {(attributes: Attributes, property: string) => string} transform\n * @property {string} [space]\n * @property {Attributes} [attributes]\n * @property {Array<string>} [mustUseProperty]\n */\n\nimport {normalize} from '../normalize.js'\nimport {Schema} from './schema.js'\nimport {DefinedInfo} from './defined-info.js'\n\nconst own = {}.hasOwnProperty\n\n/**\n * @param {Definition} definition\n * @returns {Schema}\n */\nexport function create(definition) {\n  /** @type {Properties} */\n  const property = {}\n  /** @type {Normal} */\n  const normal = {}\n  /** @type {string} */\n  let prop\n\n  for (prop in definition.properties) {\n    if (own.call(definition.properties, prop)) {\n      const value = definition.properties[prop]\n      const info = new DefinedInfo(\n        prop,\n        definition.transform(definition.attributes || {}, prop),\n        value,\n        definition.space\n      )\n\n      if (\n        definition.mustUseProperty &&\n        definition.mustUseProperty.includes(prop)\n      ) {\n        info.mustUseProperty = true\n      }\n\n      property[prop] = info\n\n      normal[normalize(prop)] = prop\n      normal[normalize(info.attribute)] = prop\n    }\n  }\n\n  return new Schema(property, normal, definition.space)\n}\n","import {create} from './util/create.js'\n\nexport const xlink = create({\n  space: 'xlink',\n  transform(_, prop) {\n    return 'xlink:' + prop.slice(5).toLowerCase()\n  },\n  properties: {\n    xLinkActuate: null,\n    xLinkArcRole: null,\n    xLinkHref: null,\n    xLinkRole: null,\n    xLinkShow: null,\n    xLinkTitle: null,\n    xLinkType: null\n  }\n})\n","import {create} from './util/create.js'\n\nexport const xml = create({\n  space: 'xml',\n  transform(_, prop) {\n    return 'xml:' + prop.slice(3).toLowerCase()\n  },\n  properties: {xmlLang: null, xmlBase: null, xmlSpace: null}\n})\n","/**\n * @param {Record<string, string>} attributes\n * @param {string} attribute\n * @returns {string}\n */\nexport function caseSensitiveTransform(attributes, attribute) {\n  return attribute in attributes ? attributes[attribute] : attribute\n}\n","import {caseSensitiveTransform} from './case-sensitive-transform.js'\n\n/**\n * @param {Record<string, string>} attributes\n * @param {string} property\n * @returns {string}\n */\nexport function caseInsensitiveTransform(attributes, property) {\n  return caseSensitiveTransform(attributes, property.toLowerCase())\n}\n","import {create} from './util/create.js'\nimport {caseInsensitiveTransform} from './util/case-insensitive-transform.js'\n\nexport const xmlns = create({\n  space: 'xmlns',\n  attributes: {xmlnsxlink: 'xmlns:xlink'},\n  transform: caseInsensitiveTransform,\n  properties: {xmlns: null, xmlnsXLink: null}\n})\n","import {booleanish, number, spaceSeparated} from './util/types.js'\nimport {create} from './util/create.js'\n\nexport const aria = create({\n  transform(_, prop) {\n    return prop === 'role' ? prop : 'aria-' + prop.slice(4).toLowerCase()\n  },\n  properties: {\n    ariaActiveDescendant: null,\n    ariaAtomic: booleanish,\n    ariaAutoComplete: null,\n    ariaBusy: booleanish,\n    ariaChecked: booleanish,\n    ariaColCount: number,\n    ariaColIndex: number,\n    ariaColSpan: number,\n    ariaControls: spaceSeparated,\n    ariaCurrent: null,\n    ariaDescribedBy: spaceSeparated,\n    ariaDetails: null,\n    ariaDisabled: booleanish,\n    ariaDropEffect: spaceSeparated,\n    ariaErrorMessage: null,\n    ariaExpanded: booleanish,\n    ariaFlowTo: spaceSeparated,\n    ariaGrabbed: booleanish,\n    ariaHasPopup: null,\n    ariaHidden: booleanish,\n    ariaInvalid: null,\n    ariaKeyShortcuts: null,\n    ariaLabel: null,\n    ariaLabelledBy: spaceSeparated,\n    ariaLevel: number,\n    ariaLive: null,\n    ariaModal: booleanish,\n    ariaMultiLine: booleanish,\n    ariaMultiSelectable: booleanish,\n    ariaOrientation: null,\n    ariaOwns: spaceSeparated,\n    ariaPlaceholder: null,\n    ariaPosInSet: number,\n    ariaPressed: booleanish,\n    ariaReadOnly: booleanish,\n    ariaRelevant: null,\n    ariaRequired: booleanish,\n    ariaRoleDescription: spaceSeparated,\n    ariaRowCount: number,\n    ariaRowIndex: number,\n    ariaRowSpan: number,\n    ariaSelected: booleanish,\n    ariaSetSize: number,\n    ariaSort: null,\n    ariaValueMax: number,\n    ariaValueMin: number,\n    ariaValueNow: number,\n    ariaValueText: null,\n    role: null\n  }\n})\n","import {\n  boolean,\n  overloadedBoolean,\n  booleanish,\n  number,\n  spaceSeparated,\n  commaSeparated\n} from './util/types.js'\nimport {create} from './util/create.js'\nimport {caseInsensitiveTransform} from './util/case-insensitive-transform.js'\n\nexport const html = create({\n  space: 'html',\n  attributes: {\n    acceptcharset: 'accept-charset',\n    classname: 'class',\n    htmlfor: 'for',\n    httpequiv: 'http-equiv'\n  },\n  transform: caseInsensitiveTransform,\n  mustUseProperty: ['checked', 'multiple', 'muted', 'selected'],\n  properties: {\n    // Standard Properties.\n    abbr: null,\n    accept: commaSeparated,\n    acceptCharset: spaceSeparated,\n    accessKey: spaceSeparated,\n    action: null,\n    allow: null,\n    allowFullScreen: boolean,\n    allowPaymentRequest: boolean,\n    allowUserMedia: boolean,\n    alt: null,\n    as: null,\n    async: boolean,\n    autoCapitalize: null,\n    autoComplete: spaceSeparated,\n    autoFocus: boolean,\n    autoPlay: boolean,\n    blocking: spaceSeparated,\n    capture: null,\n    charSet: null,\n    checked: boolean,\n    cite: null,\n    className: spaceSeparated,\n    cols: number,\n    colSpan: null,\n    content: null,\n    contentEditable: booleanish,\n    controls: boolean,\n    controlsList: spaceSeparated,\n    coords: number | commaSeparated,\n    crossOrigin: null,\n    data: null,\n    dateTime: null,\n    decoding: null,\n    default: boolean,\n    defer: boolean,\n    dir: null,\n    dirName: null,\n    disabled: boolean,\n    download: overloadedBoolean,\n    draggable: booleanish,\n    encType: null,\n    enterKeyHint: null,\n    fetchPriority: null,\n    form: null,\n    formAction: null,\n    formEncType: null,\n    formMethod: null,\n    formNoValidate: boolean,\n    formTarget: null,\n    headers: spaceSeparated,\n    height: number,\n    hidden: boolean,\n    high: number,\n    href: null,\n    hrefLang: null,\n    htmlFor: spaceSeparated,\n    httpEquiv: spaceSeparated,\n    id: null,\n    imageSizes: null,\n    imageSrcSet: null,\n    inert: boolean,\n    inputMode: null,\n    integrity: null,\n    is: null,\n    isMap: boolean,\n    itemId: null,\n    itemProp: spaceSeparated,\n    itemRef: spaceSeparated,\n    itemScope: boolean,\n    itemType: spaceSeparated,\n    kind: null,\n    label: null,\n    lang: null,\n    language: null,\n    list: null,\n    loading: null,\n    loop: boolean,\n    low: number,\n    manifest: null,\n    max: null,\n    maxLength: number,\n    media: null,\n    method: null,\n    min: null,\n    minLength: number,\n    multiple: boolean,\n    muted: boolean,\n    name: null,\n    nonce: null,\n    noModule: boolean,\n    noValidate: boolean,\n    onAbort: null,\n    onAfterPrint: null,\n    onAuxClick: null,\n    onBeforeMatch: null,\n    onBeforePrint: null,\n    onBeforeToggle: null,\n    onBeforeUnload: null,\n    onBlur: null,\n    onCancel: null,\n    onCanPlay: null,\n    onCanPlayThrough: null,\n    onChange: null,\n    onClick: null,\n    onClose: null,\n    onContextLost: null,\n    onContextMenu: null,\n    onContextRestored: null,\n    onCopy: null,\n    onCueChange: null,\n    onCut: null,\n    onDblClick: null,\n    onDrag: null,\n    onDragEnd: null,\n    onDragEnter: null,\n    onDragExit: null,\n    onDragLeave: null,\n    onDragOver: null,\n    onDragStart: null,\n    onDrop: null,\n    onDurationChange: null,\n    onEmptied: null,\n    onEnded: null,\n    onError: null,\n    onFocus: null,\n    onFormData: null,\n    onHashChange: null,\n    onInput: null,\n    onInvalid: null,\n    onKeyDown: null,\n    onKeyPress: null,\n    onKeyUp: null,\n    onLanguageChange: null,\n    onLoad: null,\n    onLoadedData: null,\n    onLoadedMetadata: null,\n    onLoadEnd: null,\n    onLoadStart: null,\n    onMessage: null,\n    onMessageError: null,\n    onMouseDown: null,\n    onMouseEnter: null,\n    onMouseLeave: null,\n    onMouseMove: null,\n    onMouseOut: null,\n    onMouseOver: null,\n    onMouseUp: null,\n    onOffline: null,\n    onOnline: null,\n    onPageHide: null,\n    onPageShow: null,\n    onPaste: null,\n    onPause: null,\n    onPlay: null,\n    onPlaying: null,\n    onPopState: null,\n    onProgress: null,\n    onRateChange: null,\n    onRejectionHandled: null,\n    onReset: null,\n    onResize: null,\n    onScroll: null,\n    onScrollEnd: null,\n    onSecurityPolicyViolation: null,\n    onSeeked: null,\n    onSeeking: null,\n    onSelect: null,\n    onSlotChange: null,\n    onStalled: null,\n    onStorage: null,\n    onSubmit: null,\n    onSuspend: null,\n    onTimeUpdate: null,\n    onToggle: null,\n    onUnhandledRejection: null,\n    onUnload: null,\n    onVolumeChange: null,\n    onWaiting: null,\n    onWheel: null,\n    open: boolean,\n    optimum: number,\n    pattern: null,\n    ping: spaceSeparated,\n    placeholder: null,\n    playsInline: boolean,\n    popover: null,\n    popoverTarget: null,\n    popoverTargetAction: null,\n    poster: null,\n    preload: null,\n    readOnly: boolean,\n    referrerPolicy: null,\n    rel: spaceSeparated,\n    required: boolean,\n    reversed: boolean,\n    rows: number,\n    rowSpan: number,\n    sandbox: spaceSeparated,\n    scope: null,\n    scoped: boolean,\n    seamless: boolean,\n    selected: boolean,\n    shadowRootClonable: boolean,\n    shadowRootDelegatesFocus: boolean,\n    shadowRootMode: null,\n    shape: null,\n    size: number,\n    sizes: null,\n    slot: null,\n    span: number,\n    spellCheck: booleanish,\n    src: null,\n    srcDoc: null,\n    srcLang: null,\n    srcSet: null,\n    start: number,\n    step: null,\n    style: null,\n    tabIndex: number,\n    target: null,\n    title: null,\n    translate: null,\n    type: null,\n    typeMustMatch: boolean,\n    useMap: null,\n    value: booleanish,\n    width: number,\n    wrap: null,\n    writingSuggestions: null,\n\n    // Legacy.\n    // See: https://html.spec.whatwg.org/#other-elements,-attributes-and-apis\n    align: null, // Several. Use CSS `text-align` instead,\n    aLink: null, // `<body>`. Use CSS `a:active {color}` instead\n    archive: spaceSeparated, // `<object>`. List of URIs to archives\n    axis: null, // `<td>` and `<th>`. Use `scope` on `<th>`\n    background: null, // `<body>`. Use CSS `background-image` instead\n    bgColor: null, // `<body>` and table elements. Use CSS `background-color` instead\n    border: number, // `<table>`. Use CSS `border-width` instead,\n    borderColor: null, // `<table>`. Use CSS `border-color` instead,\n    bottomMargin: number, // `<body>`\n    cellPadding: null, // `<table>`\n    cellSpacing: null, // `<table>`\n    char: null, // Several table elements. When `align=char`, sets the character to align on\n    charOff: null, // Several table elements. When `char`, offsets the alignment\n    classId: null, // `<object>`\n    clear: null, // `<br>`. Use CSS `clear` instead\n    code: null, // `<object>`\n    codeBase: null, // `<object>`\n    codeType: null, // `<object>`\n    color: null, // `<font>` and `<hr>`. Use CSS instead\n    compact: boolean, // Lists. Use CSS to reduce space between items instead\n    declare: boolean, // `<object>`\n    event: null, // `<script>`\n    face: null, // `<font>`. Use CSS instead\n    frame: null, // `<table>`\n    frameBorder: null, // `<iframe>`. Use CSS `border` instead\n    hSpace: number, // `<img>` and `<object>`\n    leftMargin: number, // `<body>`\n    link: null, // `<body>`. Use CSS `a:link {color: *}` instead\n    longDesc: null, // `<frame>`, `<iframe>`, and `<img>`. Use an `<a>`\n    lowSrc: null, // `<img>`. Use a `<picture>`\n    marginHeight: number, // `<body>`\n    marginWidth: number, // `<body>`\n    noResize: boolean, // `<frame>`\n    noHref: boolean, // `<area>`. Use no href instead of an explicit `nohref`\n    noShade: boolean, // `<hr>`. Use background-color and height instead of borders\n    noWrap: boolean, // `<td>` and `<th>`\n    object: null, // `<applet>`\n    profile: null, // `<head>`\n    prompt: null, // `<isindex>`\n    rev: null, // `<link>`\n    rightMargin: number, // `<body>`\n    rules: null, // `<table>`\n    scheme: null, // `<meta>`\n    scrolling: booleanish, // `<frame>`. Use overflow in the child context\n    standby: null, // `<object>`\n    summary: null, // `<table>`\n    text: null, // `<body>`. Use CSS `color` instead\n    topMargin: number, // `<body>`\n    valueType: null, // `<param>`\n    version: null, // `<html>`. Use a doctype.\n    vAlign: null, // Several. Use CSS `vertical-align` instead\n    vLink: null, // `<body>`. Use CSS `a:visited {color}` instead\n    vSpace: number, // `<img>` and `<object>`\n\n    // Non-standard Properties.\n    allowTransparency: null,\n    autoCorrect: null,\n    autoSave: null,\n    disablePictureInPicture: boolean,\n    disableRemotePlayback: boolean,\n    prefix: null,\n    property: null,\n    results: number,\n    security: null,\n    unselectable: null\n  }\n})\n","import {\n  boolean,\n  number,\n  spaceSeparated,\n  commaSeparated,\n  commaOrSpaceSeparated\n} from './util/types.js'\nimport {create} from './util/create.js'\nimport {caseSensitiveTransform} from './util/case-sensitive-transform.js'\n\nexport const svg = create({\n  space: 'svg',\n  attributes: {\n    accentHeight: 'accent-height',\n    alignmentBaseline: 'alignment-baseline',\n    arabicForm: 'arabic-form',\n    baselineShift: 'baseline-shift',\n    capHeight: 'cap-height',\n    className: 'class',\n    clipPath: 'clip-path',\n    clipRule: 'clip-rule',\n    colorInterpolation: 'color-interpolation',\n    colorInterpolationFilters: 'color-interpolation-filters',\n    colorProfile: 'color-profile',\n    colorRendering: 'color-rendering',\n    crossOrigin: 'crossorigin',\n    dataType: 'datatype',\n    dominantBaseline: 'dominant-baseline',\n    enableBackground: 'enable-background',\n    fillOpacity: 'fill-opacity',\n    fillRule: 'fill-rule',\n    floodColor: 'flood-color',\n    floodOpacity: 'flood-opacity',\n    fontFamily: 'font-family',\n    fontSize: 'font-size',\n    fontSizeAdjust: 'font-size-adjust',\n    fontStretch: 'font-stretch',\n    fontStyle: 'font-style',\n    fontVariant: 'font-variant',\n    fontWeight: 'font-weight',\n    glyphName: 'glyph-name',\n    glyphOrientationHorizontal: 'glyph-orientation-horizontal',\n    glyphOrientationVertical: 'glyph-orientation-vertical',\n    hrefLang: 'hreflang',\n    horizAdvX: 'horiz-adv-x',\n    horizOriginX: 'horiz-origin-x',\n    horizOriginY: 'horiz-origin-y',\n    imageRendering: 'image-rendering',\n    letterSpacing: 'letter-spacing',\n    lightingColor: 'lighting-color',\n    markerEnd: 'marker-end',\n    markerMid: 'marker-mid',\n    markerStart: 'marker-start',\n    navDown: 'nav-down',\n    navDownLeft: 'nav-down-left',\n    navDownRight: 'nav-down-right',\n    navLeft: 'nav-left',\n    navNext: 'nav-next',\n    navPrev: 'nav-prev',\n    navRight: 'nav-right',\n    navUp: 'nav-up',\n    navUpLeft: 'nav-up-left',\n    navUpRight: 'nav-up-right',\n    onAbort: 'onabort',\n    onActivate: 'onactivate',\n    onAfterPrint: 'onafterprint',\n    onBeforePrint: 'onbeforeprint',\n    onBegin: 'onbegin',\n    onCancel: 'oncancel',\n    onCanPlay: 'oncanplay',\n    onCanPlayThrough: 'oncanplaythrough',\n    onChange: 'onchange',\n    onClick: 'onclick',\n    onClose: 'onclose',\n    onCopy: 'oncopy',\n    onCueChange: 'oncuechange',\n    onCut: 'oncut',\n    onDblClick: 'ondblclick',\n    onDrag: 'ondrag',\n    onDragEnd: 'ondragend',\n    onDragEnter: 'ondragenter',\n    onDragExit: 'ondragexit',\n    onDragLeave: 'ondragleave',\n    onDragOver: 'ondragover',\n    onDragStart: 'ondragstart',\n    onDrop: 'ondrop',\n    onDurationChange: 'ondurationchange',\n    onEmptied: 'onemptied',\n    onEnd: 'onend',\n    onEnded: 'onended',\n    onError: 'onerror',\n    onFocus: 'onfocus',\n    onFocusIn: 'onfocusin',\n    onFocusOut: 'onfocusout',\n    onHashChange: 'onhashchange',\n    onInput: 'oninput',\n    onInvalid: 'oninvalid',\n    onKeyDown: 'onkeydown',\n    onKeyPress: 'onkeypress',\n    onKeyUp: 'onkeyup',\n    onLoad: 'onload',\n    onLoadedData: 'onloadeddata',\n    onLoadedMetadata: 'onloadedmetadata',\n    onLoadStart: 'onloadstart',\n    onMessage: 'onmessage',\n    onMouseDown: 'onmousedown',\n    onMouseEnter: 'onmouseenter',\n    onMouseLeave: 'onmouseleave',\n    onMouseMove: 'onmousemove',\n    onMouseOut: 'onmouseout',\n    onMouseOver: 'onmouseover',\n    onMouseUp: 'onmouseup',\n    onMouseWheel: 'onmousewheel',\n    onOffline: 'onoffline',\n    onOnline: 'ononline',\n    onPageHide: 'onpagehide',\n    onPageShow: 'onpageshow',\n    onPaste: 'onpaste',\n    onPause: 'onpause',\n    onPlay: 'onplay',\n    onPlaying: 'onplaying',\n    onPopState: 'onpopstate',\n    onProgress: 'onprogress',\n    onRateChange: 'onratechange',\n    onRepeat: 'onrepeat',\n    onReset: 'onreset',\n    onResize: 'onresize',\n    onScroll: 'onscroll',\n    onSeeked: 'onseeked',\n    onSeeking: 'onseeking',\n    onSelect: 'onselect',\n    onShow: 'onshow',\n    onStalled: 'onstalled',\n    onStorage: 'onstorage',\n    onSubmit: 'onsubmit',\n    onSuspend: 'onsuspend',\n    onTimeUpdate: 'ontimeupdate',\n    onToggle: 'ontoggle',\n    onUnload: 'onunload',\n    onVolumeChange: 'onvolumechange',\n    onWaiting: 'onwaiting',\n    onZoom: 'onzoom',\n    overlinePosition: 'overline-position',\n    overlineThickness: 'overline-thickness',\n    paintOrder: 'paint-order',\n    panose1: 'panose-1',\n    pointerEvents: 'pointer-events',\n    referrerPolicy: 'referrerpolicy',\n    renderingIntent: 'rendering-intent',\n    shapeRendering: 'shape-rendering',\n    stopColor: 'stop-color',\n    stopOpacity: 'stop-opacity',\n    strikethroughPosition: 'strikethrough-position',\n    strikethroughThickness: 'strikethrough-thickness',\n    strokeDashArray: 'stroke-dasharray',\n    strokeDashOffset: 'stroke-dashoffset',\n    strokeLineCap: 'stroke-linecap',\n    strokeLineJoin: 'stroke-linejoin',\n    strokeMiterLimit: 'stroke-miterlimit',\n    strokeOpacity: 'stroke-opacity',\n    strokeWidth: 'stroke-width',\n    tabIndex: 'tabindex',\n    textAnchor: 'text-anchor',\n    textDecoration: 'text-decoration',\n    textRendering: 'text-rendering',\n    transformOrigin: 'transform-origin',\n    typeOf: 'typeof',\n    underlinePosition: 'underline-position',\n    underlineThickness: 'underline-thickness',\n    unicodeBidi: 'unicode-bidi',\n    unicodeRange: 'unicode-range',\n    unitsPerEm: 'units-per-em',\n    vAlphabetic: 'v-alphabetic',\n    vHanging: 'v-hanging',\n    vIdeographic: 'v-ideographic',\n    vMathematical: 'v-mathematical',\n    vectorEffect: 'vector-effect',\n    vertAdvY: 'vert-adv-y',\n    vertOriginX: 'vert-origin-x',\n    vertOriginY: 'vert-origin-y',\n    wordSpacing: 'word-spacing',\n    writingMode: 'writing-mode',\n    xHeight: 'x-height',\n    // These were camelcased in Tiny. Now lowercased in SVG 2\n    playbackOrder: 'playbackorder',\n    timelineBegin: 'timelinebegin'\n  },\n  transform: caseSensitiveTransform,\n  properties: {\n    about: commaOrSpaceSeparated,\n    accentHeight: number,\n    accumulate: null,\n    additive: null,\n    alignmentBaseline: null,\n    alphabetic: number,\n    amplitude: number,\n    arabicForm: null,\n    ascent: number,\n    attributeName: null,\n    attributeType: null,\n    azimuth: number,\n    bandwidth: null,\n    baselineShift: null,\n    baseFrequency: null,\n    baseProfile: null,\n    bbox: null,\n    begin: null,\n    bias: number,\n    by: null,\n    calcMode: null,\n    capHeight: number,\n    className: spaceSeparated,\n    clip: null,\n    clipPath: null,\n    clipPathUnits: null,\n    clipRule: null,\n    color: null,\n    colorInterpolation: null,\n    colorInterpolationFilters: null,\n    colorProfile: null,\n    colorRendering: null,\n    content: null,\n    contentScriptType: null,\n    contentStyleType: null,\n    crossOrigin: null,\n    cursor: null,\n    cx: null,\n    cy: null,\n    d: null,\n    dataType: null,\n    defaultAction: null,\n    descent: number,\n    diffuseConstant: number,\n    direction: null,\n    display: null,\n    dur: null,\n    divisor: number,\n    dominantBaseline: null,\n    download: boolean,\n    dx: null,\n    dy: null,\n    edgeMode: null,\n    editable: null,\n    elevation: number,\n    enableBackground: null,\n    end: null,\n    event: null,\n    exponent: number,\n    externalResourcesRequired: null,\n    fill: null,\n    fillOpacity: number,\n    fillRule: null,\n    filter: null,\n    filterRes: null,\n    filterUnits: null,\n    floodColor: null,\n    floodOpacity: null,\n    focusable: null,\n    focusHighlight: null,\n    fontFamily: null,\n    fontSize: null,\n    fontSizeAdjust: null,\n    fontStretch: null,\n    fontStyle: null,\n    fontVariant: null,\n    fontWeight: null,\n    format: null,\n    fr: null,\n    from: null,\n    fx: null,\n    fy: null,\n    g1: commaSeparated,\n    g2: commaSeparated,\n    glyphName: commaSeparated,\n    glyphOrientationHorizontal: null,\n    glyphOrientationVertical: null,\n    glyphRef: null,\n    gradientTransform: null,\n    gradientUnits: null,\n    handler: null,\n    hanging: number,\n    hatchContentUnits: null,\n    hatchUnits: null,\n    height: null,\n    href: null,\n    hrefLang: null,\n    horizAdvX: number,\n    horizOriginX: number,\n    horizOriginY: number,\n    id: null,\n    ideographic: number,\n    imageRendering: null,\n    initialVisibility: null,\n    in: null,\n    in2: null,\n    intercept: number,\n    k: number,\n    k1: number,\n    k2: number,\n    k3: number,\n    k4: number,\n    kernelMatrix: commaOrSpaceSeparated,\n    kernelUnitLength: null,\n    keyPoints: null, // SEMI_COLON_SEPARATED\n    keySplines: null, // SEMI_COLON_SEPARATED\n    keyTimes: null, // SEMI_COLON_SEPARATED\n    kerning: null,\n    lang: null,\n    lengthAdjust: null,\n    letterSpacing: null,\n    lightingColor: null,\n    limitingConeAngle: number,\n    local: null,\n    markerEnd: null,\n    markerMid: null,\n    markerStart: null,\n    markerHeight: null,\n    markerUnits: null,\n    markerWidth: null,\n    mask: null,\n    maskContentUnits: null,\n    maskUnits: null,\n    mathematical: null,\n    max: null,\n    media: null,\n    mediaCharacterEncoding: null,\n    mediaContentEncodings: null,\n    mediaSize: number,\n    mediaTime: null,\n    method: null,\n    min: null,\n    mode: null,\n    name: null,\n    navDown: null,\n    navDownLeft: null,\n    navDownRight: null,\n    navLeft: null,\n    navNext: null,\n    navPrev: null,\n    navRight: null,\n    navUp: null,\n    navUpLeft: null,\n    navUpRight: null,\n    numOctaves: null,\n    observer: null,\n    offset: null,\n    onAbort: null,\n    onActivate: null,\n    onAfterPrint: null,\n    onBeforePrint: null,\n    onBegin: null,\n    onCancel: null,\n    onCanPlay: null,\n    onCanPlayThrough: null,\n    onChange: null,\n    onClick: null,\n    onClose: null,\n    onCopy: null,\n    onCueChange: null,\n    onCut: null,\n    onDblClick: null,\n    onDrag: null,\n    onDragEnd: null,\n    onDragEnter: null,\n    onDragExit: null,\n    onDragLeave: null,\n    onDragOver: null,\n    onDragStart: null,\n    onDrop: null,\n    onDurationChange: null,\n    onEmptied: null,\n    onEnd: null,\n    onEnded: null,\n    onError: null,\n    onFocus: null,\n    onFocusIn: null,\n    onFocusOut: null,\n    onHashChange: null,\n    onInput: null,\n    onInvalid: null,\n    onKeyDown: null,\n    onKeyPress: null,\n    onKeyUp: null,\n    onLoad: null,\n    onLoadedData: null,\n    onLoadedMetadata: null,\n    onLoadStart: null,\n    onMessage: null,\n    onMouseDown: null,\n    onMouseEnter: null,\n    onMouseLeave: null,\n    onMouseMove: null,\n    onMouseOut: null,\n    onMouseOver: null,\n    onMouseUp: null,\n    onMouseWheel: null,\n    onOffline: null,\n    onOnline: null,\n    onPageHide: null,\n    onPageShow: null,\n    onPaste: null,\n    onPause: null,\n    onPlay: null,\n    onPlaying: null,\n    onPopState: null,\n    onProgress: null,\n    onRateChange: null,\n    onRepeat: null,\n    onReset: null,\n    onResize: null,\n    onScroll: null,\n    onSeeked: null,\n    onSeeking: null,\n    onSelect: null,\n    onShow: null,\n    onStalled: null,\n    onStorage: null,\n    onSubmit: null,\n    onSuspend: null,\n    onTimeUpdate: null,\n    onToggle: null,\n    onUnload: null,\n    onVolumeChange: null,\n    onWaiting: null,\n    onZoom: null,\n    opacity: null,\n    operator: null,\n    order: null,\n    orient: null,\n    orientation: null,\n    origin: null,\n    overflow: null,\n    overlay: null,\n    overlinePosition: number,\n    overlineThickness: number,\n    paintOrder: null,\n    panose1: null,\n    path: null,\n    pathLength: number,\n    patternContentUnits: null,\n    patternTransform: null,\n    patternUnits: null,\n    phase: null,\n    ping: spaceSeparated,\n    pitch: null,\n    playbackOrder: null,\n    pointerEvents: null,\n    points: null,\n    pointsAtX: number,\n    pointsAtY: number,\n    pointsAtZ: number,\n    preserveAlpha: null,\n    preserveAspectRatio: null,\n    primitiveUnits: null,\n    propagate: null,\n    property: commaOrSpaceSeparated,\n    r: null,\n    radius: null,\n    referrerPolicy: null,\n    refX: null,\n    refY: null,\n    rel: commaOrSpaceSeparated,\n    rev: commaOrSpaceSeparated,\n    renderingIntent: null,\n    repeatCount: null,\n    repeatDur: null,\n    requiredExtensions: commaOrSpaceSeparated,\n    requiredFeatures: commaOrSpaceSeparated,\n    requiredFonts: commaOrSpaceSeparated,\n    requiredFormats: commaOrSpaceSeparated,\n    resource: null,\n    restart: null,\n    result: null,\n    rotate: null,\n    rx: null,\n    ry: null,\n    scale: null,\n    seed: null,\n    shapeRendering: null,\n    side: null,\n    slope: null,\n    snapshotTime: null,\n    specularConstant: number,\n    specularExponent: number,\n    spreadMethod: null,\n    spacing: null,\n    startOffset: null,\n    stdDeviation: null,\n    stemh: null,\n    stemv: null,\n    stitchTiles: null,\n    stopColor: null,\n    stopOpacity: null,\n    strikethroughPosition: number,\n    strikethroughThickness: number,\n    string: null,\n    stroke: null,\n    strokeDashArray: commaOrSpaceSeparated,\n    strokeDashOffset: null,\n    strokeLineCap: null,\n    strokeLineJoin: null,\n    strokeMiterLimit: number,\n    strokeOpacity: number,\n    strokeWidth: null,\n    style: null,\n    surfaceScale: number,\n    syncBehavior: null,\n    syncBehaviorDefault: null,\n    syncMaster: null,\n    syncTolerance: null,\n    syncToleranceDefault: null,\n    systemLanguage: commaOrSpaceSeparated,\n    tabIndex: number,\n    tableValues: null,\n    target: null,\n    targetX: number,\n    targetY: number,\n    textAnchor: null,\n    textDecoration: null,\n    textRendering: null,\n    textLength: null,\n    timelineBegin: null,\n    title: null,\n    transformBehavior: null,\n    type: null,\n    typeOf: commaOrSpaceSeparated,\n    to: null,\n    transform: null,\n    transformOrigin: null,\n    u1: null,\n    u2: null,\n    underlinePosition: number,\n    underlineThickness: number,\n    unicode: null,\n    unicodeBidi: null,\n    unicodeRange: null,\n    unitsPerEm: number,\n    values: null,\n    vAlphabetic: number,\n    vMathematical: number,\n    vectorEffect: null,\n    vHanging: number,\n    vIdeographic: number,\n    version: null,\n    vertAdvY: number,\n    vertOriginX: number,\n    vertOriginY: number,\n    viewBox: null,\n    viewTarget: null,\n    visibility: null,\n    width: null,\n    widths: null,\n    wordSpacing: null,\n    writingMode: null,\n    x: null,\n    x1: null,\n    x2: null,\n    xChannelSelector: null,\n    xHeight: number,\n    y: null,\n    y1: null,\n    y2: null,\n    yChannelSelector: null,\n    z: null,\n    zoomAndPan: null\n  }\n})\n","/**\n * @typedef {import('./lib/util/info.js').Info} Info\n * @typedef {import('./lib/util/schema.js').Schema} Schema\n */\n\nimport {merge} from './lib/util/merge.js'\nimport {xlink} from './lib/xlink.js'\nimport {xml} from './lib/xml.js'\nimport {xmlns} from './lib/xmlns.js'\nimport {aria} from './lib/aria.js'\nimport {html as htmlBase} from './lib/html.js'\nimport {svg as svgBase} from './lib/svg.js'\n\nexport {find} from './lib/find.js'\nexport {hastToReact} from './lib/hast-to-react.js'\nexport {normalize} from './lib/normalize.js'\nexport const html = merge([xml, xlink, xmlns, aria, htmlBase], 'html')\nexport const svg = merge([xml, xlink, xmlns, aria, svgBase], 'svg')\n","/**\n * @typedef {import('./util/schema.js').Schema} Schema\n */\n\nimport {normalize} from './normalize.js'\nimport {DefinedInfo} from './util/defined-info.js'\nimport {Info} from './util/info.js'\n\nconst valid = /^data[-\\w.:]+$/i\nconst dash = /-[a-z]/g\nconst cap = /[A-Z]/g\n\n/**\n * @param {Schema} schema\n * @param {string} value\n * @returns {Info}\n */\nexport function find(schema, value) {\n  const normal = normalize(value)\n  let prop = value\n  let Type = Info\n\n  if (normal in schema.normal) {\n    return schema.property[schema.normal[normal]]\n  }\n\n  if (normal.length > 4 && normal.slice(0, 4) === 'data' && valid.test(value)) {\n    // Attribute or property.\n    if (value.charAt(4) === '-') {\n      // Turn it into a property.\n      const rest = value.slice(5).replace(dash, camelcase)\n      prop = 'data' + rest.charAt(0).toUpperCase() + rest.slice(1)\n    } else {\n      // Turn it into an attribute.\n      const rest = value.slice(4)\n\n      if (!dash.test(rest)) {\n        let dashes = rest.replace(cap, kebab)\n\n        if (dashes.charAt(0) !== '-') {\n          dashes = '-' + dashes\n        }\n\n        value = 'data' + dashes\n      }\n    }\n\n    Type = DefinedInfo\n  }\n\n  return new Type(prop, value)\n}\n\n/**\n * @param {string} $0\n * @returns {string}\n */\nfunction kebab($0) {\n  return '-' + $0.toLowerCase()\n}\n\n/**\n * @param {string} $0\n * @returns {string}\n */\nfunction camelcase($0) {\n  return $0.charAt(1).toUpperCase()\n}\n","/**\n * `hast` is close to `React`, but differs in a couple of cases.\n *\n * To get a React property from a hast property, check if it is in\n * `hastToReact`, if it is, then use the corresponding value,\n * otherwise, use the hast property.\n *\n * @type {Record<string, string>}\n */\nexport const hastToReact = {\n  classId: 'classID',\n  dataType: 'datatype',\n  itemId: 'itemID',\n  strokeDashArray: 'strokeDasharray',\n  strokeDashOffset: 'strokeDashoffset',\n  strokeLineCap: 'strokeLinecap',\n  strokeLineJoin: 'strokeLinejoin',\n  strokeMiterLimit: 'strokeMiterlimit',\n  typeOf: 'typeof',\n  xLinkActuate: 'xlinkActuate',\n  xLinkArcRole: 'xlinkArcrole',\n  xLinkHref: 'xlinkHref',\n  xLinkRole: 'xlinkRole',\n  xLinkShow: 'xlinkShow',\n  xLinkTitle: 'xlinkTitle',\n  xLinkType: 'xlinkType',\n  xmlnsXLink: 'xmlnsXlink'\n}\n","import StyleToObject from '../cjs/index.js';\n\n// ensure compatibility with rollup umd build\nexport default StyleToObject.default || StyleToObject;\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Point} Point\n * @typedef {import('unist').Position} Position\n */\n\n/**\n * @typedef NodeLike\n * @property {string} type\n * @property {PositionLike | null | undefined} [position]\n *\n * @typedef PositionLike\n * @property {PointLike | null | undefined} [start]\n * @property {PointLike | null | undefined} [end]\n *\n * @typedef PointLike\n * @property {number | null | undefined} [line]\n * @property {number | null | undefined} [column]\n * @property {number | null | undefined} [offset]\n */\n\n/**\n * Get the ending point of `node`.\n *\n * @param node\n *   Node.\n * @returns\n *   Point.\n */\nexport const pointEnd = point('end')\n\n/**\n * Get the starting point of `node`.\n *\n * @param node\n *   Node.\n * @returns\n *   Point.\n */\nexport const pointStart = point('start')\n\n/**\n * Get the positional info of `node`.\n *\n * @param {'end' | 'start'} type\n *   Side.\n * @returns\n *   Getter.\n */\nfunction point(type) {\n  return point\n\n  /**\n   * Get the point info of `node` at a bound side.\n   *\n   * @param {Node | NodeLike | null | undefined} [node]\n   * @returns {Point | undefined}\n   */\n  function point(node) {\n    const point = (node && node.position && node.position[type]) || {}\n\n    if (\n      typeof point.line === 'number' &&\n      point.line > 0 &&\n      typeof point.column === 'number' &&\n      point.column > 0\n    ) {\n      return {\n        line: point.line,\n        column: point.column,\n        offset:\n          typeof point.offset === 'number' && point.offset > -1\n            ? point.offset\n            : undefined\n      }\n    }\n  }\n}\n\n/**\n * Get the positional info of `node`.\n *\n * @param {Node | NodeLike | null | undefined} [node]\n *   Node.\n * @returns {Position | undefined}\n *   Position.\n */\nexport function position(node) {\n  const start = pointStart(node)\n  const end = pointEnd(node)\n\n  if (start && end) {\n    return {start, end}\n  }\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Point} Point\n * @typedef {import('unist').Position} Position\n */\n\n/**\n * @typedef NodeLike\n * @property {string} type\n * @property {PositionLike | null | undefined} [position]\n *\n * @typedef PointLike\n * @property {number | null | undefined} [line]\n * @property {number | null | undefined} [column]\n * @property {number | null | undefined} [offset]\n *\n * @typedef PositionLike\n * @property {PointLike | null | undefined} [start]\n * @property {PointLike | null | undefined} [end]\n */\n\n/**\n * Serialize the positional info of a point, position (start and end points),\n * or node.\n *\n * @param {Node | NodeLike | Point | PointLike | Position | PositionLike | null | undefined} [value]\n *   Node, position, or point.\n * @returns {string}\n *   Pretty printed positional info of a node (`string`).\n *\n *   In the format of a range `ls:cs-le:ce` (when given `node` or `position`)\n *   or a point `l:c` (when given `point`), where `l` stands for line, `c` for\n *   column, `s` for `start`, and `e` for end.\n *   An empty string (`''`) is returned if the given value is neither `node`,\n *   `position`, nor `point`.\n */\nexport function stringifyPosition(value) {\n  // Nothing.\n  if (!value || typeof value !== 'object') {\n    return ''\n  }\n\n  // Node.\n  if ('position' in value || 'type' in value) {\n    return position(value.position)\n  }\n\n  // Position.\n  if ('start' in value || 'end' in value) {\n    return position(value)\n  }\n\n  // Point.\n  if ('line' in value || 'column' in value) {\n    return point(value)\n  }\n\n  // ?\n  return ''\n}\n\n/**\n * @param {Point | PointLike | null | undefined} point\n * @returns {string}\n */\nfunction point(point) {\n  return index(point && point.line) + ':' + index(point && point.column)\n}\n\n/**\n * @param {Position | PositionLike | null | undefined} pos\n * @returns {string}\n */\nfunction position(pos) {\n  return point(pos && pos.start) + '-' + point(pos && pos.end)\n}\n\n/**\n * @param {number | null | undefined} value\n * @returns {number}\n */\nfunction index(value) {\n  return value && typeof value === 'number' ? value : 1\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Point} Point\n * @typedef {import('unist').Position} Position\n */\n\n/**\n * @typedef {object & {type: string, position?: Position | undefined}} NodeLike\n *\n * @typedef Options\n *   Configuration.\n * @property {Array<Node> | null | undefined} [ancestors]\n *   Stack of (inclusive) ancestor nodes surrounding the message (optional).\n * @property {Error | null | undefined} [cause]\n *   Original error cause of the message (optional).\n * @property {Point | Position | null | undefined} [place]\n *   Place of message (optional).\n * @property {string | null | undefined} [ruleId]\n *   Category of message (optional, example: `'my-rule'`).\n * @property {string | null | undefined} [source]\n *   Namespace of who sent the message (optional, example: `'my-package'`).\n */\n\nimport {stringifyPosition} from 'unist-util-stringify-position'\n\n/**\n * Message.\n */\nexport class VFileMessage extends Error {\n  /**\n   * Create a message for `reason`.\n   *\n   * > 🪦 **Note**: also has obsolete signatures.\n   *\n   * @overload\n   * @param {string} reason\n   * @param {Options | null | undefined} [options]\n   * @returns\n   *\n   * @overload\n   * @param {string} reason\n   * @param {Node | NodeLike | null | undefined} parent\n   * @param {string | null | undefined} [origin]\n   * @returns\n   *\n   * @overload\n   * @param {string} reason\n   * @param {Point | Position | null | undefined} place\n   * @param {string | null | undefined} [origin]\n   * @returns\n   *\n   * @overload\n   * @param {string} reason\n   * @param {string | null | undefined} [origin]\n   * @returns\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {Node | NodeLike | null | undefined} parent\n   * @param {string | null | undefined} [origin]\n   * @returns\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {Point | Position | null | undefined} place\n   * @param {string | null | undefined} [origin]\n   * @returns\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {string | null | undefined} [origin]\n   * @returns\n   *\n   * @param {Error | VFileMessage | string} causeOrReason\n   *   Reason for message, should use markdown.\n   * @param {Node | NodeLike | Options | Point | Position | string | null | undefined} [optionsOrParentOrPlace]\n   *   Configuration (optional).\n   * @param {string | null | undefined} [origin]\n   *   Place in code where the message originates (example:\n   *   `'my-package:my-rule'` or `'my-rule'`).\n   * @returns\n   *   Instance of `VFileMessage`.\n   */\n  // eslint-disable-next-line complexity\n  constructor(causeOrReason, optionsOrParentOrPlace, origin) {\n    super()\n\n    if (typeof optionsOrParentOrPlace === 'string') {\n      origin = optionsOrParentOrPlace\n      optionsOrParentOrPlace = undefined\n    }\n\n    /** @type {string} */\n    let reason = ''\n    /** @type {Options} */\n    let options = {}\n    let legacyCause = false\n\n    if (optionsOrParentOrPlace) {\n      // Point.\n      if (\n        'line' in optionsOrParentOrPlace &&\n        'column' in optionsOrParentOrPlace\n      ) {\n        options = {place: optionsOrParentOrPlace}\n      }\n      // Position.\n      else if (\n        'start' in optionsOrParentOrPlace &&\n        'end' in optionsOrParentOrPlace\n      ) {\n        options = {place: optionsOrParentOrPlace}\n      }\n      // Node.\n      else if ('type' in optionsOrParentOrPlace) {\n        options = {\n          ancestors: [optionsOrParentOrPlace],\n          place: optionsOrParentOrPlace.position\n        }\n      }\n      // Options.\n      else {\n        options = {...optionsOrParentOrPlace}\n      }\n    }\n\n    if (typeof causeOrReason === 'string') {\n      reason = causeOrReason\n    }\n    // Error.\n    else if (!options.cause && causeOrReason) {\n      legacyCause = true\n      reason = causeOrReason.message\n      options.cause = causeOrReason\n    }\n\n    if (!options.ruleId && !options.source && typeof origin === 'string') {\n      const index = origin.indexOf(':')\n\n      if (index === -1) {\n        options.ruleId = origin\n      } else {\n        options.source = origin.slice(0, index)\n        options.ruleId = origin.slice(index + 1)\n      }\n    }\n\n    if (!options.place && options.ancestors && options.ancestors) {\n      const parent = options.ancestors[options.ancestors.length - 1]\n\n      if (parent) {\n        options.place = parent.position\n      }\n    }\n\n    const start =\n      options.place && 'start' in options.place\n        ? options.place.start\n        : options.place\n\n    /* eslint-disable no-unused-expressions */\n    /**\n     * Stack of ancestor nodes surrounding the message.\n     *\n     * @type {Array<Node> | undefined}\n     */\n    this.ancestors = options.ancestors || undefined\n\n    /**\n     * Original error cause of the message.\n     *\n     * @type {Error | undefined}\n     */\n    this.cause = options.cause || undefined\n\n    /**\n     * Starting column of message.\n     *\n     * @type {number | undefined}\n     */\n    this.column = start ? start.column : undefined\n\n    /**\n     * State of problem.\n     *\n     * * `true` — error, file not usable\n     * * `false` — warning, change may be needed\n     * * `undefined` — change likely not needed\n     *\n     * @type {boolean | null | undefined}\n     */\n    this.fatal = undefined\n\n    /**\n     * Path of a file (used throughout the `VFile` ecosystem).\n     *\n     * @type {string | undefined}\n     */\n    this.file\n\n    // Field from `Error`.\n    /**\n     * Reason for message.\n     *\n     * @type {string}\n     */\n    this.message = reason\n\n    /**\n     * Starting line of error.\n     *\n     * @type {number | undefined}\n     */\n    this.line = start ? start.line : undefined\n\n    // Field from `Error`.\n    /**\n     * Serialized positional info of message.\n     *\n     * On normal errors, this would be something like `ParseError`, buit in\n     * `VFile` messages we use this space to show where an error happened.\n     */\n    this.name = stringifyPosition(options.place) || '1:1'\n\n    /**\n     * Place of message.\n     *\n     * @type {Point | Position | undefined}\n     */\n    this.place = options.place || undefined\n\n    /**\n     * Reason for message, should use markdown.\n     *\n     * @type {string}\n     */\n    this.reason = this.message\n\n    /**\n     * Category of message (example: `'my-rule'`).\n     *\n     * @type {string | undefined}\n     */\n    this.ruleId = options.ruleId || undefined\n\n    /**\n     * Namespace of message (example: `'my-package'`).\n     *\n     * @type {string | undefined}\n     */\n    this.source = options.source || undefined\n\n    // Field from `Error`.\n    /**\n     * Stack of message.\n     *\n     * This is used by normal errors to show where something happened in\n     * programming code, irrelevant for `VFile` messages,\n     *\n     * @type {string}\n     */\n    this.stack =\n      legacyCause && options.cause && typeof options.cause.stack === 'string'\n        ? options.cause.stack\n        : ''\n\n    // The following fields are “well known”.\n    // Not standard.\n    // Feel free to add other non-standard fields to your messages.\n\n    /**\n     * Specify the source value that’s being reported, which is deemed\n     * incorrect.\n     *\n     * @type {string | undefined}\n     */\n    this.actual\n\n    /**\n     * Suggest acceptable values that can be used instead of `actual`.\n     *\n     * @type {Array<string> | undefined}\n     */\n    this.expected\n\n    /**\n     * Long form description of the message (you should use markdown).\n     *\n     * @type {string | undefined}\n     */\n    this.note\n\n    /**\n     * Link to docs for the message.\n     *\n     * > 👉 **Note**: this must be an absolute URL that can be passed as `x`\n     * > to `new URL(x)`.\n     *\n     * @type {string | undefined}\n     */\n    this.url\n    /* eslint-enable no-unused-expressions */\n  }\n}\n\nVFileMessage.prototype.file = ''\nVFileMessage.prototype.name = ''\nVFileMessage.prototype.reason = ''\nVFileMessage.prototype.message = ''\nVFileMessage.prototype.stack = ''\nVFileMessage.prototype.column = undefined\nVFileMessage.prototype.line = undefined\nVFileMessage.prototype.ancestors = undefined\nVFileMessage.prototype.cause = undefined\nVFileMessage.prototype.fatal = undefined\nVFileMessage.prototype.place = undefined\nVFileMessage.prototype.ruleId = undefined\nVFileMessage.prototype.source = undefined\n","// Register MDX nodes in mdast:\n/// <reference types=\"mdast-util-mdx-expression\" />\n/// <reference types=\"mdast-util-mdx-jsx\" />\n/// <reference types=\"mdast-util-mdxjs-esm\" />\n\n/**\n * @typedef {import('estree').Identifier} Identifier\n * @typedef {import('estree').Literal} Literal\n * @typedef {import('estree').MemberExpression} MemberExpression\n * @typedef {import('estree').Expression} Expression\n * @typedef {import('estree').Program} Program\n *\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Nodes} Nodes\n * @typedef {import('hast').Parents} Parents\n * @typedef {import('hast').Root} Root\n * @typedef {import('hast').Text} Text\n *\n * @typedef {import('mdast-util-mdx-expression').MdxFlowExpressionHast} MdxFlowExpression\n * @typedef {import('mdast-util-mdx-expression').MdxTextExpressionHast} MdxTextExpression\n *\n * @typedef {import('mdast-util-mdx-jsx').MdxJsxFlowElementHast} MdxJsxFlowElement\n * @typedef {import('mdast-util-mdx-jsx').MdxJsxTextElementHast} MdxJsxTextElement\n *\n * @typedef {import('mdast-util-mdxjs-esm').MdxjsEsmHast} MdxjsEsm\n *\n * @typedef {import('property-information').Schema} Schema\n *\n * @typedef {import('unist').Position} Position\n *\n * @typedef {import('./components.js').Components} Components\n */\n\n/**\n * @typedef {JSX.Element | string | null | undefined} Child\n *   Child.\n *\n * @callback Create\n *   Create something in development or production.\n * @param {Nodes} node\n *   hast node.\n * @param {unknown} type\n *   Fragment symbol or tag name.\n * @param {Props} props\n *   Properties and children.\n * @param {string | undefined} key\n *   Key.\n * @returns {JSX.Element}\n *   Result.\n *\n * @callback CreateEvaluater\n *   Create an evaluator that turns ESTree ASTs from embedded MDX into values.\n * @returns {Evaluater}\n *   Evaluater.\n *\n * @typedef {'html' | 'react'} ElementAttributeNameCase\n *   Casing to use for attribute names.\n *\n *   HTML casing is for example `class`, `stroke-linecap`, `xml:lang`.\n *   React casing is for example `className`, `strokeLinecap`, `xmlLang`.\n *\n * @callback EvaluateExpression\n *   Turn an MDX expression into a value.\n * @param {Expression} expression\n *   ESTree expression.\n * @returns {unknown}\n *   Result of expression.\n *\n * @callback EvaluateProgram\n *   Turn an MDX program (export/import statements) into a value.\n * @param {Program} expression\n *   ESTree program.\n * @returns {unknown}\n *   Result of program;\n *   should likely be `undefined` as ESM changes the scope but doesn’t yield\n *   something.\n *\n * @typedef Evaluater\n *   Evaluator that turns ESTree ASTs from embedded MDX into values.\n * @property {EvaluateExpression} evaluateExpression\n *   Evaluate an expression.\n * @property {EvaluateProgram} evaluateProgram\n *   Evaluate a program.\n *\n * @typedef {[string, Value]} Field\n *   Property field.\n *\n * @typedef {unknown} Fragment\n *   Represent the children, typically a symbol.\n *\n * @callback Jsx\n *   Create a production element.\n * @param {unknown} type\n *   Element type: `Fragment` symbol, tag name (`string`), component.\n * @param {Props} props\n *   Element props, `children`, and maybe `node`.\n * @param {string | undefined} [key]\n *   Dynamicly generated key to use.\n * @returns {JSX.Element}\n *   Element from your framework.\n *\n * @callback JsxDev\n *   Create a development element.\n * @param {unknown} type\n *   Element type: `Fragment` symbol, tag name (`string`), component.\n * @param {Props} props\n *   Element props, `children`, and maybe `node`.\n * @param {string | undefined} key\n *   Dynamicly generated key to use.\n * @param {boolean} isStaticChildren\n *   Whether two or more children are passed (in an array), which is whether\n *   `jsxs` or `jsx` would be used.\n * @param {Source} source\n *   Info about source.\n * @param {undefined} self\n *   Nothing (this is used by frameworks that have components, we don’t).\n * @returns {JSX.Element}\n *   Element from your framework.\n *\n * @typedef {{children?: Array<Child> | Child, node?: Element | MdxJsxFlowElement | MdxJsxTextElement | undefined, [prop: string]: Array<Child> | Child | Element | MdxJsxFlowElement | MdxJsxTextElement | Value | undefined}} Props\n *   Properties and children.\n *\n * @typedef RegularFields\n *   Configuration.\n * @property {Partial<Components> | null | undefined} [components]\n *   Components to use (optional).\n * @property {CreateEvaluater | null | undefined} [createEvaluater]\n *   Create an evaluator that turns ESTree ASTs into values (optional).\n * @property {ElementAttributeNameCase | null | undefined} [elementAttributeNameCase='react']\n *   Specify casing to use for attribute names (default: `'react'`).\n * @property {string | null | undefined} [filePath]\n *   File path to the original source file (optional).\n *\n *   Passed in source info to `jsxDEV` when using the automatic runtime with\n *   `development: true`.\n * @property {boolean | null | undefined} [ignoreInvalidStyle=false]\n *   Ignore invalid CSS in `style` props (default: `false`);\n *   the default behavior is to throw an error.\n * @property {boolean | null | undefined} [passKeys=true]\n *   Generate keys to optimize frameworks that support them (default: `true`).\n *\n *   > 👉 **Note**: Solid currently fails if keys are passed.\n * @property {boolean | null | undefined} [passNode=false]\n *   Pass the hast element node to components (default: `false`).\n * @property {Space | null | undefined} [space='html']\n *   Whether `tree` is in the `'html'` or `'svg'` space (default: `'html'`).\n *\n *   When an `<svg>` element is found in the HTML space, this package already\n *   automatically switches to and from the SVG space when entering and exiting\n *   it.\n * @property {StylePropertyNameCase | null | undefined} [stylePropertyNameCase='dom']\n *   Specify casing to use for property names in `style` objects (default:\n *   `'dom'`).\n * @property {boolean | null | undefined} [tableCellAlignToStyle=true]\n *   Turn obsolete `align` props on `td` and `th` into CSS `style` props\n *   (default: `true`).\n *\n * @typedef RuntimeDevelopment\n *   Runtime fields when development is on.\n * @property {Fragment} Fragment\n *   Fragment.\n * @property {true} development\n *   Whether to use `jsxDEV` (when on) or `jsx` and `jsxs` (when off).\n * @property {Jsx | null | undefined} [jsx]\n *   Dynamic JSX (optional).\n * @property {JsxDev} jsxDEV\n *   Development JSX.\n * @property {Jsx | null | undefined} [jsxs]\n *   Static JSX (optional).\n *\n * @typedef RuntimeProduction\n *   Runtime fields when development is off.\n * @property {Fragment} Fragment\n *   Fragment.\n * @property {false | null | undefined} [development]\n *   Whether to use `jsxDEV` (when on) or `jsx` and `jsxs` (when off) (optional).\n * @property {Jsx} jsx\n *   Dynamic JSX.\n * @property {JsxDev | null | undefined} [jsxDEV]\n *   Development JSX (optional).\n * @property {Jsx} jsxs\n *   Static JSX.\n *\n * @typedef RuntimeUnknown\n *   Runtime fields when development might be on or off.\n * @property {Fragment} Fragment\n *   Fragment.\n * @property {boolean} development\n *   Whether to use `jsxDEV` (when on) or `jsx` and `jsxs` (when off).\n * @property {Jsx | null | undefined} [jsx]\n *   Dynamic JSX (optional).\n * @property {JsxDev | null | undefined} [jsxDEV]\n *   Development JSX (optional).\n * @property {Jsx | null | undefined} [jsxs]\n *   Static JSX (optional).\n *\n * @typedef Source\n *   Info about source.\n * @property {number | undefined} columnNumber\n *   Column where thing starts (0-indexed).\n * @property {string | undefined} fileName\n *   Name of source file.\n * @property {number | undefined} lineNumber\n *   Line where thing starts (1-indexed).\n *\n * @typedef {'html' | 'svg'} Space\n *   Namespace.\n *\n *   > 👉 **Note**: hast is not XML.\n *   > It supports SVG as embedded in HTML.\n *   > It does not support the features available in XML.\n *   > Passing SVG might break but fragments of modern SVG should be fine.\n *   > Use `xast` if you need to support SVG as XML.\n *\n * @typedef State\n *   Info passed around.\n * @property {unknown} Fragment\n *   Fragment symbol.\n * @property {Array<Parents>} ancestors\n *   Stack of parents.\n * @property {Partial<Components>} components\n *   Components to swap.\n * @property {Create} create\n *   Create something in development or production.\n * @property {ElementAttributeNameCase} elementAttributeNameCase\n *   Casing to use for attribute names.\n * @property {Evaluater | undefined} evaluater\n *   Evaluator that turns ESTree ASTs into values.\n * @property {string | undefined} filePath\n *   File path.\n * @property {boolean} ignoreInvalidStyle\n *   Ignore invalid CSS in `style` props.\n * @property {boolean} passKeys\n *   Generate keys to optimize frameworks that support them.\n * @property {boolean} passNode\n *   Pass `node` to components.\n * @property {Schema} schema\n *   Current schema.\n * @property {StylePropertyNameCase} stylePropertyNameCase\n *   Casing to use for property names in `style` objects.\n * @property {boolean} tableCellAlignToStyle\n *   Turn obsolete `align` props on `td` and `th` into CSS `style` props.\n *\n * @typedef {Record<string, string>} Style\n *   Style map.\n *\n * @typedef {'css' | 'dom'} StylePropertyNameCase\n *   Casing to use for property names in `style` objects.\n *\n *   CSS casing is for example `background-color` and `-webkit-line-clamp`.\n *   DOM casing is for example `backgroundColor` and `WebkitLineClamp`.\n *\n * @typedef {Style | boolean | number | string} Value\n *   Primitive property value and `Style` map.\n */\n\n/**\n * @typedef {RuntimeDevelopment & RegularFields} Development\n *   Configuration (development).\n * @typedef {Development | Production | Unknown} Options\n *   Configuration.\n * @typedef {RegularFields & RuntimeProduction} Production\n *   Configuration (production).\n * @typedef {RegularFields & RuntimeUnknown} Unknown\n *   Configuration (production or development).\n */\n\nimport {stringify as commas} from 'comma-separated-tokens'\nimport {ok as assert} from 'devlop'\nimport {name as isIdentifierName} from 'estree-util-is-identifier-name'\nimport {whitespace} from 'hast-util-whitespace'\nimport {find, hastToReact, html, svg} from 'property-information'\nimport {stringify as spaces} from 'space-separated-tokens'\nimport styleToObject from 'style-to-object'\nimport {pointStart} from 'unist-util-position'\nimport {VFileMessage} from 'vfile-message'\n\nconst own = {}.hasOwnProperty\n\n/** @type {Map<string, number>} */\nconst emptyMap = new Map()\n\nconst cap = /[A-Z]/g\nconst dashSomething = /-([a-z])/g\n\n// `react-dom` triggers a warning for *any* white space in tables.\n// To follow GFM, `mdast-util-to-hast` injects line endings between elements.\n// Other tools might do so too, but they don’t do here, so we remove all of\n// that.\n\n// See: <https://github.com/facebook/react/pull/7081>.\n// See: <https://github.com/facebook/react/pull/7515>.\n// See: <https://github.com/remarkjs/remark-react/issues/64>.\n// See: <https://github.com/rehypejs/rehype-react/pull/29>.\n// See: <https://github.com/rehypejs/rehype-react/pull/32>.\n// See: <https://github.com/rehypejs/rehype-react/pull/45>.\nconst tableElements = new Set(['table', 'tbody', 'thead', 'tfoot', 'tr'])\n\nconst tableCellElement = new Set(['td', 'th'])\n\nconst docs = 'https://github.com/syntax-tree/hast-util-to-jsx-runtime'\n\n/**\n * Transform a hast tree to preact, react, solid, svelte, vue, etc.,\n * with an automatic JSX runtime.\n *\n * @param {Nodes} tree\n *   Tree to transform.\n * @param {Options} options\n *   Configuration (required).\n * @returns {JSX.Element}\n *   JSX element.\n */\n\nexport function toJsxRuntime(tree, options) {\n  if (!options || options.Fragment === undefined) {\n    throw new TypeError('Expected `Fragment` in options')\n  }\n\n  const filePath = options.filePath || undefined\n  /** @type {Create} */\n  let create\n\n  if (options.development) {\n    if (typeof options.jsxDEV !== 'function') {\n      throw new TypeError(\n        'Expected `jsxDEV` in options when `development: true`'\n      )\n    }\n\n    create = developmentCreate(filePath, options.jsxDEV)\n  } else {\n    if (typeof options.jsx !== 'function') {\n      throw new TypeError('Expected `jsx` in production options')\n    }\n\n    if (typeof options.jsxs !== 'function') {\n      throw new TypeError('Expected `jsxs` in production options')\n    }\n\n    create = productionCreate(filePath, options.jsx, options.jsxs)\n  }\n\n  /** @type {State} */\n  const state = {\n    Fragment: options.Fragment,\n    ancestors: [],\n    components: options.components || {},\n    create,\n    elementAttributeNameCase: options.elementAttributeNameCase || 'react',\n    evaluater: options.createEvaluater ? options.createEvaluater() : undefined,\n    filePath,\n    ignoreInvalidStyle: options.ignoreInvalidStyle || false,\n    passKeys: options.passKeys !== false,\n    passNode: options.passNode || false,\n    schema: options.space === 'svg' ? svg : html,\n    stylePropertyNameCase: options.stylePropertyNameCase || 'dom',\n    tableCellAlignToStyle: options.tableCellAlignToStyle !== false\n  }\n\n  const result = one(state, tree, undefined)\n\n  // JSX element.\n  if (result && typeof result !== 'string') {\n    return result\n  }\n\n  // Text node or something that turned into nothing.\n  return state.create(\n    tree,\n    state.Fragment,\n    {children: result || undefined},\n    undefined\n  )\n}\n\n/**\n * Transform a node.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Nodes} node\n *   Current node.\n * @param {string | undefined} key\n *   Key.\n * @returns {Child | undefined}\n *   Child, optional.\n */\nfunction one(state, node, key) {\n  if (node.type === 'element') {\n    return element(state, node, key)\n  }\n\n  if (node.type === 'mdxFlowExpression' || node.type === 'mdxTextExpression') {\n    return mdxExpression(state, node)\n  }\n\n  if (node.type === 'mdxJsxFlowElement' || node.type === 'mdxJsxTextElement') {\n    return mdxJsxElement(state, node, key)\n  }\n\n  if (node.type === 'mdxjsEsm') {\n    return mdxEsm(state, node)\n  }\n\n  if (node.type === 'root') {\n    return root(state, node, key)\n  }\n\n  if (node.type === 'text') {\n    return text(state, node)\n  }\n}\n\n/**\n * Handle element.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Element} node\n *   Current node.\n * @param {string | undefined} key\n *   Key.\n * @returns {Child | undefined}\n *   Child, optional.\n */\nfunction element(state, node, key) {\n  const parentSchema = state.schema\n  let schema = parentSchema\n\n  if (node.tagName.toLowerCase() === 'svg' && parentSchema.space === 'html') {\n    schema = svg\n    state.schema = schema\n  }\n\n  state.ancestors.push(node)\n\n  const type = findComponentFromName(state, node.tagName, false)\n  const props = createElementProps(state, node)\n  let children = createChildren(state, node)\n\n  if (tableElements.has(node.tagName)) {\n    children = children.filter(function (child) {\n      return typeof child === 'string' ? !whitespace(child) : true\n    })\n  }\n\n  addNode(state, props, type, node)\n  addChildren(props, children)\n\n  // Restore.\n  state.ancestors.pop()\n  state.schema = parentSchema\n\n  return state.create(node, type, props, key)\n}\n\n/**\n * Handle MDX expression.\n *\n * @param {State} state\n *   Info passed around.\n * @param {MdxFlowExpression | MdxTextExpression} node\n *   Current node.\n * @returns {Child | undefined}\n *   Child, optional.\n */\nfunction mdxExpression(state, node) {\n  if (node.data && node.data.estree && state.evaluater) {\n    const program = node.data.estree\n    const expression = program.body[0]\n    assert(expression.type === 'ExpressionStatement')\n\n    // Assume result is a child.\n    return /** @type {Child | undefined} */ (\n      state.evaluater.evaluateExpression(expression.expression)\n    )\n  }\n\n  crashEstree(state, node.position)\n}\n\n/**\n * Handle MDX ESM.\n *\n * @param {State} state\n *   Info passed around.\n * @param {MdxjsEsm} node\n *   Current node.\n * @returns {Child | undefined}\n *   Child, optional.\n */\nfunction mdxEsm(state, node) {\n  if (node.data && node.data.estree && state.evaluater) {\n    // Assume result is a child.\n    return /** @type {Child | undefined} */ (\n      state.evaluater.evaluateProgram(node.data.estree)\n    )\n  }\n\n  crashEstree(state, node.position)\n}\n\n/**\n * Handle MDX JSX.\n *\n * @param {State} state\n *   Info passed around.\n * @param {MdxJsxFlowElement | MdxJsxTextElement} node\n *   Current node.\n * @param {string | undefined} key\n *   Key.\n * @returns {Child | undefined}\n *   Child, optional.\n */\nfunction mdxJsxElement(state, node, key) {\n  const parentSchema = state.schema\n  let schema = parentSchema\n\n  if (node.name === 'svg' && parentSchema.space === 'html') {\n    schema = svg\n    state.schema = schema\n  }\n\n  state.ancestors.push(node)\n\n  const type =\n    node.name === null\n      ? state.Fragment\n      : findComponentFromName(state, node.name, true)\n  const props = createJsxElementProps(state, node)\n  const children = createChildren(state, node)\n\n  addNode(state, props, type, node)\n  addChildren(props, children)\n\n  // Restore.\n  state.ancestors.pop()\n  state.schema = parentSchema\n\n  return state.create(node, type, props, key)\n}\n\n/**\n * Handle root.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Root} node\n *   Current node.\n * @param {string | undefined} key\n *   Key.\n * @returns {Child | undefined}\n *   Child, optional.\n */\nfunction root(state, node, key) {\n  /** @type {Props} */\n  const props = {}\n\n  addChildren(props, createChildren(state, node))\n\n  return state.create(node, state.Fragment, props, key)\n}\n\n/**\n * Handle text.\n *\n * @param {State} _\n *   Info passed around.\n * @param {Text} node\n *   Current node.\n * @returns {Child | undefined}\n *   Child, optional.\n */\nfunction text(_, node) {\n  return node.value\n}\n\n/**\n * Add `node` to props.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Props} props\n *   Props.\n * @param {unknown} type\n *   Type.\n * @param {Element | MdxJsxFlowElement | MdxJsxTextElement} node\n *   Node.\n * @returns {undefined}\n *   Nothing.\n */\nfunction addNode(state, props, type, node) {\n  // If this is swapped out for a component:\n  if (typeof type !== 'string' && type !== state.Fragment && state.passNode) {\n    props.node = node\n  }\n}\n\n/**\n * Add children to props.\n *\n * @param {Props} props\n *   Props.\n * @param {Array<Child>} children\n *   Children.\n * @returns {undefined}\n *   Nothing.\n */\nfunction addChildren(props, children) {\n  if (children.length > 0) {\n    const value = children.length > 1 ? children : children[0]\n\n    if (value) {\n      props.children = value\n    }\n  }\n}\n\n/**\n * @param {string | undefined} _\n *   Path to file.\n * @param {Jsx} jsx\n *   Dynamic.\n * @param {Jsx} jsxs\n *   Static.\n * @returns {Create}\n *   Create a production element.\n */\nfunction productionCreate(_, jsx, jsxs) {\n  return create\n  /** @type {Create} */\n  function create(_, type, props, key) {\n    // Only an array when there are 2 or more children.\n    const isStaticChildren = Array.isArray(props.children)\n    const fn = isStaticChildren ? jsxs : jsx\n    return key ? fn(type, props, key) : fn(type, props)\n  }\n}\n\n/**\n * @param {string | undefined} filePath\n *   Path to file.\n * @param {JsxDev} jsxDEV\n *   Development.\n * @returns {Create}\n *   Create a development element.\n */\nfunction developmentCreate(filePath, jsxDEV) {\n  return create\n  /** @type {Create} */\n  function create(node, type, props, key) {\n    // Only an array when there are 2 or more children.\n    const isStaticChildren = Array.isArray(props.children)\n    const point = pointStart(node)\n    return jsxDEV(\n      type,\n      props,\n      key,\n      isStaticChildren,\n      {\n        columnNumber: point ? point.column - 1 : undefined,\n        fileName: filePath,\n        lineNumber: point ? point.line : undefined\n      },\n      undefined\n    )\n  }\n}\n\n/**\n * Create props from an element.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Element} node\n *   Current element.\n * @returns {Props}\n *   Props.\n */\nfunction createElementProps(state, node) {\n  /** @type {Props} */\n  const props = {}\n  /** @type {string | undefined} */\n  let alignValue\n  /** @type {string} */\n  let prop\n\n  for (prop in node.properties) {\n    if (prop !== 'children' && own.call(node.properties, prop)) {\n      const result = createProperty(state, prop, node.properties[prop])\n\n      if (result) {\n        const [key, value] = result\n\n        if (\n          state.tableCellAlignToStyle &&\n          key === 'align' &&\n          typeof value === 'string' &&\n          tableCellElement.has(node.tagName)\n        ) {\n          alignValue = value\n        } else {\n          props[key] = value\n        }\n      }\n    }\n  }\n\n  if (alignValue) {\n    // Assume style is an object.\n    const style = /** @type {Style} */ (props.style || (props.style = {}))\n    style[state.stylePropertyNameCase === 'css' ? 'text-align' : 'textAlign'] =\n      alignValue\n  }\n\n  return props\n}\n\n/**\n * Create props from a JSX element.\n *\n * @param {State} state\n *   Info passed around.\n * @param {MdxJsxFlowElement | MdxJsxTextElement} node\n *   Current JSX element.\n * @returns {Props}\n *   Props.\n */\nfunction createJsxElementProps(state, node) {\n  /** @type {Props} */\n  const props = {}\n\n  for (const attribute of node.attributes) {\n    if (attribute.type === 'mdxJsxExpressionAttribute') {\n      if (attribute.data && attribute.data.estree && state.evaluater) {\n        const program = attribute.data.estree\n        const expression = program.body[0]\n        assert(expression.type === 'ExpressionStatement')\n        const objectExpression = expression.expression\n        assert(objectExpression.type === 'ObjectExpression')\n        const property = objectExpression.properties[0]\n        assert(property.type === 'SpreadElement')\n\n        Object.assign(\n          props,\n          state.evaluater.evaluateExpression(property.argument)\n        )\n      } else {\n        crashEstree(state, node.position)\n      }\n    } else {\n      // For JSX, the author is responsible of passing in the correct values.\n      const name = attribute.name\n      /** @type {unknown} */\n      let value\n\n      if (attribute.value && typeof attribute.value === 'object') {\n        if (\n          attribute.value.data &&\n          attribute.value.data.estree &&\n          state.evaluater\n        ) {\n          const program = attribute.value.data.estree\n          const expression = program.body[0]\n          assert(expression.type === 'ExpressionStatement')\n          value = state.evaluater.evaluateExpression(expression.expression)\n        } else {\n          crashEstree(state, node.position)\n        }\n      } else {\n        value = attribute.value === null ? true : attribute.value\n      }\n\n      // Assume a prop.\n      props[name] = /** @type {Props[keyof Props]} */ (value)\n    }\n  }\n\n  return props\n}\n\n/**\n * Create children.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Parents} node\n *   Current element.\n * @returns {Array<Child>}\n *   Children.\n */\nfunction createChildren(state, node) {\n  /** @type {Array<Child>} */\n  const children = []\n  let index = -1\n  /** @type {Map<string, number>} */\n  // Note: test this when Solid doesn’t want to merge my upcoming PR.\n  /* c8 ignore next */\n  const countsByName = state.passKeys ? new Map() : emptyMap\n\n  while (++index < node.children.length) {\n    const child = node.children[index]\n    /** @type {string | undefined} */\n    let key\n\n    if (state.passKeys) {\n      const name =\n        child.type === 'element'\n          ? child.tagName\n          : child.type === 'mdxJsxFlowElement' ||\n              child.type === 'mdxJsxTextElement'\n            ? child.name\n            : undefined\n\n      if (name) {\n        const count = countsByName.get(name) || 0\n        key = name + '-' + count\n        countsByName.set(name, count + 1)\n      }\n    }\n\n    const result = one(state, child, key)\n    if (result !== undefined) children.push(result)\n  }\n\n  return children\n}\n\n/**\n * Handle a property.\n *\n * @param {State} state\n *   Info passed around.\n * @param {string} prop\n *   Key.\n * @param {Array<number | string> | boolean | number | string | null | undefined} value\n *   hast property value.\n * @returns {Field | undefined}\n *   Field for runtime, optional.\n */\nfunction createProperty(state, prop, value) {\n  const info = find(state.schema, prop)\n\n  // Ignore nullish and `NaN` values.\n  if (\n    value === null ||\n    value === undefined ||\n    (typeof value === 'number' && Number.isNaN(value))\n  ) {\n    return\n  }\n\n  if (Array.isArray(value)) {\n    // Accept `array`.\n    // Most props are space-separated.\n    value = info.commaSeparated ? commas(value) : spaces(value)\n  }\n\n  // React only accepts `style` as object.\n  if (info.property === 'style') {\n    let styleObject =\n      typeof value === 'object' ? value : parseStyle(state, String(value))\n\n    if (state.stylePropertyNameCase === 'css') {\n      styleObject = transformStylesToCssCasing(styleObject)\n    }\n\n    return ['style', styleObject]\n  }\n\n  return [\n    state.elementAttributeNameCase === 'react' && info.space\n      ? hastToReact[info.property] || info.property\n      : info.attribute,\n    value\n  ]\n}\n\n/**\n * Parse a CSS declaration to an object.\n *\n * @param {State} state\n *   Info passed around.\n * @param {string} value\n *   CSS declarations.\n * @returns {Style}\n *   Properties.\n * @throws\n *   Throws `VFileMessage` when CSS cannot be parsed.\n */\nfunction parseStyle(state, value) {\n  /** @type {Style} */\n  const result = {}\n\n  try {\n    // @ts-expect-error: `style-to-object` types are broken.\n    styleToObject(value, replacer)\n  } catch (error) {\n    if (!state.ignoreInvalidStyle) {\n      const cause = /** @type {Error} */ (error)\n      const message = new VFileMessage('Cannot parse `style` attribute', {\n        ancestors: state.ancestors,\n        cause,\n        ruleId: 'style',\n        source: 'hast-util-to-jsx-runtime'\n      })\n      message.file = state.filePath || undefined\n      message.url = docs + '#cannot-parse-style-attribute'\n\n      throw message\n    }\n  }\n\n  return result\n\n  /**\n   * Add a CSS property (normal, so with dashes) to `result` as a DOM CSS\n   * property.\n   *\n   * @param {string} name\n   *   Key.\n   * @param {string} value\n   *   Value\n   * @returns {undefined}\n   *   Nothing.\n   */\n  function replacer(name, value) {\n    let key = name\n\n    if (key.slice(0, 2) !== '--') {\n      if (key.slice(0, 4) === '-ms-') key = 'ms-' + key.slice(4)\n      key = key.replace(dashSomething, toCamel)\n    }\n\n    result[key] = value\n  }\n}\n\n/**\n * Create a JSX name from a string.\n *\n * @param {State} state\n *   To do.\n * @param {string} name\n *   Name.\n * @param {boolean} allowExpression\n *   Allow member expressions and identifiers.\n * @returns {unknown}\n *   To do.\n */\nfunction findComponentFromName(state, name, allowExpression) {\n  /** @type {Identifier | Literal | MemberExpression} */\n  let result\n\n  if (!allowExpression) {\n    result = {type: 'Literal', value: name}\n  } else if (name.includes('.')) {\n    const identifiers = name.split('.')\n    let index = -1\n    /** @type {Identifier | Literal | MemberExpression | undefined} */\n    let node\n\n    while (++index < identifiers.length) {\n      /** @type {Identifier | Literal} */\n      const prop = isIdentifierName(identifiers[index])\n        ? {type: 'Identifier', name: identifiers[index]}\n        : {type: 'Literal', value: identifiers[index]}\n      node = node\n        ? {\n            type: 'MemberExpression',\n            object: node,\n            property: prop,\n            computed: Boolean(index && prop.type === 'Literal'),\n            optional: false\n          }\n        : prop\n    }\n\n    assert(node, 'always a result')\n    result = node\n  } else {\n    result =\n      isIdentifierName(name) && !/^[a-z]/.test(name)\n        ? {type: 'Identifier', name}\n        : {type: 'Literal', value: name}\n  }\n\n  // Only literals can be passed in `components` currently.\n  // No identifiers / member expressions.\n  if (result.type === 'Literal') {\n    const name = /** @type {keyof JSX.IntrinsicElements} */ (result.value)\n\n    return own.call(state.components, name) ? state.components[name] : name\n  }\n\n  // Assume component.\n  if (state.evaluater) {\n    return state.evaluater.evaluateExpression(result)\n  }\n\n  crashEstree(state)\n}\n\n/**\n * @param {State} state\n * @param {Position | undefined} [place]\n * @returns {never}\n */\nfunction crashEstree(state, place) {\n  const message = new VFileMessage(\n    'Cannot handle MDX estrees without `createEvaluater`',\n    {\n      ancestors: state.ancestors,\n      place,\n      ruleId: 'mdx-estree',\n      source: 'hast-util-to-jsx-runtime'\n    }\n  )\n  message.file = state.filePath || undefined\n  message.url = docs + '#cannot-handle-mdx-estrees-without-createevaluater'\n\n  throw message\n}\n\n/**\n * Transform a DOM casing style object to a CSS casing style object.\n *\n * @param {Style} domCasing\n * @returns {Style}\n */\nfunction transformStylesToCssCasing(domCasing) {\n  /** @type {Style} */\n  const cssCasing = {}\n  /** @type {string} */\n  let from\n\n  for (from in domCasing) {\n    if (own.call(domCasing, from)) {\n      cssCasing[transformStyleToCssCasing(from)] = domCasing[from]\n    }\n  }\n\n  return cssCasing\n}\n\n/**\n * Transform a DOM casing style field to a CSS casing style field.\n *\n * @param {string} from\n * @returns {string}\n */\nfunction transformStyleToCssCasing(from) {\n  let to = from.replace(cap, toDash)\n  // Handle `ms-xxx` -> `-ms-xxx`.\n  if (to.slice(0, 3) === 'ms-') to = '-' + to\n  return to\n}\n\n/**\n * Make `$1` capitalized.\n *\n * @param {string} _\n *   Whatever.\n * @param {string} $1\n *   Single ASCII alphabetical.\n * @returns {string}\n *   Capitalized `$1`.\n */\nfunction toCamel(_, $1) {\n  return $1.toUpperCase()\n}\n\n/**\n * Make `$0` dash cased.\n *\n * @param {string} $0\n *   Capitalized ASCII leter.\n * @returns {string}\n *   Dash and lower letter.\n */\nfunction toDash($0) {\n  return '-' + $0.toLowerCase()\n}\n","/**\n * @typedef Options\n *   Configuration for `stringify`.\n * @property {boolean} [padLeft=true]\n *   Whether to pad a space before a token.\n * @property {boolean} [padRight=false]\n *   Whether to pad a space after a token.\n */\n\n/**\n * @typedef {Options} StringifyOptions\n *   Please use `StringifyOptions` instead.\n */\n\n/**\n * Parse comma-separated tokens to an array.\n *\n * @param {string} value\n *   Comma-separated tokens.\n * @returns {Array<string>}\n *   List of tokens.\n */\nexport function parse(value) {\n  /** @type {Array<string>} */\n  const tokens = []\n  const input = String(value || '')\n  let index = input.indexOf(',')\n  let start = 0\n  /** @type {boolean} */\n  let end = false\n\n  while (!end) {\n    if (index === -1) {\n      index = input.length\n      end = true\n    }\n\n    const token = input.slice(start, index).trim()\n\n    if (token || !end) {\n      tokens.push(token)\n    }\n\n    start = index + 1\n    index = input.indexOf(',', start)\n  }\n\n  return tokens\n}\n\n/**\n * Serialize an array of strings or numbers to comma-separated tokens.\n *\n * @param {Array<string|number>} values\n *   List of tokens.\n * @param {Options} [options]\n *   Configuration for `stringify` (optional).\n * @returns {string}\n *   Comma-separated tokens.\n */\nexport function stringify(values, options) {\n  const settings = options || {}\n\n  // Ensure the last empty entry is seen.\n  const input = values[values.length - 1] === '' ? [...values, ''] : values\n\n  return input\n    .join(\n      (settings.padRight ? ' ' : '') +\n        ',' +\n        (settings.padLeft === false ? '' : ' ')\n    )\n    .trim()\n}\n","/**\n * Parse space-separated tokens to an array of strings.\n *\n * @param {string} value\n *   Space-separated tokens.\n * @returns {Array<string>}\n *   List of tokens.\n */\nexport function parse(value) {\n  const input = String(value || '').trim()\n  return input ? input.split(/[ \\t\\n\\r\\f]+/g) : []\n}\n\n/**\n * Serialize an array of strings as space separated-tokens.\n *\n * @param {Array<string|number>} values\n *   List of tokens.\n * @returns {string}\n *   Space-separated tokens.\n */\nexport function stringify(values) {\n  return values.join(' ').trim()\n}\n","/**\n * HTML URL properties.\n *\n * Each key is a property name and each value is a list of tag names it applies\n * to or `null` if it applies to all elements.\n *\n * @type {Record<string, Array<string> | null>}\n */\nexport const urlAttributes = {\n  action: ['form'],\n  cite: ['blockquote', 'del', 'ins', 'q'],\n  data: ['object'],\n  formAction: ['button', 'input'],\n  href: ['a', 'area', 'base', 'link'],\n  icon: ['menuitem'],\n  itemId: null,\n  manifest: ['html'],\n  ping: ['a', 'area'],\n  poster: ['video'],\n  src: [\n    'audio',\n    'embed',\n    'iframe',\n    'img',\n    'input',\n    'script',\n    'source',\n    'track',\n    'video'\n  ]\n}\n","/**\n * @typedef {import('mdast').Nodes} Nodes\n *\n * @typedef Options\n *   Configuration (optional).\n * @property {boolean | null | undefined} [includeImageAlt=true]\n *   Whether to use `alt` for `image`s (default: `true`).\n * @property {boolean | null | undefined} [includeHtml=true]\n *   Whether to use `value` of HTML (default: `true`).\n */\n\n/** @type {Options} */\nconst emptyOptions = {}\n\n/**\n * Get the text content of a node or list of nodes.\n *\n * Prefers the node’s plain-text fields, otherwise serializes its children,\n * and if the given value is an array, serialize the nodes in it.\n *\n * @param {unknown} [value]\n *   Thing to serialize, typically `Node`.\n * @param {Options | null | undefined} [options]\n *   Configuration (optional).\n * @returns {string}\n *   Serialized `value`.\n */\nexport function toString(value, options) {\n  const settings = options || emptyOptions\n  const includeImageAlt =\n    typeof settings.includeImageAlt === 'boolean'\n      ? settings.includeImageAlt\n      : true\n  const includeHtml =\n    typeof settings.includeHtml === 'boolean' ? settings.includeHtml : true\n\n  return one(value, includeImageAlt, includeHtml)\n}\n\n/**\n * One node or several nodes.\n *\n * @param {unknown} value\n *   Thing to serialize.\n * @param {boolean} includeImageAlt\n *   Include image `alt`s.\n * @param {boolean} includeHtml\n *   Include HTML.\n * @returns {string}\n *   Serialized node.\n */\nfunction one(value, includeImageAlt, includeHtml) {\n  if (node(value)) {\n    if ('value' in value) {\n      return value.type === 'html' && !includeHtml ? '' : value.value\n    }\n\n    if (includeImageAlt && 'alt' in value && value.alt) {\n      return value.alt\n    }\n\n    if ('children' in value) {\n      return all(value.children, includeImageAlt, includeHtml)\n    }\n  }\n\n  if (Array.isArray(value)) {\n    return all(value, includeImageAlt, includeHtml)\n  }\n\n  return ''\n}\n\n/**\n * Serialize a list of nodes.\n *\n * @param {Array<unknown>} values\n *   Thing to serialize.\n * @param {boolean} includeImageAlt\n *   Include image `alt`s.\n * @param {boolean} includeHtml\n *   Include HTML.\n * @returns {string}\n *   Serialized nodes.\n */\nfunction all(values, includeImageAlt, includeHtml) {\n  /** @type {Array<string>} */\n  const result = []\n  let index = -1\n\n  while (++index < values.length) {\n    result[index] = one(values[index], includeImageAlt, includeHtml)\n  }\n\n  return result.join('')\n}\n\n/**\n * Check if `value` looks like a node.\n *\n * @param {unknown} value\n *   Thing.\n * @returns {value is Nodes}\n *   Whether `value` is a node.\n */\nfunction node(value) {\n  return Boolean(value && typeof value === 'object')\n}\n","/**\n * Like `Array#splice`, but smarter for giant arrays.\n *\n * `Array#splice` takes all items to be inserted as individual argument which\n * causes a stack overflow in V8 when trying to insert 100k items for instance.\n *\n * Otherwise, this does not return the removed items, and takes `items` as an\n * array instead of rest parameters.\n *\n * @template {unknown} T\n *   Item type.\n * @param {Array<T>} list\n *   List to operate on.\n * @param {number} start\n *   Index to remove/insert at (can be negative).\n * @param {number} remove\n *   Number of items to remove.\n * @param {Array<T>} items\n *   Items to inject into `list`.\n * @returns {undefined}\n *   Nothing.\n */\nexport function splice(list, start, remove, items) {\n  const end = list.length\n  let chunkStart = 0\n  /** @type {Array<unknown>} */\n  let parameters\n\n  // Make start between zero and `end` (included).\n  if (start < 0) {\n    start = -start > end ? 0 : end + start\n  } else {\n    start = start > end ? end : start\n  }\n  remove = remove > 0 ? remove : 0\n\n  // No need to chunk the items if there’s only a couple (10k) items.\n  if (items.length < 10000) {\n    parameters = Array.from(items)\n    parameters.unshift(start, remove)\n    // @ts-expect-error Hush, it’s fine.\n    list.splice(...parameters)\n  } else {\n    // Delete `remove` items starting from `start`\n    if (remove) list.splice(start, remove)\n\n    // Insert the items in chunks to not cause stack overflows.\n    while (chunkStart < items.length) {\n      parameters = items.slice(chunkStart, chunkStart + 10000)\n      parameters.unshift(start, 0)\n      // @ts-expect-error Hush, it’s fine.\n      list.splice(...parameters)\n      chunkStart += 10000\n      start += 10000\n    }\n  }\n}\n\n/**\n * Append `items` (an array) at the end of `list` (another array).\n * When `list` was empty, returns `items` instead.\n *\n * This prevents a potentially expensive operation when `list` is empty,\n * and adds items in batches to prevent V8 from hanging.\n *\n * @template {unknown} T\n *   Item type.\n * @param {Array<T>} list\n *   List to operate on.\n * @param {Array<T>} items\n *   Items to add to `list`.\n * @returns {Array<T>}\n *   Either `list` or `items`.\n */\nexport function push(list, items) {\n  if (list.length > 0) {\n    splice(list, list.length, 0, items)\n    return list\n  }\n  return items\n}\n","/**\n * @typedef {import('micromark-util-types').Chunk} Chunk\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').Token} Token\n */\n\nimport {splice} from 'micromark-util-chunked'\n/**\n * Tokenize subcontent.\n *\n * @param {Array<Event>} events\n *   List of events.\n * @returns {boolean}\n *   Whether subtokens were found.\n */ // eslint-disable-next-line complexity\nexport function subtokenize(events) {\n  /** @type {Record<string, number>} */\n  const jumps = {}\n  let index = -1\n  /** @type {Event} */\n  let event\n  /** @type {number | undefined} */\n  let lineIndex\n  /** @type {number} */\n  let otherIndex\n  /** @type {Event} */\n  let otherEvent\n  /** @type {Array<Event>} */\n  let parameters\n  /** @type {Array<Event>} */\n  let subevents\n  /** @type {boolean | undefined} */\n  let more\n  while (++index < events.length) {\n    while (index in jumps) {\n      index = jumps[index]\n    }\n    event = events[index]\n\n    // Add a hook for the GFM tasklist extension, which needs to know if text\n    // is in the first content of a list item.\n    if (\n      index &&\n      event[1].type === 'chunkFlow' &&\n      events[index - 1][1].type === 'listItemPrefix'\n    ) {\n      subevents = event[1]._tokenizer.events\n      otherIndex = 0\n      if (\n        otherIndex < subevents.length &&\n        subevents[otherIndex][1].type === 'lineEndingBlank'\n      ) {\n        otherIndex += 2\n      }\n      if (\n        otherIndex < subevents.length &&\n        subevents[otherIndex][1].type === 'content'\n      ) {\n        while (++otherIndex < subevents.length) {\n          if (subevents[otherIndex][1].type === 'content') {\n            break\n          }\n          if (subevents[otherIndex][1].type === 'chunkText') {\n            subevents[otherIndex][1]._isInFirstContentOfListItem = true\n            otherIndex++\n          }\n        }\n      }\n    }\n\n    // Enter.\n    if (event[0] === 'enter') {\n      if (event[1].contentType) {\n        Object.assign(jumps, subcontent(events, index))\n        index = jumps[index]\n        more = true\n      }\n    }\n    // Exit.\n    else if (event[1]._container) {\n      otherIndex = index\n      lineIndex = undefined\n      while (otherIndex--) {\n        otherEvent = events[otherIndex]\n        if (\n          otherEvent[1].type === 'lineEnding' ||\n          otherEvent[1].type === 'lineEndingBlank'\n        ) {\n          if (otherEvent[0] === 'enter') {\n            if (lineIndex) {\n              events[lineIndex][1].type = 'lineEndingBlank'\n            }\n            otherEvent[1].type = 'lineEnding'\n            lineIndex = otherIndex\n          }\n        } else {\n          break\n        }\n      }\n      if (lineIndex) {\n        // Fix position.\n        event[1].end = Object.assign({}, events[lineIndex][1].start)\n\n        // Switch container exit w/ line endings.\n        parameters = events.slice(lineIndex, index)\n        parameters.unshift(event)\n        splice(events, lineIndex, index - lineIndex + 1, parameters)\n      }\n    }\n  }\n  return !more\n}\n\n/**\n * Tokenize embedded tokens.\n *\n * @param {Array<Event>} events\n * @param {number} eventIndex\n * @returns {Record<string, number>}\n */\nfunction subcontent(events, eventIndex) {\n  const token = events[eventIndex][1]\n  const context = events[eventIndex][2]\n  let startPosition = eventIndex - 1\n  /** @type {Array<number>} */\n  const startPositions = []\n  const tokenizer =\n    token._tokenizer || context.parser[token.contentType](token.start)\n  const childEvents = tokenizer.events\n  /** @type {Array<[number, number]>} */\n  const jumps = []\n  /** @type {Record<string, number>} */\n  const gaps = {}\n  /** @type {Array<Chunk>} */\n  let stream\n  /** @type {Token | undefined} */\n  let previous\n  let index = -1\n  /** @type {Token | undefined} */\n  let current = token\n  let adjust = 0\n  let start = 0\n  const breaks = [start]\n\n  // Loop forward through the linked tokens to pass them in order to the\n  // subtokenizer.\n  while (current) {\n    // Find the position of the event for this token.\n    while (events[++startPosition][1] !== current) {\n      // Empty.\n    }\n    startPositions.push(startPosition)\n    if (!current._tokenizer) {\n      stream = context.sliceStream(current)\n      if (!current.next) {\n        stream.push(null)\n      }\n      if (previous) {\n        tokenizer.defineSkip(current.start)\n      }\n      if (current._isInFirstContentOfListItem) {\n        tokenizer._gfmTasklistFirstContentOfListItem = true\n      }\n      tokenizer.write(stream)\n      if (current._isInFirstContentOfListItem) {\n        tokenizer._gfmTasklistFirstContentOfListItem = undefined\n      }\n    }\n\n    // Unravel the next token.\n    previous = current\n    current = current.next\n  }\n\n  // Now, loop back through all events (and linked tokens), to figure out which\n  // parts belong where.\n  current = token\n  while (++index < childEvents.length) {\n    if (\n      // Find a void token that includes a break.\n      childEvents[index][0] === 'exit' &&\n      childEvents[index - 1][0] === 'enter' &&\n      childEvents[index][1].type === childEvents[index - 1][1].type &&\n      childEvents[index][1].start.line !== childEvents[index][1].end.line\n    ) {\n      start = index + 1\n      breaks.push(start)\n      // Help GC.\n      current._tokenizer = undefined\n      current.previous = undefined\n      current = current.next\n    }\n  }\n\n  // Help GC.\n  tokenizer.events = []\n\n  // If there’s one more token (which is the cases for lines that end in an\n  // EOF), that’s perfect: the last point we found starts it.\n  // If there isn’t then make sure any remaining content is added to it.\n  if (current) {\n    // Help GC.\n    current._tokenizer = undefined\n    current.previous = undefined\n  } else {\n    breaks.pop()\n  }\n\n  // Now splice the events from the subtokenizer into the current events,\n  // moving back to front so that splice indices aren’t affected.\n  index = breaks.length\n  while (index--) {\n    const slice = childEvents.slice(breaks[index], breaks[index + 1])\n    const start = startPositions.pop()\n    jumps.unshift([start, start + slice.length - 1])\n    splice(events, start, 2, slice)\n  }\n  index = -1\n  while (++index < jumps.length) {\n    gaps[adjust + jumps[index][0]] = adjust + jumps[index][1]\n    adjust += jumps[index][1] - jumps[index][0] - 1\n  }\n  return gaps\n}\n","/**\n * @typedef {import('micromark-util-types').Extension} Extension\n * @typedef {import('micromark-util-types').Handles} Handles\n * @typedef {import('micromark-util-types').HtmlExtension} HtmlExtension\n * @typedef {import('micromark-util-types').NormalizedExtension} NormalizedExtension\n */\n\nimport {splice} from 'micromark-util-chunked'\n\nconst hasOwnProperty = {}.hasOwnProperty\n\n/**\n * Combine multiple syntax extensions into one.\n *\n * @param {Array<Extension>} extensions\n *   List of syntax extensions.\n * @returns {NormalizedExtension}\n *   A single combined extension.\n */\nexport function combineExtensions(extensions) {\n  /** @type {NormalizedExtension} */\n  const all = {}\n  let index = -1\n\n  while (++index < extensions.length) {\n    syntaxExtension(all, extensions[index])\n  }\n\n  return all\n}\n\n/**\n * Merge `extension` into `all`.\n *\n * @param {NormalizedExtension} all\n *   Extension to merge into.\n * @param {Extension} extension\n *   Extension to merge.\n * @returns {undefined}\n */\nfunction syntaxExtension(all, extension) {\n  /** @type {keyof Extension} */\n  let hook\n\n  for (hook in extension) {\n    const maybe = hasOwnProperty.call(all, hook) ? all[hook] : undefined\n    /** @type {Record<string, unknown>} */\n    const left = maybe || (all[hook] = {})\n    /** @type {Record<string, unknown> | undefined} */\n    const right = extension[hook]\n    /** @type {string} */\n    let code\n\n    if (right) {\n      for (code in right) {\n        if (!hasOwnProperty.call(left, code)) left[code] = []\n        const value = right[code]\n        constructs(\n          // @ts-expect-error Looks like a list.\n          left[code],\n          Array.isArray(value) ? value : value ? [value] : []\n        )\n      }\n    }\n  }\n}\n\n/**\n * Merge `list` into `existing` (both lists of constructs).\n * Mutates `existing`.\n *\n * @param {Array<unknown>} existing\n * @param {Array<unknown>} list\n * @returns {undefined}\n */\nfunction constructs(existing, list) {\n  let index = -1\n  /** @type {Array<unknown>} */\n  const before = []\n\n  while (++index < list.length) {\n    // @ts-expect-error Looks like an object.\n    ;(list[index].add === 'after' ? existing : before).push(list[index])\n  }\n\n  splice(existing, 0, 0, before)\n}\n\n/**\n * Combine multiple HTML extensions into one.\n *\n * @param {Array<HtmlExtension>} htmlExtensions\n *   List of HTML extensions.\n * @returns {HtmlExtension}\n *   A single combined HTML extension.\n */\nexport function combineHtmlExtensions(htmlExtensions) {\n  /** @type {HtmlExtension} */\n  const handlers = {}\n  let index = -1\n\n  while (++index < htmlExtensions.length) {\n    htmlExtension(handlers, htmlExtensions[index])\n  }\n\n  return handlers\n}\n\n/**\n * Merge `extension` into `all`.\n *\n * @param {HtmlExtension} all\n *   Extension to merge into.\n * @param {HtmlExtension} extension\n *   Extension to merge.\n * @returns {undefined}\n */\nfunction htmlExtension(all, extension) {\n  /** @type {keyof HtmlExtension} */\n  let hook\n\n  for (hook in extension) {\n    const maybe = hasOwnProperty.call(all, hook) ? all[hook] : undefined\n    const left = maybe || (all[hook] = {})\n    const right = extension[hook]\n    /** @type {keyof Handles} */\n    let type\n\n    if (right) {\n      for (type in right) {\n        // @ts-expect-error assume document vs regular handler are managed correctly.\n        left[type] = right[type]\n      }\n    }\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n */\n\n/**\n * Check whether the character code represents an ASCII alpha (`a` through `z`,\n * case insensitive).\n *\n * An **ASCII alpha** is an ASCII upper alpha or ASCII lower alpha.\n *\n * An **ASCII upper alpha** is a character in the inclusive range U+0041 (`A`)\n * to U+005A (`Z`).\n *\n * An **ASCII lower alpha** is a character in the inclusive range U+0061 (`a`)\n * to U+007A (`z`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiAlpha = regexCheck(/[A-Za-z]/);\n\n/**\n * Check whether the character code represents an ASCII alphanumeric (`a`\n * through `z`, case insensitive, or `0` through `9`).\n *\n * An **ASCII alphanumeric** is an ASCII digit (see `asciiDigit`) or ASCII alpha\n * (see `asciiAlpha`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiAlphanumeric = regexCheck(/[\\dA-Za-z]/);\n\n/**\n * Check whether the character code represents an ASCII atext.\n *\n * atext is an ASCII alphanumeric (see `asciiAlphanumeric`), or a character in\n * the inclusive ranges U+0023 NUMBER SIGN (`#`) to U+0027 APOSTROPHE (`'`),\n * U+002A ASTERISK (`*`), U+002B PLUS SIGN (`+`), U+002D DASH (`-`), U+002F\n * SLASH (`/`), U+003D EQUALS TO (`=`), U+003F QUESTION MARK (`?`), U+005E\n * CARET (`^`) to U+0060 GRAVE ACCENT (`` ` ``), or U+007B LEFT CURLY BRACE\n * (`{`) to U+007E TILDE (`~`).\n *\n * See:\n * **\\[RFC5322]**:\n * [Internet Message Format](https://tools.ietf.org/html/rfc5322).\n * P. Resnick.\n * IETF.\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiAtext = regexCheck(/[#-'*+\\--9=?A-Z^-~]/);\n\n/**\n * Check whether a character code is an ASCII control character.\n *\n * An **ASCII control** is a character in the inclusive range U+0000 NULL (NUL)\n * to U+001F (US), or U+007F (DEL).\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function asciiControl(code) {\n  return (\n    // Special whitespace codes (which have negative values), C0 and Control\n    // character DEL\n    code !== null && (code < 32 || code === 127)\n  );\n}\n\n/**\n * Check whether the character code represents an ASCII digit (`0` through `9`).\n *\n * An **ASCII digit** is a character in the inclusive range U+0030 (`0`) to\n * U+0039 (`9`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiDigit = regexCheck(/\\d/);\n\n/**\n * Check whether the character code represents an ASCII hex digit (`a` through\n * `f`, case insensitive, or `0` through `9`).\n *\n * An **ASCII hex digit** is an ASCII digit (see `asciiDigit`), ASCII upper hex\n * digit, or an ASCII lower hex digit.\n *\n * An **ASCII upper hex digit** is a character in the inclusive range U+0041\n * (`A`) to U+0046 (`F`).\n *\n * An **ASCII lower hex digit** is a character in the inclusive range U+0061\n * (`a`) to U+0066 (`f`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiHexDigit = regexCheck(/[\\dA-Fa-f]/);\n\n/**\n * Check whether the character code represents ASCII punctuation.\n *\n * An **ASCII punctuation** is a character in the inclusive ranges U+0021\n * EXCLAMATION MARK (`!`) to U+002F SLASH (`/`), U+003A COLON (`:`) to U+0040 AT\n * SIGN (`@`), U+005B LEFT SQUARE BRACKET (`[`) to U+0060 GRAVE ACCENT\n * (`` ` ``), or U+007B LEFT CURLY BRACE (`{`) to U+007E TILDE (`~`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiPunctuation = regexCheck(/[!-/:-@[-`{-~]/);\n\n/**\n * Check whether a character code is a markdown line ending.\n *\n * A **markdown line ending** is the virtual characters M-0003 CARRIAGE RETURN\n * LINE FEED (CRLF), M-0004 LINE FEED (LF) and M-0005 CARRIAGE RETURN (CR).\n *\n * In micromark, the actual character U+000A LINE FEED (LF) and U+000D CARRIAGE\n * RETURN (CR) are replaced by these virtual characters depending on whether\n * they occurred together.\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownLineEnding(code) {\n  return code !== null && code < -2;\n}\n\n/**\n * Check whether a character code is a markdown line ending (see\n * `markdownLineEnding`) or markdown space (see `markdownSpace`).\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownLineEndingOrSpace(code) {\n  return code !== null && (code < 0 || code === 32);\n}\n\n/**\n * Check whether a character code is a markdown space.\n *\n * A **markdown space** is the concrete character U+0020 SPACE (SP) and the\n * virtual characters M-0001 VIRTUAL SPACE (VS) and M-0002 HORIZONTAL TAB (HT).\n *\n * In micromark, the actual character U+0009 CHARACTER TABULATION (HT) is\n * replaced by one M-0002 HORIZONTAL TAB (HT) and between 0 and 3 M-0001 VIRTUAL\n * SPACE (VS) characters, depending on the column at which the tab occurred.\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownSpace(code) {\n  return code === -2 || code === -1 || code === 32;\n}\n\n// Size note: removing ASCII from the regex and using `asciiPunctuation` here\n// In fact adds to the bundle size.\n/**\n * Check whether the character code represents Unicode punctuation.\n *\n * A **Unicode punctuation** is a character in the Unicode `Pc` (Punctuation,\n * Connector), `Pd` (Punctuation, Dash), `Pe` (Punctuation, Close), `Pf`\n * (Punctuation, Final quote), `Pi` (Punctuation, Initial quote), `Po`\n * (Punctuation, Other), or `Ps` (Punctuation, Open) categories, or an ASCII\n * punctuation (see `asciiPunctuation`).\n *\n * See:\n * **\\[UNICODE]**:\n * [The Unicode Standard](https://www.unicode.org/versions/).\n * Unicode Consortium.\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const unicodePunctuation = regexCheck(/\\p{P}|\\p{S}/u);\n\n/**\n * Check whether the character code represents Unicode whitespace.\n *\n * Note that this does handle micromark specific markdown whitespace characters.\n * See `markdownLineEndingOrSpace` to check that.\n *\n * A **Unicode whitespace** is a character in the Unicode `Zs` (Separator,\n * Space) category, or U+0009 CHARACTER TABULATION (HT), U+000A LINE FEED (LF),\n * U+000C (FF), or U+000D CARRIAGE RETURN (CR) (**\\[UNICODE]**).\n *\n * See:\n * **\\[UNICODE]**:\n * [The Unicode Standard](https://www.unicode.org/versions/).\n * Unicode Consortium.\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const unicodeWhitespace = regexCheck(/\\s/);\n\n/**\n * Create a code check from a regex.\n *\n * @param {RegExp} regex\n * @returns {(code: Code) => boolean}\n */\nfunction regexCheck(regex) {\n  return check;\n\n  /**\n   * Check whether a code matches the bound regex.\n   *\n   * @param {Code} code\n   *   Character code.\n   * @returns {boolean}\n   *   Whether the character code matches the bound regex.\n   */\n  function check(code) {\n    return code !== null && code > -1 && regex.test(String.fromCharCode(code));\n  }\n}","/**\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenType} TokenType\n */\n\nimport {markdownSpace} from 'micromark-util-character'\n\n// To do: implement `spaceOrTab`, `spaceOrTabMinMax`, `spaceOrTabWithOptions`.\n\n/**\n * Parse spaces and tabs.\n *\n * There is no `nok` parameter:\n *\n * *   spaces in markdown are often optional, in which case this factory can be\n *     used and `ok` will be switched to whether spaces were found or not\n * *   one line ending or space can be detected with `markdownSpace(code)` right\n *     before using `factorySpace`\n *\n * ###### Examples\n *\n * Where `␉` represents a tab (plus how much it expands) and `␠` represents a\n * single space.\n *\n * ```markdown\n * ␉\n * ␠␠␠␠\n * ␉␠\n * ```\n *\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @param {TokenType} type\n *   Type (`' \\t'`).\n * @param {number | undefined} [max=Infinity]\n *   Max (exclusive).\n * @returns {State}\n *   Start state.\n */\nexport function factorySpace(effects, ok, type, max) {\n  const limit = max ? max - 1 : Number.POSITIVE_INFINITY\n  let size = 0\n  return start\n\n  /** @type {State} */\n  function start(code) {\n    if (markdownSpace(code)) {\n      effects.enter(type)\n      return prefix(code)\n    }\n    return ok(code)\n  }\n\n  /** @type {State} */\n  function prefix(code) {\n    if (markdownSpace(code) && size++ < limit) {\n      effects.consume(code)\n      return prefix\n    }\n    effects.exit(type)\n    return ok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').Initializer} Initializer\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\n/** @type {InitialConstruct} */\nexport const content = {\n  tokenize: initializeContent\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Initializer}\n */\nfunction initializeContent(effects) {\n  const contentStart = effects.attempt(\n    this.parser.constructs.contentInitial,\n    afterContentStartConstruct,\n    paragraphInitial\n  )\n  /** @type {Token} */\n  let previous\n  return contentStart\n\n  /** @type {State} */\n  function afterContentStartConstruct(code) {\n    if (code === null) {\n      effects.consume(code)\n      return\n    }\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return factorySpace(effects, contentStart, 'linePrefix')\n  }\n\n  /** @type {State} */\n  function paragraphInitial(code) {\n    effects.enter('paragraph')\n    return lineStart(code)\n  }\n\n  /** @type {State} */\n  function lineStart(code) {\n    const token = effects.enter('chunkText', {\n      contentType: 'text',\n      previous\n    })\n    if (previous) {\n      previous.next = token\n    }\n    previous = token\n    return data(code)\n  }\n\n  /** @type {State} */\n  function data(code) {\n    if (code === null) {\n      effects.exit('chunkText')\n      effects.exit('paragraph')\n      effects.consume(code)\n      return\n    }\n    if (markdownLineEnding(code)) {\n      effects.consume(code)\n      effects.exit('chunkText')\n      return lineStart\n    }\n\n    // Data.\n    effects.consume(code)\n    return data\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').ContainerState} ContainerState\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').Initializer} Initializer\n * @typedef {import('micromark-util-types').Point} Point\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\n/**\n * @typedef {[Construct, ContainerState]} StackItem\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\nimport {splice} from 'micromark-util-chunked'\n/** @type {InitialConstruct} */\nexport const document = {\n  tokenize: initializeDocument\n}\n\n/** @type {Construct} */\nconst containerConstruct = {\n  tokenize: tokenizeContainer\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Initializer}\n */\nfunction initializeDocument(effects) {\n  const self = this\n  /** @type {Array<StackItem>} */\n  const stack = []\n  let continued = 0\n  /** @type {TokenizeContext | undefined} */\n  let childFlow\n  /** @type {Token | undefined} */\n  let childToken\n  /** @type {number} */\n  let lineStartOffset\n  return start\n\n  /** @type {State} */\n  function start(code) {\n    // First we iterate through the open blocks, starting with the root\n    // document, and descending through last children down to the last open\n    // block.\n    // Each block imposes a condition that the line must satisfy if the block is\n    // to remain open.\n    // For example, a block quote requires a `>` character.\n    // A paragraph requires a non-blank line.\n    // In this phase we may match all or just some of the open blocks.\n    // But we cannot close unmatched blocks yet, because we may have a lazy\n    // continuation line.\n    if (continued < stack.length) {\n      const item = stack[continued]\n      self.containerState = item[1]\n      return effects.attempt(\n        item[0].continuation,\n        documentContinue,\n        checkNewContainers\n      )(code)\n    }\n\n    // Done.\n    return checkNewContainers(code)\n  }\n\n  /** @type {State} */\n  function documentContinue(code) {\n    continued++\n\n    // Note: this field is called `_closeFlow` but it also closes containers.\n    // Perhaps a good idea to rename it but it’s already used in the wild by\n    // extensions.\n    if (self.containerState._closeFlow) {\n      self.containerState._closeFlow = undefined\n      if (childFlow) {\n        closeFlow()\n      }\n\n      // Note: this algorithm for moving events around is similar to the\n      // algorithm when dealing with lazy lines in `writeToChild`.\n      const indexBeforeExits = self.events.length\n      let indexBeforeFlow = indexBeforeExits\n      /** @type {Point | undefined} */\n      let point\n\n      // Find the flow chunk.\n      while (indexBeforeFlow--) {\n        if (\n          self.events[indexBeforeFlow][0] === 'exit' &&\n          self.events[indexBeforeFlow][1].type === 'chunkFlow'\n        ) {\n          point = self.events[indexBeforeFlow][1].end\n          break\n        }\n      }\n      exitContainers(continued)\n\n      // Fix positions.\n      let index = indexBeforeExits\n      while (index < self.events.length) {\n        self.events[index][1].end = Object.assign({}, point)\n        index++\n      }\n\n      // Inject the exits earlier (they’re still also at the end).\n      splice(\n        self.events,\n        indexBeforeFlow + 1,\n        0,\n        self.events.slice(indexBeforeExits)\n      )\n\n      // Discard the duplicate exits.\n      self.events.length = index\n      return checkNewContainers(code)\n    }\n    return start(code)\n  }\n\n  /** @type {State} */\n  function checkNewContainers(code) {\n    // Next, after consuming the continuation markers for existing blocks, we\n    // look for new block starts (e.g. `>` for a block quote).\n    // If we encounter a new block start, we close any blocks unmatched in\n    // step 1 before creating the new block as a child of the last matched\n    // block.\n    if (continued === stack.length) {\n      // No need to `check` whether there’s a container, of `exitContainers`\n      // would be moot.\n      // We can instead immediately `attempt` to parse one.\n      if (!childFlow) {\n        return documentContinued(code)\n      }\n\n      // If we have concrete content, such as block HTML or fenced code,\n      // we can’t have containers “pierce” into them, so we can immediately\n      // start.\n      if (childFlow.currentConstruct && childFlow.currentConstruct.concrete) {\n        return flowStart(code)\n      }\n\n      // If we do have flow, it could still be a blank line,\n      // but we’d be interrupting it w/ a new container if there’s a current\n      // construct.\n      // To do: next major: remove `_gfmTableDynamicInterruptHack` (no longer\n      // needed in micromark-extension-gfm-table@1.0.6).\n      self.interrupt = Boolean(\n        childFlow.currentConstruct && !childFlow._gfmTableDynamicInterruptHack\n      )\n    }\n\n    // Check if there is a new container.\n    self.containerState = {}\n    return effects.check(\n      containerConstruct,\n      thereIsANewContainer,\n      thereIsNoNewContainer\n    )(code)\n  }\n\n  /** @type {State} */\n  function thereIsANewContainer(code) {\n    if (childFlow) closeFlow()\n    exitContainers(continued)\n    return documentContinued(code)\n  }\n\n  /** @type {State} */\n  function thereIsNoNewContainer(code) {\n    self.parser.lazy[self.now().line] = continued !== stack.length\n    lineStartOffset = self.now().offset\n    return flowStart(code)\n  }\n\n  /** @type {State} */\n  function documentContinued(code) {\n    // Try new containers.\n    self.containerState = {}\n    return effects.attempt(\n      containerConstruct,\n      containerContinue,\n      flowStart\n    )(code)\n  }\n\n  /** @type {State} */\n  function containerContinue(code) {\n    continued++\n    stack.push([self.currentConstruct, self.containerState])\n    // Try another.\n    return documentContinued(code)\n  }\n\n  /** @type {State} */\n  function flowStart(code) {\n    if (code === null) {\n      if (childFlow) closeFlow()\n      exitContainers(0)\n      effects.consume(code)\n      return\n    }\n    childFlow = childFlow || self.parser.flow(self.now())\n    effects.enter('chunkFlow', {\n      contentType: 'flow',\n      previous: childToken,\n      _tokenizer: childFlow\n    })\n    return flowContinue(code)\n  }\n\n  /** @type {State} */\n  function flowContinue(code) {\n    if (code === null) {\n      writeToChild(effects.exit('chunkFlow'), true)\n      exitContainers(0)\n      effects.consume(code)\n      return\n    }\n    if (markdownLineEnding(code)) {\n      effects.consume(code)\n      writeToChild(effects.exit('chunkFlow'))\n      // Get ready for the next line.\n      continued = 0\n      self.interrupt = undefined\n      return start\n    }\n    effects.consume(code)\n    return flowContinue\n  }\n\n  /**\n   * @param {Token} token\n   * @param {boolean | undefined} [eof]\n   * @returns {undefined}\n   */\n  function writeToChild(token, eof) {\n    const stream = self.sliceStream(token)\n    if (eof) stream.push(null)\n    token.previous = childToken\n    if (childToken) childToken.next = token\n    childToken = token\n    childFlow.defineSkip(token.start)\n    childFlow.write(stream)\n\n    // Alright, so we just added a lazy line:\n    //\n    // ```markdown\n    // > a\n    // b.\n    //\n    // Or:\n    //\n    // > ~~~c\n    // d\n    //\n    // Or:\n    //\n    // > | e |\n    // f\n    // ```\n    //\n    // The construct in the second example (fenced code) does not accept lazy\n    // lines, so it marked itself as done at the end of its first line, and\n    // then the content construct parses `d`.\n    // Most constructs in markdown match on the first line: if the first line\n    // forms a construct, a non-lazy line can’t “unmake” it.\n    //\n    // The construct in the third example is potentially a GFM table, and\n    // those are *weird*.\n    // It *could* be a table, from the first line, if the following line\n    // matches a condition.\n    // In this case, that second line is lazy, which “unmakes” the first line\n    // and turns the whole into one content block.\n    //\n    // We’ve now parsed the non-lazy and the lazy line, and can figure out\n    // whether the lazy line started a new flow block.\n    // If it did, we exit the current containers between the two flow blocks.\n    if (self.parser.lazy[token.start.line]) {\n      let index = childFlow.events.length\n      while (index--) {\n        if (\n          // The token starts before the line ending…\n          childFlow.events[index][1].start.offset < lineStartOffset &&\n          // …and either is not ended yet…\n          (!childFlow.events[index][1].end ||\n            // …or ends after it.\n            childFlow.events[index][1].end.offset > lineStartOffset)\n        ) {\n          // Exit: there’s still something open, which means it’s a lazy line\n          // part of something.\n          return\n        }\n      }\n\n      // Note: this algorithm for moving events around is similar to the\n      // algorithm when closing flow in `documentContinue`.\n      const indexBeforeExits = self.events.length\n      let indexBeforeFlow = indexBeforeExits\n      /** @type {boolean | undefined} */\n      let seen\n      /** @type {Point | undefined} */\n      let point\n\n      // Find the previous chunk (the one before the lazy line).\n      while (indexBeforeFlow--) {\n        if (\n          self.events[indexBeforeFlow][0] === 'exit' &&\n          self.events[indexBeforeFlow][1].type === 'chunkFlow'\n        ) {\n          if (seen) {\n            point = self.events[indexBeforeFlow][1].end\n            break\n          }\n          seen = true\n        }\n      }\n      exitContainers(continued)\n\n      // Fix positions.\n      index = indexBeforeExits\n      while (index < self.events.length) {\n        self.events[index][1].end = Object.assign({}, point)\n        index++\n      }\n\n      // Inject the exits earlier (they’re still also at the end).\n      splice(\n        self.events,\n        indexBeforeFlow + 1,\n        0,\n        self.events.slice(indexBeforeExits)\n      )\n\n      // Discard the duplicate exits.\n      self.events.length = index\n    }\n  }\n\n  /**\n   * @param {number} size\n   * @returns {undefined}\n   */\n  function exitContainers(size) {\n    let index = stack.length\n\n    // Exit open containers.\n    while (index-- > size) {\n      const entry = stack[index]\n      self.containerState = entry[1]\n      entry[0].exit.call(self, effects)\n    }\n    stack.length = size\n  }\n  function closeFlow() {\n    childFlow.write([null])\n    childToken = undefined\n    childFlow = undefined\n    self.containerState._closeFlow = undefined\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeContainer(effects, ok, nok) {\n  // Always populated by defaults.\n\n  return factorySpace(\n    effects,\n    effects.attempt(this.parser.constructs.document, ok, nok),\n    'linePrefix',\n    this.parser.constructs.disable.null.includes('codeIndented') ? undefined : 4\n  )\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\n/** @type {Construct} */\nexport const blankLine = {\n  tokenize: tokenizeBlankLine,\n  partial: true\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeBlankLine(effects, ok, nok) {\n  return start\n\n  /**\n   * Start of blank line.\n   *\n   * > 👉 **Note**: `␠` represents a space character.\n   *\n   * ```markdown\n   * > | ␠␠␊\n   *     ^\n   * > | ␊\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    return markdownSpace(code)\n      ? factorySpace(effects, after, 'linePrefix')(code)\n      : after(code)\n  }\n\n  /**\n   * At eof/eol, after optional whitespace.\n   *\n   * > 👉 **Note**: `␠` represents a space character.\n   *\n   * ```markdown\n   * > | ␠␠␊\n   *       ^\n   * > | ␊\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    return code === null || markdownLineEnding(code) ? ok(code) : nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\nimport {subtokenize} from 'micromark-util-subtokenize'\n/**\n * No name because it must not be turned off.\n * @type {Construct}\n */\nexport const content = {\n  tokenize: tokenizeContent,\n  resolve: resolveContent\n}\n\n/** @type {Construct} */\nconst continuationConstruct = {\n  tokenize: tokenizeContinuation,\n  partial: true\n}\n\n/**\n * Content is transparent: it’s parsed right now. That way, definitions are also\n * parsed right now: before text in paragraphs (specifically, media) are parsed.\n *\n * @type {Resolver}\n */\nfunction resolveContent(events) {\n  subtokenize(events)\n  return events\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeContent(effects, ok) {\n  /** @type {Token | undefined} */\n  let previous\n  return chunkStart\n\n  /**\n   * Before a content chunk.\n   *\n   * ```markdown\n   * > | abc\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function chunkStart(code) {\n    effects.enter('content')\n    previous = effects.enter('chunkContent', {\n      contentType: 'content'\n    })\n    return chunkInside(code)\n  }\n\n  /**\n   * In a content chunk.\n   *\n   * ```markdown\n   * > | abc\n   *     ^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function chunkInside(code) {\n    if (code === null) {\n      return contentEnd(code)\n    }\n\n    // To do: in `markdown-rs`, each line is parsed on its own, and everything\n    // is stitched together resolving.\n    if (markdownLineEnding(code)) {\n      return effects.check(\n        continuationConstruct,\n        contentContinue,\n        contentEnd\n      )(code)\n    }\n\n    // Data.\n    effects.consume(code)\n    return chunkInside\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function contentEnd(code) {\n    effects.exit('chunkContent')\n    effects.exit('content')\n    return ok(code)\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function contentContinue(code) {\n    effects.consume(code)\n    effects.exit('chunkContent')\n    previous.next = effects.enter('chunkContent', {\n      contentType: 'content',\n      previous\n    })\n    previous = previous.next\n    return chunkInside\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeContinuation(effects, ok, nok) {\n  const self = this\n  return startLookahead\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function startLookahead(code) {\n    effects.exit('chunkContent')\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return factorySpace(effects, prefixed, 'linePrefix')\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function prefixed(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return nok(code)\n    }\n\n    // Always populated by defaults.\n\n    const tail = self.events[self.events.length - 1]\n    if (\n      !self.parser.constructs.disable.null.includes('codeIndented') &&\n      tail &&\n      tail[1].type === 'linePrefix' &&\n      tail[2].sliceSerialize(tail[1], true).length >= 4\n    ) {\n      return ok(code)\n    }\n    return effects.interrupt(self.parser.constructs.flow, nok, ok)(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').Initializer} Initializer\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n */\n\nimport {blankLine, content} from 'micromark-core-commonmark'\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\n/** @type {InitialConstruct} */\nexport const flow = {\n  tokenize: initializeFlow\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Initializer}\n */\nfunction initializeFlow(effects) {\n  const self = this\n  const initial = effects.attempt(\n    // Try to parse a blank line.\n    blankLine,\n    atBlankEnding,\n    // Try to parse initial flow (essentially, only code).\n    effects.attempt(\n      this.parser.constructs.flowInitial,\n      afterConstruct,\n      factorySpace(\n        effects,\n        effects.attempt(\n          this.parser.constructs.flow,\n          afterConstruct,\n          effects.attempt(content, afterConstruct)\n        ),\n        'linePrefix'\n      )\n    )\n  )\n  return initial\n\n  /** @type {State} */\n  function atBlankEnding(code) {\n    if (code === null) {\n      effects.consume(code)\n      return\n    }\n    effects.enter('lineEndingBlank')\n    effects.consume(code)\n    effects.exit('lineEndingBlank')\n    self.currentConstruct = undefined\n    return initial\n  }\n\n  /** @type {State} */\n  function afterConstruct(code) {\n    if (code === null) {\n      effects.consume(code)\n      return\n    }\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    self.currentConstruct = undefined\n    return initial\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').Initializer} Initializer\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n */\n\nexport const resolver = {\n  resolveAll: createResolver()\n}\nexport const string = initializeFactory('string')\nexport const text = initializeFactory('text')\n\n/**\n * @param {'string' | 'text'} field\n * @returns {InitialConstruct}\n */\nfunction initializeFactory(field) {\n  return {\n    tokenize: initializeText,\n    resolveAll: createResolver(\n      field === 'text' ? resolveAllLineSuffixes : undefined\n    )\n  }\n\n  /**\n   * @this {TokenizeContext}\n   * @type {Initializer}\n   */\n  function initializeText(effects) {\n    const self = this\n    const constructs = this.parser.constructs[field]\n    const text = effects.attempt(constructs, start, notText)\n    return start\n\n    /** @type {State} */\n    function start(code) {\n      return atBreak(code) ? text(code) : notText(code)\n    }\n\n    /** @type {State} */\n    function notText(code) {\n      if (code === null) {\n        effects.consume(code)\n        return\n      }\n      effects.enter('data')\n      effects.consume(code)\n      return data\n    }\n\n    /** @type {State} */\n    function data(code) {\n      if (atBreak(code)) {\n        effects.exit('data')\n        return text(code)\n      }\n\n      // Data.\n      effects.consume(code)\n      return data\n    }\n\n    /**\n     * @param {Code} code\n     * @returns {boolean}\n     */\n    function atBreak(code) {\n      if (code === null) {\n        return true\n      }\n      const list = constructs[code]\n      let index = -1\n      if (list) {\n        // Always populated by defaults.\n\n        while (++index < list.length) {\n          const item = list[index]\n          if (!item.previous || item.previous.call(self, self.previous)) {\n            return true\n          }\n        }\n      }\n      return false\n    }\n  }\n}\n\n/**\n * @param {Resolver | undefined} [extraResolver]\n * @returns {Resolver}\n */\nfunction createResolver(extraResolver) {\n  return resolveAllText\n\n  /** @type {Resolver} */\n  function resolveAllText(events, context) {\n    let index = -1\n    /** @type {number | undefined} */\n    let enter\n\n    // A rather boring computation (to merge adjacent `data` events) which\n    // improves mm performance by 29%.\n    while (++index <= events.length) {\n      if (enter === undefined) {\n        if (events[index] && events[index][1].type === 'data') {\n          enter = index\n          index++\n        }\n      } else if (!events[index] || events[index][1].type !== 'data') {\n        // Don’t do anything if there is one data token.\n        if (index !== enter + 2) {\n          events[enter][1].end = events[index - 1][1].end\n          events.splice(enter + 2, index - enter - 2)\n          index = enter + 2\n        }\n        enter = undefined\n      }\n    }\n    return extraResolver ? extraResolver(events, context) : events\n  }\n}\n\n/**\n * A rather ugly set of instructions which again looks at chunks in the input\n * stream.\n * The reason to do this here is that it is *much* faster to parse in reverse.\n * And that we can’t hook into `null` to split the line suffix before an EOF.\n * To do: figure out if we can make this into a clean utility, or even in core.\n * As it will be useful for GFMs literal autolink extension (and maybe even\n * tables?)\n *\n * @type {Resolver}\n */\nfunction resolveAllLineSuffixes(events, context) {\n  let eventIndex = 0 // Skip first.\n\n  while (++eventIndex <= events.length) {\n    if (\n      (eventIndex === events.length ||\n        events[eventIndex][1].type === 'lineEnding') &&\n      events[eventIndex - 1][1].type === 'data'\n    ) {\n      const data = events[eventIndex - 1][1]\n      const chunks = context.sliceStream(data)\n      let index = chunks.length\n      let bufferIndex = -1\n      let size = 0\n      /** @type {boolean | undefined} */\n      let tabs\n      while (index--) {\n        const chunk = chunks[index]\n        if (typeof chunk === 'string') {\n          bufferIndex = chunk.length\n          while (chunk.charCodeAt(bufferIndex - 1) === 32) {\n            size++\n            bufferIndex--\n          }\n          if (bufferIndex) break\n          bufferIndex = -1\n        }\n        // Number\n        else if (chunk === -2) {\n          tabs = true\n          size++\n        } else if (chunk === -1) {\n          // Empty\n        } else {\n          // Replacement character, exit.\n          index++\n          break\n        }\n      }\n      if (size) {\n        const token = {\n          type:\n            eventIndex === events.length || tabs || size < 2\n              ? 'lineSuffix'\n              : 'hardBreakTrailing',\n          start: {\n            line: data.end.line,\n            column: data.end.column - size,\n            offset: data.end.offset - size,\n            _index: data.start._index + index,\n            _bufferIndex: index\n              ? bufferIndex\n              : data.start._bufferIndex + bufferIndex\n          },\n          end: Object.assign({}, data.end)\n        }\n        data.end = Object.assign({}, token.start)\n        if (data.start.offset === data.end.offset) {\n          Object.assign(data, token)\n        } else {\n          events.splice(\n            eventIndex,\n            0,\n            ['enter', token, context],\n            ['exit', token, context]\n          )\n          eventIndex += 2\n        }\n      }\n      eventIndex++\n    }\n  }\n  return events\n}\n","/**\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n */\n\n/**\n * Call all `resolveAll`s.\n *\n * @param {Array<{resolveAll?: Resolver | undefined}>} constructs\n *   List of constructs, optionally with `resolveAll`s.\n * @param {Array<Event>} events\n *   List of events.\n * @param {TokenizeContext} context\n *   Context used by `tokenize`.\n * @returns {Array<Event>}\n *   Changed events.\n */\nexport function resolveAll(constructs, events, context) {\n  /** @type {Array<Resolver>} */\n  const called = []\n  let index = -1\n\n  while (++index < constructs.length) {\n    const resolve = constructs[index].resolveAll\n\n    if (resolve && !called.includes(resolve)) {\n      events = resolve(events, context)\n      called.push(resolve)\n    }\n  }\n\n  return events\n}\n","/**\n * @typedef {import('micromark-util-types').Chunk} Chunk\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').ConstructRecord} ConstructRecord\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').ParseContext} ParseContext\n * @typedef {import('micromark-util-types').Point} Point\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenType} TokenType\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n */\n\n/**\n * @callback Restore\n * @returns {undefined}\n *\n * @typedef Info\n * @property {Restore} restore\n * @property {number} from\n *\n * @callback ReturnHandle\n *   Handle a successful run.\n * @param {Construct} construct\n * @param {Info} info\n * @returns {undefined}\n */\n\nimport {markdownLineEnding} from 'micromark-util-character'\nimport {push, splice} from 'micromark-util-chunked'\nimport {resolveAll} from 'micromark-util-resolve-all'\n/**\n * Create a tokenizer.\n * Tokenizers deal with one type of data (e.g., containers, flow, text).\n * The parser is the object dealing with it all.\n * `initialize` works like other constructs, except that only its `tokenize`\n * function is used, in which case it doesn’t receive an `ok` or `nok`.\n * `from` can be given to set the point before the first character, although\n * when further lines are indented, they must be set with `defineSkip`.\n *\n * @param {ParseContext} parser\n * @param {InitialConstruct} initialize\n * @param {Omit<Point, '_bufferIndex' | '_index'> | undefined} [from]\n * @returns {TokenizeContext}\n */\nexport function createTokenizer(parser, initialize, from) {\n  /** @type {Point} */\n  let point = Object.assign(\n    from\n      ? Object.assign({}, from)\n      : {\n          line: 1,\n          column: 1,\n          offset: 0\n        },\n    {\n      _index: 0,\n      _bufferIndex: -1\n    }\n  )\n  /** @type {Record<string, number>} */\n  const columnStart = {}\n  /** @type {Array<Construct>} */\n  const resolveAllConstructs = []\n  /** @type {Array<Chunk>} */\n  let chunks = []\n  /** @type {Array<Token>} */\n  let stack = []\n  /** @type {boolean | undefined} */\n  let consumed = true\n\n  /**\n   * Tools used for tokenizing.\n   *\n   * @type {Effects}\n   */\n  const effects = {\n    consume,\n    enter,\n    exit,\n    attempt: constructFactory(onsuccessfulconstruct),\n    check: constructFactory(onsuccessfulcheck),\n    interrupt: constructFactory(onsuccessfulcheck, {\n      interrupt: true\n    })\n  }\n\n  /**\n   * State and tools for resolving and serializing.\n   *\n   * @type {TokenizeContext}\n   */\n  const context = {\n    previous: null,\n    code: null,\n    containerState: {},\n    events: [],\n    parser,\n    sliceStream,\n    sliceSerialize,\n    now,\n    defineSkip,\n    write\n  }\n\n  /**\n   * The state function.\n   *\n   * @type {State | undefined}\n   */\n  let state = initialize.tokenize.call(context, effects)\n\n  /**\n   * Track which character we expect to be consumed, to catch bugs.\n   *\n   * @type {Code}\n   */\n  let expectedCode\n  if (initialize.resolveAll) {\n    resolveAllConstructs.push(initialize)\n  }\n  return context\n\n  /** @type {TokenizeContext['write']} */\n  function write(slice) {\n    chunks = push(chunks, slice)\n    main()\n\n    // Exit if we’re not done, resolve might change stuff.\n    if (chunks[chunks.length - 1] !== null) {\n      return []\n    }\n    addResult(initialize, 0)\n\n    // Otherwise, resolve, and exit.\n    context.events = resolveAll(resolveAllConstructs, context.events, context)\n    return context.events\n  }\n\n  //\n  // Tools.\n  //\n\n  /** @type {TokenizeContext['sliceSerialize']} */\n  function sliceSerialize(token, expandTabs) {\n    return serializeChunks(sliceStream(token), expandTabs)\n  }\n\n  /** @type {TokenizeContext['sliceStream']} */\n  function sliceStream(token) {\n    return sliceChunks(chunks, token)\n  }\n\n  /** @type {TokenizeContext['now']} */\n  function now() {\n    // This is a hot path, so we clone manually instead of `Object.assign({}, point)`\n    const {line, column, offset, _index, _bufferIndex} = point\n    return {\n      line,\n      column,\n      offset,\n      _index,\n      _bufferIndex\n    }\n  }\n\n  /** @type {TokenizeContext['defineSkip']} */\n  function defineSkip(value) {\n    columnStart[value.line] = value.column\n    accountForPotentialSkip()\n  }\n\n  //\n  // State management.\n  //\n\n  /**\n   * Main loop (note that `_index` and `_bufferIndex` in `point` are modified by\n   * `consume`).\n   * Here is where we walk through the chunks, which either include strings of\n   * several characters, or numerical character codes.\n   * The reason to do this in a loop instead of a call is so the stack can\n   * drain.\n   *\n   * @returns {undefined}\n   */\n  function main() {\n    /** @type {number} */\n    let chunkIndex\n    while (point._index < chunks.length) {\n      const chunk = chunks[point._index]\n\n      // If we’re in a buffer chunk, loop through it.\n      if (typeof chunk === 'string') {\n        chunkIndex = point._index\n        if (point._bufferIndex < 0) {\n          point._bufferIndex = 0\n        }\n        while (\n          point._index === chunkIndex &&\n          point._bufferIndex < chunk.length\n        ) {\n          go(chunk.charCodeAt(point._bufferIndex))\n        }\n      } else {\n        go(chunk)\n      }\n    }\n  }\n\n  /**\n   * Deal with one code.\n   *\n   * @param {Code} code\n   * @returns {undefined}\n   */\n  function go(code) {\n    consumed = undefined\n    expectedCode = code\n    state = state(code)\n  }\n\n  /** @type {Effects['consume']} */\n  function consume(code) {\n    if (markdownLineEnding(code)) {\n      point.line++\n      point.column = 1\n      point.offset += code === -3 ? 2 : 1\n      accountForPotentialSkip()\n    } else if (code !== -1) {\n      point.column++\n      point.offset++\n    }\n\n    // Not in a string chunk.\n    if (point._bufferIndex < 0) {\n      point._index++\n    } else {\n      point._bufferIndex++\n\n      // At end of string chunk.\n      // @ts-expect-error Points w/ non-negative `_bufferIndex` reference\n      // strings.\n      if (point._bufferIndex === chunks[point._index].length) {\n        point._bufferIndex = -1\n        point._index++\n      }\n    }\n\n    // Expose the previous character.\n    context.previous = code\n\n    // Mark as consumed.\n    consumed = true\n  }\n\n  /** @type {Effects['enter']} */\n  function enter(type, fields) {\n    /** @type {Token} */\n    // @ts-expect-error Patch instead of assign required fields to help GC.\n    const token = fields || {}\n    token.type = type\n    token.start = now()\n    context.events.push(['enter', token, context])\n    stack.push(token)\n    return token\n  }\n\n  /** @type {Effects['exit']} */\n  function exit(type) {\n    const token = stack.pop()\n    token.end = now()\n    context.events.push(['exit', token, context])\n    return token\n  }\n\n  /**\n   * Use results.\n   *\n   * @type {ReturnHandle}\n   */\n  function onsuccessfulconstruct(construct, info) {\n    addResult(construct, info.from)\n  }\n\n  /**\n   * Discard results.\n   *\n   * @type {ReturnHandle}\n   */\n  function onsuccessfulcheck(_, info) {\n    info.restore()\n  }\n\n  /**\n   * Factory to attempt/check/interrupt.\n   *\n   * @param {ReturnHandle} onreturn\n   * @param {{interrupt?: boolean | undefined} | undefined} [fields]\n   */\n  function constructFactory(onreturn, fields) {\n    return hook\n\n    /**\n     * Handle either an object mapping codes to constructs, a list of\n     * constructs, or a single construct.\n     *\n     * @param {Array<Construct> | Construct | ConstructRecord} constructs\n     * @param {State} returnState\n     * @param {State | undefined} [bogusState]\n     * @returns {State}\n     */\n    function hook(constructs, returnState, bogusState) {\n      /** @type {Array<Construct>} */\n      let listOfConstructs\n      /** @type {number} */\n      let constructIndex\n      /** @type {Construct} */\n      let currentConstruct\n      /** @type {Info} */\n      let info\n      return Array.isArray(constructs) /* c8 ignore next 1 */\n        ? handleListOfConstructs(constructs)\n        : 'tokenize' in constructs\n        ? // @ts-expect-error Looks like a construct.\n          handleListOfConstructs([constructs])\n        : handleMapOfConstructs(constructs)\n\n      /**\n       * Handle a list of construct.\n       *\n       * @param {ConstructRecord} map\n       * @returns {State}\n       */\n      function handleMapOfConstructs(map) {\n        return start\n\n        /** @type {State} */\n        function start(code) {\n          const def = code !== null && map[code]\n          const all = code !== null && map.null\n          const list = [\n            // To do: add more extension tests.\n            /* c8 ignore next 2 */\n            ...(Array.isArray(def) ? def : def ? [def] : []),\n            ...(Array.isArray(all) ? all : all ? [all] : [])\n          ]\n          return handleListOfConstructs(list)(code)\n        }\n      }\n\n      /**\n       * Handle a list of construct.\n       *\n       * @param {Array<Construct>} list\n       * @returns {State}\n       */\n      function handleListOfConstructs(list) {\n        listOfConstructs = list\n        constructIndex = 0\n        if (list.length === 0) {\n          return bogusState\n        }\n        return handleConstruct(list[constructIndex])\n      }\n\n      /**\n       * Handle a single construct.\n       *\n       * @param {Construct} construct\n       * @returns {State}\n       */\n      function handleConstruct(construct) {\n        return start\n\n        /** @type {State} */\n        function start(code) {\n          // To do: not needed to store if there is no bogus state, probably?\n          // Currently doesn’t work because `inspect` in document does a check\n          // w/o a bogus, which doesn’t make sense. But it does seem to help perf\n          // by not storing.\n          info = store()\n          currentConstruct = construct\n          if (!construct.partial) {\n            context.currentConstruct = construct\n          }\n\n          // Always populated by defaults.\n\n          if (\n            construct.name &&\n            context.parser.constructs.disable.null.includes(construct.name)\n          ) {\n            return nok(code)\n          }\n          return construct.tokenize.call(\n            // If we do have fields, create an object w/ `context` as its\n            // prototype.\n            // This allows a “live binding”, which is needed for `interrupt`.\n            fields ? Object.assign(Object.create(context), fields) : context,\n            effects,\n            ok,\n            nok\n          )(code)\n        }\n      }\n\n      /** @type {State} */\n      function ok(code) {\n        consumed = true\n        onreturn(currentConstruct, info)\n        return returnState\n      }\n\n      /** @type {State} */\n      function nok(code) {\n        consumed = true\n        info.restore()\n        if (++constructIndex < listOfConstructs.length) {\n          return handleConstruct(listOfConstructs[constructIndex])\n        }\n        return bogusState\n      }\n    }\n  }\n\n  /**\n   * @param {Construct} construct\n   * @param {number} from\n   * @returns {undefined}\n   */\n  function addResult(construct, from) {\n    if (construct.resolveAll && !resolveAllConstructs.includes(construct)) {\n      resolveAllConstructs.push(construct)\n    }\n    if (construct.resolve) {\n      splice(\n        context.events,\n        from,\n        context.events.length - from,\n        construct.resolve(context.events.slice(from), context)\n      )\n    }\n    if (construct.resolveTo) {\n      context.events = construct.resolveTo(context.events, context)\n    }\n  }\n\n  /**\n   * Store state.\n   *\n   * @returns {Info}\n   */\n  function store() {\n    const startPoint = now()\n    const startPrevious = context.previous\n    const startCurrentConstruct = context.currentConstruct\n    const startEventsIndex = context.events.length\n    const startStack = Array.from(stack)\n    return {\n      restore,\n      from: startEventsIndex\n    }\n\n    /**\n     * Restore state.\n     *\n     * @returns {undefined}\n     */\n    function restore() {\n      point = startPoint\n      context.previous = startPrevious\n      context.currentConstruct = startCurrentConstruct\n      context.events.length = startEventsIndex\n      stack = startStack\n      accountForPotentialSkip()\n    }\n  }\n\n  /**\n   * Move the current point a bit forward in the line when it’s on a column\n   * skip.\n   *\n   * @returns {undefined}\n   */\n  function accountForPotentialSkip() {\n    if (point.line in columnStart && point.column < 2) {\n      point.column = columnStart[point.line]\n      point.offset += columnStart[point.line] - 1\n    }\n  }\n}\n\n/**\n * Get the chunks from a slice of chunks in the range of a token.\n *\n * @param {Array<Chunk>} chunks\n * @param {Pick<Token, 'end' | 'start'>} token\n * @returns {Array<Chunk>}\n */\nfunction sliceChunks(chunks, token) {\n  const startIndex = token.start._index\n  const startBufferIndex = token.start._bufferIndex\n  const endIndex = token.end._index\n  const endBufferIndex = token.end._bufferIndex\n  /** @type {Array<Chunk>} */\n  let view\n  if (startIndex === endIndex) {\n    // @ts-expect-error `_bufferIndex` is used on string chunks.\n    view = [chunks[startIndex].slice(startBufferIndex, endBufferIndex)]\n  } else {\n    view = chunks.slice(startIndex, endIndex)\n    if (startBufferIndex > -1) {\n      const head = view[0]\n      if (typeof head === 'string') {\n        view[0] = head.slice(startBufferIndex)\n      } else {\n        view.shift()\n      }\n    }\n    if (endBufferIndex > 0) {\n      // @ts-expect-error `_bufferIndex` is used on string chunks.\n      view.push(chunks[endIndex].slice(0, endBufferIndex))\n    }\n  }\n  return view\n}\n\n/**\n * Get the string value of a slice of chunks.\n *\n * @param {Array<Chunk>} chunks\n * @param {boolean | undefined} [expandTabs=false]\n * @returns {string}\n */\nfunction serializeChunks(chunks, expandTabs) {\n  let index = -1\n  /** @type {Array<string>} */\n  const result = []\n  /** @type {boolean | undefined} */\n  let atTab\n  while (++index < chunks.length) {\n    const chunk = chunks[index]\n    /** @type {string} */\n    let value\n    if (typeof chunk === 'string') {\n      value = chunk\n    } else\n      switch (chunk) {\n        case -5: {\n          value = '\\r'\n          break\n        }\n        case -4: {\n          value = '\\n'\n          break\n        }\n        case -3: {\n          value = '\\r' + '\\n'\n          break\n        }\n        case -2: {\n          value = expandTabs ? ' ' : '\\t'\n          break\n        }\n        case -1: {\n          if (!expandTabs && atTab) continue\n          value = ' '\n          break\n        }\n        default: {\n          // Currently only replacement character.\n          value = String.fromCharCode(chunk)\n        }\n      }\n    atTab = chunk === -2\n    result.push(value)\n  }\n  return result.join('')\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\n/** @type {Construct} */\nexport const thematicBreak = {\n  name: 'thematicBreak',\n  tokenize: tokenizeThematicBreak\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeThematicBreak(effects, ok, nok) {\n  let size = 0\n  /** @type {NonNullable<Code>} */\n  let marker\n  return start\n\n  /**\n   * Start of thematic break.\n   *\n   * ```markdown\n   * > | ***\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('thematicBreak')\n    // To do: parse indent like `markdown-rs`.\n    return before(code)\n  }\n\n  /**\n   * After optional whitespace, at marker.\n   *\n   * ```markdown\n   * > | ***\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    marker = code\n    return atBreak(code)\n  }\n\n  /**\n   * After something, before something else.\n   *\n   * ```markdown\n   * > | ***\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (code === marker) {\n      effects.enter('thematicBreakSequence')\n      return sequence(code)\n    }\n    if (size >= 3 && (code === null || markdownLineEnding(code))) {\n      effects.exit('thematicBreak')\n      return ok(code)\n    }\n    return nok(code)\n  }\n\n  /**\n   * In sequence.\n   *\n   * ```markdown\n   * > | ***\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequence(code) {\n    if (code === marker) {\n      effects.consume(code)\n      size++\n      return sequence\n    }\n    effects.exit('thematicBreakSequence')\n    return markdownSpace(code)\n      ? factorySpace(effects, atBreak, 'whitespace')(code)\n      : atBreak(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').ContainerState} ContainerState\n * @typedef {import('micromark-util-types').Exiter} Exiter\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {asciiDigit, markdownSpace} from 'micromark-util-character'\nimport {blankLine} from './blank-line.js'\nimport {thematicBreak} from './thematic-break.js'\n\n/** @type {Construct} */\nexport const list = {\n  name: 'list',\n  tokenize: tokenizeListStart,\n  continuation: {\n    tokenize: tokenizeListContinuation\n  },\n  exit: tokenizeListEnd\n}\n\n/** @type {Construct} */\nconst listItemPrefixWhitespaceConstruct = {\n  tokenize: tokenizeListItemPrefixWhitespace,\n  partial: true\n}\n\n/** @type {Construct} */\nconst indentConstruct = {\n  tokenize: tokenizeIndent,\n  partial: true\n}\n\n// To do: `markdown-rs` parses list items on their own and later stitches them\n// together.\n\n/**\n * @type {Tokenizer}\n * @this {TokenizeContext}\n */\nfunction tokenizeListStart(effects, ok, nok) {\n  const self = this\n  const tail = self.events[self.events.length - 1]\n  let initialSize =\n    tail && tail[1].type === 'linePrefix'\n      ? tail[2].sliceSerialize(tail[1], true).length\n      : 0\n  let size = 0\n  return start\n\n  /** @type {State} */\n  function start(code) {\n    const kind =\n      self.containerState.type ||\n      (code === 42 || code === 43 || code === 45\n        ? 'listUnordered'\n        : 'listOrdered')\n    if (\n      kind === 'listUnordered'\n        ? !self.containerState.marker || code === self.containerState.marker\n        : asciiDigit(code)\n    ) {\n      if (!self.containerState.type) {\n        self.containerState.type = kind\n        effects.enter(kind, {\n          _container: true\n        })\n      }\n      if (kind === 'listUnordered') {\n        effects.enter('listItemPrefix')\n        return code === 42 || code === 45\n          ? effects.check(thematicBreak, nok, atMarker)(code)\n          : atMarker(code)\n      }\n      if (!self.interrupt || code === 49) {\n        effects.enter('listItemPrefix')\n        effects.enter('listItemValue')\n        return inside(code)\n      }\n    }\n    return nok(code)\n  }\n\n  /** @type {State} */\n  function inside(code) {\n    if (asciiDigit(code) && ++size < 10) {\n      effects.consume(code)\n      return inside\n    }\n    if (\n      (!self.interrupt || size < 2) &&\n      (self.containerState.marker\n        ? code === self.containerState.marker\n        : code === 41 || code === 46)\n    ) {\n      effects.exit('listItemValue')\n      return atMarker(code)\n    }\n    return nok(code)\n  }\n\n  /**\n   * @type {State}\n   **/\n  function atMarker(code) {\n    effects.enter('listItemMarker')\n    effects.consume(code)\n    effects.exit('listItemMarker')\n    self.containerState.marker = self.containerState.marker || code\n    return effects.check(\n      blankLine,\n      // Can’t be empty when interrupting.\n      self.interrupt ? nok : onBlank,\n      effects.attempt(\n        listItemPrefixWhitespaceConstruct,\n        endOfPrefix,\n        otherPrefix\n      )\n    )\n  }\n\n  /** @type {State} */\n  function onBlank(code) {\n    self.containerState.initialBlankLine = true\n    initialSize++\n    return endOfPrefix(code)\n  }\n\n  /** @type {State} */\n  function otherPrefix(code) {\n    if (markdownSpace(code)) {\n      effects.enter('listItemPrefixWhitespace')\n      effects.consume(code)\n      effects.exit('listItemPrefixWhitespace')\n      return endOfPrefix\n    }\n    return nok(code)\n  }\n\n  /** @type {State} */\n  function endOfPrefix(code) {\n    self.containerState.size =\n      initialSize +\n      self.sliceSerialize(effects.exit('listItemPrefix'), true).length\n    return ok(code)\n  }\n}\n\n/**\n * @type {Tokenizer}\n * @this {TokenizeContext}\n */\nfunction tokenizeListContinuation(effects, ok, nok) {\n  const self = this\n  self.containerState._closeFlow = undefined\n  return effects.check(blankLine, onBlank, notBlank)\n\n  /** @type {State} */\n  function onBlank(code) {\n    self.containerState.furtherBlankLines =\n      self.containerState.furtherBlankLines ||\n      self.containerState.initialBlankLine\n\n    // We have a blank line.\n    // Still, try to consume at most the items size.\n    return factorySpace(\n      effects,\n      ok,\n      'listItemIndent',\n      self.containerState.size + 1\n    )(code)\n  }\n\n  /** @type {State} */\n  function notBlank(code) {\n    if (self.containerState.furtherBlankLines || !markdownSpace(code)) {\n      self.containerState.furtherBlankLines = undefined\n      self.containerState.initialBlankLine = undefined\n      return notInCurrentItem(code)\n    }\n    self.containerState.furtherBlankLines = undefined\n    self.containerState.initialBlankLine = undefined\n    return effects.attempt(indentConstruct, ok, notInCurrentItem)(code)\n  }\n\n  /** @type {State} */\n  function notInCurrentItem(code) {\n    // While we do continue, we signal that the flow should be closed.\n    self.containerState._closeFlow = true\n    // As we’re closing flow, we’re no longer interrupting.\n    self.interrupt = undefined\n    // Always populated by defaults.\n\n    return factorySpace(\n      effects,\n      effects.attempt(list, ok, nok),\n      'linePrefix',\n      self.parser.constructs.disable.null.includes('codeIndented')\n        ? undefined\n        : 4\n    )(code)\n  }\n}\n\n/**\n * @type {Tokenizer}\n * @this {TokenizeContext}\n */\nfunction tokenizeIndent(effects, ok, nok) {\n  const self = this\n  return factorySpace(\n    effects,\n    afterPrefix,\n    'listItemIndent',\n    self.containerState.size + 1\n  )\n\n  /** @type {State} */\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1]\n    return tail &&\n      tail[1].type === 'listItemIndent' &&\n      tail[2].sliceSerialize(tail[1], true).length === self.containerState.size\n      ? ok(code)\n      : nok(code)\n  }\n}\n\n/**\n * @type {Exiter}\n * @this {TokenizeContext}\n */\nfunction tokenizeListEnd(effects) {\n  effects.exit(this.containerState.type)\n}\n\n/**\n * @type {Tokenizer}\n * @this {TokenizeContext}\n */\nfunction tokenizeListItemPrefixWhitespace(effects, ok, nok) {\n  const self = this\n\n  // Always populated by defaults.\n\n  return factorySpace(\n    effects,\n    afterPrefix,\n    'listItemPrefixWhitespace',\n    self.parser.constructs.disable.null.includes('codeIndented')\n      ? undefined\n      : 4 + 1\n  )\n\n  /** @type {State} */\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1]\n    return !markdownSpace(code) &&\n      tail &&\n      tail[1].type === 'listItemPrefixWhitespace'\n      ? ok(code)\n      : nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Exiter} Exiter\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownSpace} from 'micromark-util-character'\n/** @type {Construct} */\nexport const blockQuote = {\n  name: 'blockQuote',\n  tokenize: tokenizeBlockQuoteStart,\n  continuation: {\n    tokenize: tokenizeBlockQuoteContinuation\n  },\n  exit\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeBlockQuoteStart(effects, ok, nok) {\n  const self = this\n  return start\n\n  /**\n   * Start of block quote.\n   *\n   * ```markdown\n   * > | > a\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (code === 62) {\n      const state = self.containerState\n      if (!state.open) {\n        effects.enter('blockQuote', {\n          _container: true\n        })\n        state.open = true\n      }\n      effects.enter('blockQuotePrefix')\n      effects.enter('blockQuoteMarker')\n      effects.consume(code)\n      effects.exit('blockQuoteMarker')\n      return after\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `>`, before optional whitespace.\n   *\n   * ```markdown\n   * > | > a\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    if (markdownSpace(code)) {\n      effects.enter('blockQuotePrefixWhitespace')\n      effects.consume(code)\n      effects.exit('blockQuotePrefixWhitespace')\n      effects.exit('blockQuotePrefix')\n      return ok\n    }\n    effects.exit('blockQuotePrefix')\n    return ok(code)\n  }\n}\n\n/**\n * Start of block quote continuation.\n *\n * ```markdown\n *   | > a\n * > | > b\n *     ^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeBlockQuoteContinuation(effects, ok, nok) {\n  const self = this\n  return contStart\n\n  /**\n   * Start of block quote continuation.\n   *\n   * Also used to parse the first block quote opening.\n   *\n   * ```markdown\n   *   | > a\n   * > | > b\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function contStart(code) {\n    if (markdownSpace(code)) {\n      // Always populated by defaults.\n\n      return factorySpace(\n        effects,\n        contBefore,\n        'linePrefix',\n        self.parser.constructs.disable.null.includes('codeIndented')\n          ? undefined\n          : 4\n      )(code)\n    }\n    return contBefore(code)\n  }\n\n  /**\n   * At `>`, after optional whitespace.\n   *\n   * Also used to parse the first block quote opening.\n   *\n   * ```markdown\n   *   | > a\n   * > | > b\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function contBefore(code) {\n    return effects.attempt(blockQuote, ok, nok)(code)\n  }\n}\n\n/** @type {Exiter} */\nfunction exit(effects) {\n  effects.exit('blockQuote')\n}\n","/**\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenType} TokenType\n */\n\nimport {\n  asciiControl,\n  markdownLineEndingOrSpace,\n  markdownLineEnding\n} from 'micromark-util-character'\n/**\n * Parse destinations.\n *\n * ###### Examples\n *\n * ```markdown\n * <a>\n * <a\\>b>\n * <a b>\n * <a)>\n * a\n * a\\)b\n * a(b)c\n * a(b)\n * ```\n *\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @param {State} nok\n *   State switched to when unsuccessful.\n * @param {TokenType} type\n *   Type for whole (`<a>` or `b`).\n * @param {TokenType} literalType\n *   Type when enclosed (`<a>`).\n * @param {TokenType} literalMarkerType\n *   Type for enclosing (`<` and `>`).\n * @param {TokenType} rawType\n *   Type when not enclosed (`b`).\n * @param {TokenType} stringType\n *   Type for the value (`a` or `b`).\n * @param {number | undefined} [max=Infinity]\n *   Depth of nested parens (inclusive).\n * @returns {State}\n *   Start state.\n */ // eslint-disable-next-line max-params\nexport function factoryDestination(\n  effects,\n  ok,\n  nok,\n  type,\n  literalType,\n  literalMarkerType,\n  rawType,\n  stringType,\n  max\n) {\n  const limit = max || Number.POSITIVE_INFINITY\n  let balance = 0\n  return start\n\n  /**\n   * Start of destination.\n   *\n   * ```markdown\n   * > | <aa>\n   *     ^\n   * > | aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (code === 60) {\n      effects.enter(type)\n      effects.enter(literalType)\n      effects.enter(literalMarkerType)\n      effects.consume(code)\n      effects.exit(literalMarkerType)\n      return enclosedBefore\n    }\n\n    // ASCII control, space, closing paren.\n    if (code === null || code === 32 || code === 41 || asciiControl(code)) {\n      return nok(code)\n    }\n    effects.enter(type)\n    effects.enter(rawType)\n    effects.enter(stringType)\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return raw(code)\n  }\n\n  /**\n   * After `<`, at an enclosed destination.\n   *\n   * ```markdown\n   * > | <aa>\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function enclosedBefore(code) {\n    if (code === 62) {\n      effects.enter(literalMarkerType)\n      effects.consume(code)\n      effects.exit(literalMarkerType)\n      effects.exit(literalType)\n      effects.exit(type)\n      return ok\n    }\n    effects.enter(stringType)\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return enclosed(code)\n  }\n\n  /**\n   * In enclosed destination.\n   *\n   * ```markdown\n   * > | <aa>\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function enclosed(code) {\n    if (code === 62) {\n      effects.exit('chunkString')\n      effects.exit(stringType)\n      return enclosedBefore(code)\n    }\n    if (code === null || code === 60 || markdownLineEnding(code)) {\n      return nok(code)\n    }\n    effects.consume(code)\n    return code === 92 ? enclosedEscape : enclosed\n  }\n\n  /**\n   * After `\\`, at a special character.\n   *\n   * ```markdown\n   * > | <a\\*a>\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function enclosedEscape(code) {\n    if (code === 60 || code === 62 || code === 92) {\n      effects.consume(code)\n      return enclosed\n    }\n    return enclosed(code)\n  }\n\n  /**\n   * In raw destination.\n   *\n   * ```markdown\n   * > | aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function raw(code) {\n    if (\n      !balance &&\n      (code === null || code === 41 || markdownLineEndingOrSpace(code))\n    ) {\n      effects.exit('chunkString')\n      effects.exit(stringType)\n      effects.exit(rawType)\n      effects.exit(type)\n      return ok(code)\n    }\n    if (balance < limit && code === 40) {\n      effects.consume(code)\n      balance++\n      return raw\n    }\n    if (code === 41) {\n      effects.consume(code)\n      balance--\n      return raw\n    }\n\n    // ASCII control (but *not* `\\0`) and space and `(`.\n    // Note: in `markdown-rs`, `\\0` exists in codes, in `micromark-js` it\n    // doesn’t.\n    if (code === null || code === 32 || code === 40 || asciiControl(code)) {\n      return nok(code)\n    }\n    effects.consume(code)\n    return code === 92 ? rawEscape : raw\n  }\n\n  /**\n   * After `\\`, at special character.\n   *\n   * ```markdown\n   * > | a\\*a\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function rawEscape(code) {\n    if (code === 40 || code === 41 || code === 92) {\n      effects.consume(code)\n      return raw\n    }\n    return raw(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').TokenType} TokenType\n */\n\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\n/**\n * Parse labels.\n *\n * > 👉 **Note**: labels in markdown are capped at 999 characters in the string.\n *\n * ###### Examples\n *\n * ```markdown\n * [a]\n * [a\n * b]\n * [a\\]b]\n * ```\n *\n * @this {TokenizeContext}\n *   Tokenize context.\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @param {State} nok\n *   State switched to when unsuccessful.\n * @param {TokenType} type\n *   Type of the whole label (`[a]`).\n * @param {TokenType} markerType\n *   Type for the markers (`[` and `]`).\n * @param {TokenType} stringType\n *   Type for the identifier (`a`).\n * @returns {State}\n *   Start state.\n */ // eslint-disable-next-line max-params\nexport function factoryLabel(effects, ok, nok, type, markerType, stringType) {\n  const self = this\n  let size = 0\n  /** @type {boolean} */\n  let seen\n  return start\n\n  /**\n   * Start of label.\n   *\n   * ```markdown\n   * > | [a]\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(type)\n    effects.enter(markerType)\n    effects.consume(code)\n    effects.exit(markerType)\n    effects.enter(stringType)\n    return atBreak\n  }\n\n  /**\n   * In label, at something, before something else.\n   *\n   * ```markdown\n   * > | [a]\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (\n      size > 999 ||\n      code === null ||\n      code === 91 ||\n      (code === 93 && !seen) ||\n      // To do: remove in the future once we’ve switched from\n      // `micromark-extension-footnote` to `micromark-extension-gfm-footnote`,\n      // which doesn’t need this.\n      // Hidden footnotes hook.\n      /* c8 ignore next 3 */\n      (code === 94 &&\n        !size &&\n        '_hiddenFootnoteSupport' in self.parser.constructs)\n    ) {\n      return nok(code)\n    }\n    if (code === 93) {\n      effects.exit(stringType)\n      effects.enter(markerType)\n      effects.consume(code)\n      effects.exit(markerType)\n      effects.exit(type)\n      return ok\n    }\n\n    // To do: indent? Link chunks and EOLs together?\n    if (markdownLineEnding(code)) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return atBreak\n    }\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return labelInside(code)\n  }\n\n  /**\n   * In label, in text.\n   *\n   * ```markdown\n   * > | [a]\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelInside(code) {\n    if (\n      code === null ||\n      code === 91 ||\n      code === 93 ||\n      markdownLineEnding(code) ||\n      size++ > 999\n    ) {\n      effects.exit('chunkString')\n      return atBreak(code)\n    }\n    effects.consume(code)\n    if (!seen) seen = !markdownSpace(code)\n    return code === 92 ? labelEscape : labelInside\n  }\n\n  /**\n   * After `\\`, at a special character.\n   *\n   * ```markdown\n   * > | [a\\*a]\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelEscape(code) {\n    if (code === 91 || code === 92 || code === 93) {\n      effects.consume(code)\n      size++\n      return labelInside\n    }\n    return labelInside(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenType} TokenType\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\n/**\n * Parse titles.\n *\n * ###### Examples\n *\n * ```markdown\n * \"a\"\n * 'b'\n * (c)\n * \"a\n * b\"\n * 'a\n *     b'\n * (a\\)b)\n * ```\n *\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @param {State} nok\n *   State switched to when unsuccessful.\n * @param {TokenType} type\n *   Type of the whole title (`\"a\"`, `'b'`, `(c)`).\n * @param {TokenType} markerType\n *   Type for the markers (`\"`, `'`, `(`, and `)`).\n * @param {TokenType} stringType\n *   Type for the value (`a`).\n * @returns {State}\n *   Start state.\n */ // eslint-disable-next-line max-params\nexport function factoryTitle(effects, ok, nok, type, markerType, stringType) {\n  /** @type {NonNullable<Code>} */\n  let marker\n  return start\n\n  /**\n   * Start of title.\n   *\n   * ```markdown\n   * > | \"a\"\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (code === 34 || code === 39 || code === 40) {\n      effects.enter(type)\n      effects.enter(markerType)\n      effects.consume(code)\n      effects.exit(markerType)\n      marker = code === 40 ? 41 : code\n      return begin\n    }\n    return nok(code)\n  }\n\n  /**\n   * After opening marker.\n   *\n   * This is also used at the closing marker.\n   *\n   * ```markdown\n   * > | \"a\"\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function begin(code) {\n    if (code === marker) {\n      effects.enter(markerType)\n      effects.consume(code)\n      effects.exit(markerType)\n      effects.exit(type)\n      return ok\n    }\n    effects.enter(stringType)\n    return atBreak(code)\n  }\n\n  /**\n   * At something, before something else.\n   *\n   * ```markdown\n   * > | \"a\"\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (code === marker) {\n      effects.exit(stringType)\n      return begin(marker)\n    }\n    if (code === null) {\n      return nok(code)\n    }\n\n    // Note: blank lines can’t exist in content.\n    if (markdownLineEnding(code)) {\n      // To do: use `space_or_tab_eol_with_options`, connect.\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return factorySpace(effects, atBreak, 'linePrefix')\n    }\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return inside(code)\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    if (code === marker || code === null || markdownLineEnding(code)) {\n      effects.exit('chunkString')\n      return atBreak(code)\n    }\n    effects.consume(code)\n    return code === 92 ? escape : inside\n  }\n\n  /**\n   * After `\\`, at a special character.\n   *\n   * ```markdown\n   * > | \"a\\*b\"\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function escape(code) {\n    if (code === marker || code === 92) {\n      effects.consume(code)\n      return inside\n    }\n    return inside(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\n/**\n * Parse spaces and tabs.\n *\n * There is no `nok` parameter:\n *\n * *   line endings or spaces in markdown are often optional, in which case this\n *     factory can be used and `ok` will be switched to whether spaces were found\n *     or not\n * *   one line ending or space can be detected with\n *     `markdownLineEndingOrSpace(code)` right before using `factoryWhitespace`\n *\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @returns {State}\n *   Start state.\n */\nexport function factoryWhitespace(effects, ok) {\n  /** @type {boolean} */\n  let seen\n  return start\n\n  /** @type {State} */\n  function start(code) {\n    if (markdownLineEnding(code)) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      seen = true\n      return start\n    }\n    if (markdownSpace(code)) {\n      return factorySpace(\n        effects,\n        start,\n        seen ? 'linePrefix' : 'lineSuffix'\n      )(code)\n    }\n    return ok(code)\n  }\n}\n","/**\n * Normalize an identifier (as found in references, definitions).\n *\n * Collapses markdown whitespace, trim, and then lower- and uppercase.\n *\n * Some characters are considered “uppercase”, such as U+03F4 (`ϴ`), but if their\n * lowercase counterpart (U+03B8 (`θ`)) is uppercased will result in a different\n * uppercase character (U+0398 (`Θ`)).\n * So, to get a canonical form, we perform both lower- and uppercase.\n *\n * Using uppercase last makes sure keys will never interact with default\n * prototypal values (such as `constructor`): nothing in the prototype of\n * `Object` is uppercase.\n *\n * @param {string} value\n *   Identifier to normalize.\n * @returns {string}\n *   Normalized identifier.\n */\nexport function normalizeIdentifier(value) {\n  return (\n    value\n      // Collapse markdown whitespace.\n      .replace(/[\\t\\n\\r ]+/g, ' ')\n      // Trim.\n      .replace(/^ | $/g, '')\n      // Some characters are considered “uppercase”, but if their lowercase\n      // counterpart is uppercased will result in a different uppercase\n      // character.\n      // Hence, to get that form, we perform both lower- and uppercase.\n      // Upper case makes sure keys will not interact with default prototypal\n      // methods: no method is uppercase.\n      .toLowerCase()\n      .toUpperCase()\n  )\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factoryDestination} from 'micromark-factory-destination'\nimport {factoryLabel} from 'micromark-factory-label'\nimport {factorySpace} from 'micromark-factory-space'\nimport {factoryTitle} from 'micromark-factory-title'\nimport {factoryWhitespace} from 'micromark-factory-whitespace'\nimport {\n  markdownLineEnding,\n  markdownLineEndingOrSpace,\n  markdownSpace\n} from 'micromark-util-character'\nimport {normalizeIdentifier} from 'micromark-util-normalize-identifier'\n/** @type {Construct} */\nexport const definition = {\n  name: 'definition',\n  tokenize: tokenizeDefinition\n}\n\n/** @type {Construct} */\nconst titleBefore = {\n  tokenize: tokenizeTitleBefore,\n  partial: true\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeDefinition(effects, ok, nok) {\n  const self = this\n  /** @type {string} */\n  let identifier\n  return start\n\n  /**\n   * At start of a definition.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // Do not interrupt paragraphs (but do follow definitions).\n    // To do: do `interrupt` the way `markdown-rs` does.\n    // To do: parse whitespace the way `markdown-rs` does.\n    effects.enter('definition')\n    return before(code)\n  }\n\n  /**\n   * After optional whitespace, at `[`.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    // To do: parse whitespace the way `markdown-rs` does.\n\n    return factoryLabel.call(\n      self,\n      effects,\n      labelAfter,\n      // Note: we don’t need to reset the way `markdown-rs` does.\n      nok,\n      'definitionLabel',\n      'definitionLabelMarker',\n      'definitionLabelString'\n    )(code)\n  }\n\n  /**\n   * After label.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelAfter(code) {\n    identifier = normalizeIdentifier(\n      self.sliceSerialize(self.events[self.events.length - 1][1]).slice(1, -1)\n    )\n    if (code === 58) {\n      effects.enter('definitionMarker')\n      effects.consume(code)\n      effects.exit('definitionMarker')\n      return markerAfter\n    }\n    return nok(code)\n  }\n\n  /**\n   * After marker.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function markerAfter(code) {\n    // Note: whitespace is optional.\n    return markdownLineEndingOrSpace(code)\n      ? factoryWhitespace(effects, destinationBefore)(code)\n      : destinationBefore(code)\n  }\n\n  /**\n   * Before destination.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function destinationBefore(code) {\n    return factoryDestination(\n      effects,\n      destinationAfter,\n      // Note: we don’t need to reset the way `markdown-rs` does.\n      nok,\n      'definitionDestination',\n      'definitionDestinationLiteral',\n      'definitionDestinationLiteralMarker',\n      'definitionDestinationRaw',\n      'definitionDestinationString'\n    )(code)\n  }\n\n  /**\n   * After destination.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function destinationAfter(code) {\n    return effects.attempt(titleBefore, after, after)(code)\n  }\n\n  /**\n   * After definition.\n   *\n   * ```markdown\n   * > | [a]: b\n   *           ^\n   * > | [a]: b \"c\"\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    return markdownSpace(code)\n      ? factorySpace(effects, afterWhitespace, 'whitespace')(code)\n      : afterWhitespace(code)\n  }\n\n  /**\n   * After definition, after optional whitespace.\n   *\n   * ```markdown\n   * > | [a]: b\n   *           ^\n   * > | [a]: b \"c\"\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function afterWhitespace(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('definition')\n\n      // Note: we don’t care about uniqueness.\n      // It’s likely that that doesn’t happen very frequently.\n      // It is more likely that it wastes precious time.\n      self.parser.defined.push(identifier)\n\n      // To do: `markdown-rs` interrupt.\n      // // You’d be interrupting.\n      // tokenizer.interrupt = true\n      return ok(code)\n    }\n    return nok(code)\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeTitleBefore(effects, ok, nok) {\n  return titleBefore\n\n  /**\n   * After destination, at whitespace.\n   *\n   * ```markdown\n   * > | [a]: b\n   *           ^\n   * > | [a]: b \"c\"\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function titleBefore(code) {\n    return markdownLineEndingOrSpace(code)\n      ? factoryWhitespace(effects, beforeMarker)(code)\n      : nok(code)\n  }\n\n  /**\n   * At title.\n   *\n   * ```markdown\n   *   | [a]: b\n   * > | \"c\"\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function beforeMarker(code) {\n    return factoryTitle(\n      effects,\n      titleAfter,\n      nok,\n      'definitionTitle',\n      'definitionTitleMarker',\n      'definitionTitleString'\n    )(code)\n  }\n\n  /**\n   * After title.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function titleAfter(code) {\n    return markdownSpace(code)\n      ? factorySpace(effects, titleAfterOptionalWhitespace, 'whitespace')(code)\n      : titleAfterOptionalWhitespace(code)\n  }\n\n  /**\n   * After title, after optional whitespace.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function titleAfterOptionalWhitespace(code) {\n    return code === null || markdownLineEnding(code) ? ok(code) : nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\n/** @type {Construct} */\nexport const codeIndented = {\n  name: 'codeIndented',\n  tokenize: tokenizeCodeIndented\n}\n\n/** @type {Construct} */\nconst furtherStart = {\n  tokenize: tokenizeFurtherStart,\n  partial: true\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeCodeIndented(effects, ok, nok) {\n  const self = this\n  return start\n\n  /**\n   * Start of code (indented).\n   *\n   * > **Parsing note**: it is not needed to check if this first line is a\n   * > filled line (that it has a non-whitespace character), because blank lines\n   * > are parsed already, so we never run into that.\n   *\n   * ```markdown\n   * > |     aaa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // To do: manually check if interrupting like `markdown-rs`.\n\n    effects.enter('codeIndented')\n    // To do: use an improved `space_or_tab` function like `markdown-rs`,\n    // so that we can drop the next state.\n    return factorySpace(effects, afterPrefix, 'linePrefix', 4 + 1)(code)\n  }\n\n  /**\n   * At start, after 1 or 4 spaces.\n   *\n   * ```markdown\n   * > |     aaa\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1]\n    return tail &&\n      tail[1].type === 'linePrefix' &&\n      tail[2].sliceSerialize(tail[1], true).length >= 4\n      ? atBreak(code)\n      : nok(code)\n  }\n\n  /**\n   * At a break.\n   *\n   * ```markdown\n   * > |     aaa\n   *         ^  ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (code === null) {\n      return after(code)\n    }\n    if (markdownLineEnding(code)) {\n      return effects.attempt(furtherStart, atBreak, after)(code)\n    }\n    effects.enter('codeFlowValue')\n    return inside(code)\n  }\n\n  /**\n   * In code content.\n   *\n   * ```markdown\n   * > |     aaa\n   *         ^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('codeFlowValue')\n      return atBreak(code)\n    }\n    effects.consume(code)\n    return inside\n  }\n\n  /** @type {State} */\n  function after(code) {\n    effects.exit('codeIndented')\n    // To do: allow interrupting like `markdown-rs`.\n    // Feel free to interrupt.\n    // tokenizer.interrupt = false\n    return ok(code)\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeFurtherStart(effects, ok, nok) {\n  const self = this\n  return furtherStart\n\n  /**\n   * At eol, trying to parse another indent.\n   *\n   * ```markdown\n   * > |     aaa\n   *            ^\n   *   |     bbb\n   * ```\n   *\n   * @type {State}\n   */\n  function furtherStart(code) {\n    // To do: improve `lazy` / `pierce` handling.\n    // If this is a lazy line, it can’t be code.\n    if (self.parser.lazy[self.now().line]) {\n      return nok(code)\n    }\n    if (markdownLineEnding(code)) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return furtherStart\n    }\n\n    // To do: the code here in `micromark-js` is a bit different from\n    // `markdown-rs` because there it can attempt spaces.\n    // We can’t yet.\n    //\n    // To do: use an improved `space_or_tab` function like `markdown-rs`,\n    // so that we can drop the next state.\n    return factorySpace(effects, afterPrefix, 'linePrefix', 4 + 1)(code)\n  }\n\n  /**\n   * At start, after 1 or 4 spaces.\n   *\n   * ```markdown\n   * > |     aaa\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1]\n    return tail &&\n      tail[1].type === 'linePrefix' &&\n      tail[2].sliceSerialize(tail[1], true).length >= 4\n      ? ok(code)\n      : markdownLineEnding(code)\n      ? furtherStart(code)\n      : nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {\n  markdownLineEnding,\n  markdownLineEndingOrSpace,\n  markdownSpace\n} from 'micromark-util-character'\nimport {splice} from 'micromark-util-chunked'\n/** @type {Construct} */\nexport const headingAtx = {\n  name: 'headingAtx',\n  tokenize: tokenizeHeadingAtx,\n  resolve: resolveHeadingAtx\n}\n\n/** @type {Resolver} */\nfunction resolveHeadingAtx(events, context) {\n  let contentEnd = events.length - 2\n  let contentStart = 3\n  /** @type {Token} */\n  let content\n  /** @type {Token} */\n  let text\n\n  // Prefix whitespace, part of the opening.\n  if (events[contentStart][1].type === 'whitespace') {\n    contentStart += 2\n  }\n\n  // Suffix whitespace, part of the closing.\n  if (\n    contentEnd - 2 > contentStart &&\n    events[contentEnd][1].type === 'whitespace'\n  ) {\n    contentEnd -= 2\n  }\n  if (\n    events[contentEnd][1].type === 'atxHeadingSequence' &&\n    (contentStart === contentEnd - 1 ||\n      (contentEnd - 4 > contentStart &&\n        events[contentEnd - 2][1].type === 'whitespace'))\n  ) {\n    contentEnd -= contentStart + 1 === contentEnd ? 2 : 4\n  }\n  if (contentEnd > contentStart) {\n    content = {\n      type: 'atxHeadingText',\n      start: events[contentStart][1].start,\n      end: events[contentEnd][1].end\n    }\n    text = {\n      type: 'chunkText',\n      start: events[contentStart][1].start,\n      end: events[contentEnd][1].end,\n      contentType: 'text'\n    }\n    splice(events, contentStart, contentEnd - contentStart + 1, [\n      ['enter', content, context],\n      ['enter', text, context],\n      ['exit', text, context],\n      ['exit', content, context]\n    ])\n  }\n  return events\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeHeadingAtx(effects, ok, nok) {\n  let size = 0\n  return start\n\n  /**\n   * Start of a heading (atx).\n   *\n   * ```markdown\n   * > | ## aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // To do: parse indent like `markdown-rs`.\n    effects.enter('atxHeading')\n    return before(code)\n  }\n\n  /**\n   * After optional whitespace, at `#`.\n   *\n   * ```markdown\n   * > | ## aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    effects.enter('atxHeadingSequence')\n    return sequenceOpen(code)\n  }\n\n  /**\n   * In opening sequence.\n   *\n   * ```markdown\n   * > | ## aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceOpen(code) {\n    if (code === 35 && size++ < 6) {\n      effects.consume(code)\n      return sequenceOpen\n    }\n\n    // Always at least one `#`.\n    if (code === null || markdownLineEndingOrSpace(code)) {\n      effects.exit('atxHeadingSequence')\n      return atBreak(code)\n    }\n    return nok(code)\n  }\n\n  /**\n   * After something, before something else.\n   *\n   * ```markdown\n   * > | ## aa\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (code === 35) {\n      effects.enter('atxHeadingSequence')\n      return sequenceFurther(code)\n    }\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('atxHeading')\n      // To do: interrupt like `markdown-rs`.\n      // // Feel free to interrupt.\n      // tokenizer.interrupt = false\n      return ok(code)\n    }\n    if (markdownSpace(code)) {\n      return factorySpace(effects, atBreak, 'whitespace')(code)\n    }\n\n    // To do: generate `data` tokens, add the `text` token later.\n    // Needs edit map, see: `markdown.rs`.\n    effects.enter('atxHeadingText')\n    return data(code)\n  }\n\n  /**\n   * In further sequence (after whitespace).\n   *\n   * Could be normal “visible” hashes in the heading or a final sequence.\n   *\n   * ```markdown\n   * > | ## aa ##\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceFurther(code) {\n    if (code === 35) {\n      effects.consume(code)\n      return sequenceFurther\n    }\n    effects.exit('atxHeadingSequence')\n    return atBreak(code)\n  }\n\n  /**\n   * In text.\n   *\n   * ```markdown\n   * > | ## aa\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function data(code) {\n    if (code === null || code === 35 || markdownLineEndingOrSpace(code)) {\n      effects.exit('atxHeadingText')\n      return atBreak(code)\n    }\n    effects.consume(code)\n    return data\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\n/** @type {Construct} */\nexport const setextUnderline = {\n  name: 'setextUnderline',\n  tokenize: tokenizeSetextUnderline,\n  resolveTo: resolveToSetextUnderline\n}\n\n/** @type {Resolver} */\nfunction resolveToSetextUnderline(events, context) {\n  // To do: resolve like `markdown-rs`.\n  let index = events.length\n  /** @type {number | undefined} */\n  let content\n  /** @type {number | undefined} */\n  let text\n  /** @type {number | undefined} */\n  let definition\n\n  // Find the opening of the content.\n  // It’ll always exist: we don’t tokenize if it isn’t there.\n  while (index--) {\n    if (events[index][0] === 'enter') {\n      if (events[index][1].type === 'content') {\n        content = index\n        break\n      }\n      if (events[index][1].type === 'paragraph') {\n        text = index\n      }\n    }\n    // Exit\n    else {\n      if (events[index][1].type === 'content') {\n        // Remove the content end (if needed we’ll add it later)\n        events.splice(index, 1)\n      }\n      if (!definition && events[index][1].type === 'definition') {\n        definition = index\n      }\n    }\n  }\n  const heading = {\n    type: 'setextHeading',\n    start: Object.assign({}, events[text][1].start),\n    end: Object.assign({}, events[events.length - 1][1].end)\n  }\n\n  // Change the paragraph to setext heading text.\n  events[text][1].type = 'setextHeadingText'\n\n  // If we have definitions in the content, we’ll keep on having content,\n  // but we need move it.\n  if (definition) {\n    events.splice(text, 0, ['enter', heading, context])\n    events.splice(definition + 1, 0, ['exit', events[content][1], context])\n    events[content][1].end = Object.assign({}, events[definition][1].end)\n  } else {\n    events[content][1] = heading\n  }\n\n  // Add the heading exit at the end.\n  events.push(['exit', heading, context])\n  return events\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeSetextUnderline(effects, ok, nok) {\n  const self = this\n  /** @type {NonNullable<Code>} */\n  let marker\n  return start\n\n  /**\n   * At start of heading (setext) underline.\n   *\n   * ```markdown\n   *   | aa\n   * > | ==\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    let index = self.events.length\n    /** @type {boolean | undefined} */\n    let paragraph\n    // Find an opening.\n    while (index--) {\n      // Skip enter/exit of line ending, line prefix, and content.\n      // We can now either have a definition or a paragraph.\n      if (\n        self.events[index][1].type !== 'lineEnding' &&\n        self.events[index][1].type !== 'linePrefix' &&\n        self.events[index][1].type !== 'content'\n      ) {\n        paragraph = self.events[index][1].type === 'paragraph'\n        break\n      }\n    }\n\n    // To do: handle lazy/pierce like `markdown-rs`.\n    // To do: parse indent like `markdown-rs`.\n    if (!self.parser.lazy[self.now().line] && (self.interrupt || paragraph)) {\n      effects.enter('setextHeadingLine')\n      marker = code\n      return before(code)\n    }\n    return nok(code)\n  }\n\n  /**\n   * After optional whitespace, at `-` or `=`.\n   *\n   * ```markdown\n   *   | aa\n   * > | ==\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    effects.enter('setextHeadingLineSequence')\n    return inside(code)\n  }\n\n  /**\n   * In sequence.\n   *\n   * ```markdown\n   *   | aa\n   * > | ==\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    if (code === marker) {\n      effects.consume(code)\n      return inside\n    }\n    effects.exit('setextHeadingLineSequence')\n    return markdownSpace(code)\n      ? factorySpace(effects, after, 'lineSuffix')(code)\n      : after(code)\n  }\n\n  /**\n   * After sequence, after optional whitespace.\n   *\n   * ```markdown\n   *   | aa\n   * > | ==\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('setextHeadingLine')\n      return ok(code)\n    }\n    return nok(code)\n  }\n}\n","/**\n * List of lowercase HTML “block” tag names.\n *\n * The list, when parsing HTML (flow), results in more relaxed rules (condition\n * 6).\n * Because they are known blocks, the HTML-like syntax doesn’t have to be\n * strictly parsed.\n * For tag names not in this list, a more strict algorithm (condition 7) is used\n * to detect whether the HTML-like syntax is seen as HTML (flow) or not.\n *\n * This is copied from:\n * <https://spec.commonmark.org/0.30/#html-blocks>.\n *\n * > 👉 **Note**: `search` was added in `CommonMark@0.31`.\n */\nexport const htmlBlockNames = [\n  'address',\n  'article',\n  'aside',\n  'base',\n  'basefont',\n  'blockquote',\n  'body',\n  'caption',\n  'center',\n  'col',\n  'colgroup',\n  'dd',\n  'details',\n  'dialog',\n  'dir',\n  'div',\n  'dl',\n  'dt',\n  'fieldset',\n  'figcaption',\n  'figure',\n  'footer',\n  'form',\n  'frame',\n  'frameset',\n  'h1',\n  'h2',\n  'h3',\n  'h4',\n  'h5',\n  'h6',\n  'head',\n  'header',\n  'hr',\n  'html',\n  'iframe',\n  'legend',\n  'li',\n  'link',\n  'main',\n  'menu',\n  'menuitem',\n  'nav',\n  'noframes',\n  'ol',\n  'optgroup',\n  'option',\n  'p',\n  'param',\n  'search',\n  'section',\n  'summary',\n  'table',\n  'tbody',\n  'td',\n  'tfoot',\n  'th',\n  'thead',\n  'title',\n  'tr',\n  'track',\n  'ul'\n]\n\n/**\n * List of lowercase HTML “raw” tag names.\n *\n * The list, when parsing HTML (flow), results in HTML that can include lines\n * without exiting, until a closing tag also in this list is found (condition\n * 1).\n *\n * This module is copied from:\n * <https://spec.commonmark.org/0.30/#html-blocks>.\n *\n * > 👉 **Note**: `textarea` was added in `CommonMark@0.30`.\n */\nexport const htmlRawNames = ['pre', 'script', 'style', 'textarea']\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {\n  asciiAlpha,\n  asciiAlphanumeric,\n  markdownLineEnding,\n  markdownLineEndingOrSpace,\n  markdownSpace\n} from 'micromark-util-character'\nimport {htmlBlockNames, htmlRawNames} from 'micromark-util-html-tag-name'\nimport {blankLine} from './blank-line.js'\n\n/** @type {Construct} */\nexport const htmlFlow = {\n  name: 'htmlFlow',\n  tokenize: tokenizeHtmlFlow,\n  resolveTo: resolveToHtmlFlow,\n  concrete: true\n}\n\n/** @type {Construct} */\nconst blankLineBefore = {\n  tokenize: tokenizeBlankLineBefore,\n  partial: true\n}\nconst nonLazyContinuationStart = {\n  tokenize: tokenizeNonLazyContinuationStart,\n  partial: true\n}\n\n/** @type {Resolver} */\nfunction resolveToHtmlFlow(events) {\n  let index = events.length\n  while (index--) {\n    if (events[index][0] === 'enter' && events[index][1].type === 'htmlFlow') {\n      break\n    }\n  }\n  if (index > 1 && events[index - 2][1].type === 'linePrefix') {\n    // Add the prefix start to the HTML token.\n    events[index][1].start = events[index - 2][1].start\n    // Add the prefix start to the HTML line token.\n    events[index + 1][1].start = events[index - 2][1].start\n    // Remove the line prefix.\n    events.splice(index - 2, 2)\n  }\n  return events\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeHtmlFlow(effects, ok, nok) {\n  const self = this\n  /** @type {number} */\n  let marker\n  /** @type {boolean} */\n  let closingTag\n  /** @type {string} */\n  let buffer\n  /** @type {number} */\n  let index\n  /** @type {Code} */\n  let markerB\n  return start\n\n  /**\n   * Start of HTML (flow).\n   *\n   * ```markdown\n   * > | <x />\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // To do: parse indent like `markdown-rs`.\n    return before(code)\n  }\n\n  /**\n   * At `<`, after optional whitespace.\n   *\n   * ```markdown\n   * > | <x />\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    effects.enter('htmlFlow')\n    effects.enter('htmlFlowData')\n    effects.consume(code)\n    return open\n  }\n\n  /**\n   * After `<`, at tag name or other stuff.\n   *\n   * ```markdown\n   * > | <x />\n   *      ^\n   * > | <!doctype>\n   *      ^\n   * > | <!--xxx-->\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (code === 33) {\n      effects.consume(code)\n      return declarationOpen\n    }\n    if (code === 47) {\n      effects.consume(code)\n      closingTag = true\n      return tagCloseStart\n    }\n    if (code === 63) {\n      effects.consume(code)\n      marker = 3\n      // To do:\n      // tokenizer.concrete = true\n      // To do: use `markdown-rs` style interrupt.\n      // While we’re in an instruction instead of a declaration, we’re on a `?`\n      // right now, so we do need to search for `>`, similar to declarations.\n      return self.interrupt ? ok : continuationDeclarationInside\n    }\n\n    // ASCII alphabetical.\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      // @ts-expect-error: not null.\n      buffer = String.fromCharCode(code)\n      return tagName\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `<!`, at declaration, comment, or CDATA.\n   *\n   * ```markdown\n   * > | <!doctype>\n   *       ^\n   * > | <!--xxx-->\n   *       ^\n   * > | <![CDATA[>&<]]>\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function declarationOpen(code) {\n    if (code === 45) {\n      effects.consume(code)\n      marker = 2\n      return commentOpenInside\n    }\n    if (code === 91) {\n      effects.consume(code)\n      marker = 5\n      index = 0\n      return cdataOpenInside\n    }\n\n    // ASCII alphabetical.\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      marker = 4\n      // // Do not form containers.\n      // tokenizer.concrete = true\n      return self.interrupt ? ok : continuationDeclarationInside\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `<!-`, inside a comment, at another `-`.\n   *\n   * ```markdown\n   * > | <!--xxx-->\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function commentOpenInside(code) {\n    if (code === 45) {\n      effects.consume(code)\n      // // Do not form containers.\n      // tokenizer.concrete = true\n      return self.interrupt ? ok : continuationDeclarationInside\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `<![`, inside CDATA, expecting `CDATA[`.\n   *\n   * ```markdown\n   * > | <![CDATA[>&<]]>\n   *        ^^^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdataOpenInside(code) {\n    const value = 'CDATA['\n    if (code === value.charCodeAt(index++)) {\n      effects.consume(code)\n      if (index === value.length) {\n        // // Do not form containers.\n        // tokenizer.concrete = true\n        return self.interrupt ? ok : continuation\n      }\n      return cdataOpenInside\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `</`, in closing tag, at tag name.\n   *\n   * ```markdown\n   * > | </x>\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagCloseStart(code) {\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      // @ts-expect-error: not null.\n      buffer = String.fromCharCode(code)\n      return tagName\n    }\n    return nok(code)\n  }\n\n  /**\n   * In tag name.\n   *\n   * ```markdown\n   * > | <ab>\n   *      ^^\n   * > | </ab>\n   *       ^^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagName(code) {\n    if (\n      code === null ||\n      code === 47 ||\n      code === 62 ||\n      markdownLineEndingOrSpace(code)\n    ) {\n      const slash = code === 47\n      const name = buffer.toLowerCase()\n      if (!slash && !closingTag && htmlRawNames.includes(name)) {\n        marker = 1\n        // // Do not form containers.\n        // tokenizer.concrete = true\n        return self.interrupt ? ok(code) : continuation(code)\n      }\n      if (htmlBlockNames.includes(buffer.toLowerCase())) {\n        marker = 6\n        if (slash) {\n          effects.consume(code)\n          return basicSelfClosing\n        }\n\n        // // Do not form containers.\n        // tokenizer.concrete = true\n        return self.interrupt ? ok(code) : continuation(code)\n      }\n      marker = 7\n      // Do not support complete HTML when interrupting.\n      return self.interrupt && !self.parser.lazy[self.now().line]\n        ? nok(code)\n        : closingTag\n        ? completeClosingTagAfter(code)\n        : completeAttributeNameBefore(code)\n    }\n\n    // ASCII alphanumerical and `-`.\n    if (code === 45 || asciiAlphanumeric(code)) {\n      effects.consume(code)\n      buffer += String.fromCharCode(code)\n      return tagName\n    }\n    return nok(code)\n  }\n\n  /**\n   * After closing slash of a basic tag name.\n   *\n   * ```markdown\n   * > | <div/>\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function basicSelfClosing(code) {\n    if (code === 62) {\n      effects.consume(code)\n      // // Do not form containers.\n      // tokenizer.concrete = true\n      return self.interrupt ? ok : continuation\n    }\n    return nok(code)\n  }\n\n  /**\n   * After closing slash of a complete tag name.\n   *\n   * ```markdown\n   * > | <x/>\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeClosingTagAfter(code) {\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return completeClosingTagAfter\n    }\n    return completeEnd(code)\n  }\n\n  /**\n   * At an attribute name.\n   *\n   * At first, this state is used after a complete tag name, after whitespace,\n   * where it expects optional attributes or the end of the tag.\n   * It is also reused after attributes, when expecting more optional\n   * attributes.\n   *\n   * ```markdown\n   * > | <a />\n   *        ^\n   * > | <a :b>\n   *        ^\n   * > | <a _b>\n   *        ^\n   * > | <a b>\n   *        ^\n   * > | <a >\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeNameBefore(code) {\n    if (code === 47) {\n      effects.consume(code)\n      return completeEnd\n    }\n\n    // ASCII alphanumerical and `:` and `_`.\n    if (code === 58 || code === 95 || asciiAlpha(code)) {\n      effects.consume(code)\n      return completeAttributeName\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return completeAttributeNameBefore\n    }\n    return completeEnd(code)\n  }\n\n  /**\n   * In attribute name.\n   *\n   * ```markdown\n   * > | <a :b>\n   *         ^\n   * > | <a _b>\n   *         ^\n   * > | <a b>\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeName(code) {\n    // ASCII alphanumerical and `-`, `.`, `:`, and `_`.\n    if (\n      code === 45 ||\n      code === 46 ||\n      code === 58 ||\n      code === 95 ||\n      asciiAlphanumeric(code)\n    ) {\n      effects.consume(code)\n      return completeAttributeName\n    }\n    return completeAttributeNameAfter(code)\n  }\n\n  /**\n   * After attribute name, at an optional initializer, the end of the tag, or\n   * whitespace.\n   *\n   * ```markdown\n   * > | <a b>\n   *         ^\n   * > | <a b=c>\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeNameAfter(code) {\n    if (code === 61) {\n      effects.consume(code)\n      return completeAttributeValueBefore\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return completeAttributeNameAfter\n    }\n    return completeAttributeNameBefore(code)\n  }\n\n  /**\n   * Before unquoted, double quoted, or single quoted attribute value, allowing\n   * whitespace.\n   *\n   * ```markdown\n   * > | <a b=c>\n   *          ^\n   * > | <a b=\"c\">\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeValueBefore(code) {\n    if (\n      code === null ||\n      code === 60 ||\n      code === 61 ||\n      code === 62 ||\n      code === 96\n    ) {\n      return nok(code)\n    }\n    if (code === 34 || code === 39) {\n      effects.consume(code)\n      markerB = code\n      return completeAttributeValueQuoted\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return completeAttributeValueBefore\n    }\n    return completeAttributeValueUnquoted(code)\n  }\n\n  /**\n   * In double or single quoted attribute value.\n   *\n   * ```markdown\n   * > | <a b=\"c\">\n   *           ^\n   * > | <a b='c'>\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeValueQuoted(code) {\n    if (code === markerB) {\n      effects.consume(code)\n      markerB = null\n      return completeAttributeValueQuotedAfter\n    }\n    if (code === null || markdownLineEnding(code)) {\n      return nok(code)\n    }\n    effects.consume(code)\n    return completeAttributeValueQuoted\n  }\n\n  /**\n   * In unquoted attribute value.\n   *\n   * ```markdown\n   * > | <a b=c>\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeValueUnquoted(code) {\n    if (\n      code === null ||\n      code === 34 ||\n      code === 39 ||\n      code === 47 ||\n      code === 60 ||\n      code === 61 ||\n      code === 62 ||\n      code === 96 ||\n      markdownLineEndingOrSpace(code)\n    ) {\n      return completeAttributeNameAfter(code)\n    }\n    effects.consume(code)\n    return completeAttributeValueUnquoted\n  }\n\n  /**\n   * After double or single quoted attribute value, before whitespace or the\n   * end of the tag.\n   *\n   * ```markdown\n   * > | <a b=\"c\">\n   *            ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeValueQuotedAfter(code) {\n    if (code === 47 || code === 62 || markdownSpace(code)) {\n      return completeAttributeNameBefore(code)\n    }\n    return nok(code)\n  }\n\n  /**\n   * In certain circumstances of a complete tag where only an `>` is allowed.\n   *\n   * ```markdown\n   * > | <a b=\"c\">\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeEnd(code) {\n    if (code === 62) {\n      effects.consume(code)\n      return completeAfter\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `>` in a complete tag.\n   *\n   * ```markdown\n   * > | <x>\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAfter(code) {\n    if (code === null || markdownLineEnding(code)) {\n      // // Do not form containers.\n      // tokenizer.concrete = true\n      return continuation(code)\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return completeAfter\n    }\n    return nok(code)\n  }\n\n  /**\n   * In continuation of any HTML kind.\n   *\n   * ```markdown\n   * > | <!--xxx-->\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuation(code) {\n    if (code === 45 && marker === 2) {\n      effects.consume(code)\n      return continuationCommentInside\n    }\n    if (code === 60 && marker === 1) {\n      effects.consume(code)\n      return continuationRawTagOpen\n    }\n    if (code === 62 && marker === 4) {\n      effects.consume(code)\n      return continuationClose\n    }\n    if (code === 63 && marker === 3) {\n      effects.consume(code)\n      return continuationDeclarationInside\n    }\n    if (code === 93 && marker === 5) {\n      effects.consume(code)\n      return continuationCdataInside\n    }\n    if (markdownLineEnding(code) && (marker === 6 || marker === 7)) {\n      effects.exit('htmlFlowData')\n      return effects.check(\n        blankLineBefore,\n        continuationAfter,\n        continuationStart\n      )(code)\n    }\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('htmlFlowData')\n      return continuationStart(code)\n    }\n    effects.consume(code)\n    return continuation\n  }\n\n  /**\n   * In continuation, at eol.\n   *\n   * ```markdown\n   * > | <x>\n   *        ^\n   *   | asd\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationStart(code) {\n    return effects.check(\n      nonLazyContinuationStart,\n      continuationStartNonLazy,\n      continuationAfter\n    )(code)\n  }\n\n  /**\n   * In continuation, at eol, before non-lazy content.\n   *\n   * ```markdown\n   * > | <x>\n   *        ^\n   *   | asd\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationStartNonLazy(code) {\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return continuationBefore\n  }\n\n  /**\n   * In continuation, before non-lazy content.\n   *\n   * ```markdown\n   *   | <x>\n   * > | asd\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationBefore(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return continuationStart(code)\n    }\n    effects.enter('htmlFlowData')\n    return continuation(code)\n  }\n\n  /**\n   * In comment continuation, after one `-`, expecting another.\n   *\n   * ```markdown\n   * > | <!--xxx-->\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationCommentInside(code) {\n    if (code === 45) {\n      effects.consume(code)\n      return continuationDeclarationInside\n    }\n    return continuation(code)\n  }\n\n  /**\n   * In raw continuation, after `<`, at `/`.\n   *\n   * ```markdown\n   * > | <script>console.log(1)</script>\n   *                            ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationRawTagOpen(code) {\n    if (code === 47) {\n      effects.consume(code)\n      buffer = ''\n      return continuationRawEndTag\n    }\n    return continuation(code)\n  }\n\n  /**\n   * In raw continuation, after `</`, in a raw tag name.\n   *\n   * ```markdown\n   * > | <script>console.log(1)</script>\n   *                             ^^^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationRawEndTag(code) {\n    if (code === 62) {\n      const name = buffer.toLowerCase()\n      if (htmlRawNames.includes(name)) {\n        effects.consume(code)\n        return continuationClose\n      }\n      return continuation(code)\n    }\n    if (asciiAlpha(code) && buffer.length < 8) {\n      effects.consume(code)\n      // @ts-expect-error: not null.\n      buffer += String.fromCharCode(code)\n      return continuationRawEndTag\n    }\n    return continuation(code)\n  }\n\n  /**\n   * In cdata continuation, after `]`, expecting `]>`.\n   *\n   * ```markdown\n   * > | <![CDATA[>&<]]>\n   *                  ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationCdataInside(code) {\n    if (code === 93) {\n      effects.consume(code)\n      return continuationDeclarationInside\n    }\n    return continuation(code)\n  }\n\n  /**\n   * In declaration or instruction continuation, at `>`.\n   *\n   * ```markdown\n   * > | <!-->\n   *         ^\n   * > | <?>\n   *       ^\n   * > | <!q>\n   *        ^\n   * > | <!--ab-->\n   *             ^\n   * > | <![CDATA[>&<]]>\n   *                   ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationDeclarationInside(code) {\n    if (code === 62) {\n      effects.consume(code)\n      return continuationClose\n    }\n\n    // More dashes.\n    if (code === 45 && marker === 2) {\n      effects.consume(code)\n      return continuationDeclarationInside\n    }\n    return continuation(code)\n  }\n\n  /**\n   * In closed continuation: everything we get until the eol/eof is part of it.\n   *\n   * ```markdown\n   * > | <!doctype>\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationClose(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('htmlFlowData')\n      return continuationAfter(code)\n    }\n    effects.consume(code)\n    return continuationClose\n  }\n\n  /**\n   * Done.\n   *\n   * ```markdown\n   * > | <!doctype>\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationAfter(code) {\n    effects.exit('htmlFlow')\n    // // Feel free to interrupt.\n    // tokenizer.interrupt = false\n    // // No longer concrete.\n    // tokenizer.concrete = false\n    return ok(code)\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeNonLazyContinuationStart(effects, ok, nok) {\n  const self = this\n  return start\n\n  /**\n   * At eol, before continuation.\n   *\n   * ```markdown\n   * > | * ```js\n   *            ^\n   *   | b\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (markdownLineEnding(code)) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return after\n    }\n    return nok(code)\n  }\n\n  /**\n   * A continuation.\n   *\n   * ```markdown\n   *   | * ```js\n   * > | b\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    return self.parser.lazy[self.now().line] ? nok(code) : ok(code)\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeBlankLineBefore(effects, ok, nok) {\n  return start\n\n  /**\n   * Before eol, expecting blank line.\n   *\n   * ```markdown\n   * > | <div>\n   *          ^\n   *   |\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return effects.attempt(blankLine, ok, nok)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\n/** @type {Construct} */\nconst nonLazyContinuation = {\n  tokenize: tokenizeNonLazyContinuation,\n  partial: true\n}\n\n/** @type {Construct} */\nexport const codeFenced = {\n  name: 'codeFenced',\n  tokenize: tokenizeCodeFenced,\n  concrete: true\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeCodeFenced(effects, ok, nok) {\n  const self = this\n  /** @type {Construct} */\n  const closeStart = {\n    tokenize: tokenizeCloseStart,\n    partial: true\n  }\n  let initialPrefix = 0\n  let sizeOpen = 0\n  /** @type {NonNullable<Code>} */\n  let marker\n  return start\n\n  /**\n   * Start of code.\n   *\n   * ```markdown\n   * > | ~~~js\n   *     ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // To do: parse whitespace like `markdown-rs`.\n    return beforeSequenceOpen(code)\n  }\n\n  /**\n   * In opening fence, after prefix, at sequence.\n   *\n   * ```markdown\n   * > | ~~~js\n   *     ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function beforeSequenceOpen(code) {\n    const tail = self.events[self.events.length - 1]\n    initialPrefix =\n      tail && tail[1].type === 'linePrefix'\n        ? tail[2].sliceSerialize(tail[1], true).length\n        : 0\n    marker = code\n    effects.enter('codeFenced')\n    effects.enter('codeFencedFence')\n    effects.enter('codeFencedFenceSequence')\n    return sequenceOpen(code)\n  }\n\n  /**\n   * In opening fence sequence.\n   *\n   * ```markdown\n   * > | ~~~js\n   *      ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceOpen(code) {\n    if (code === marker) {\n      sizeOpen++\n      effects.consume(code)\n      return sequenceOpen\n    }\n    if (sizeOpen < 3) {\n      return nok(code)\n    }\n    effects.exit('codeFencedFenceSequence')\n    return markdownSpace(code)\n      ? factorySpace(effects, infoBefore, 'whitespace')(code)\n      : infoBefore(code)\n  }\n\n  /**\n   * In opening fence, after the sequence (and optional whitespace), before info.\n   *\n   * ```markdown\n   * > | ~~~js\n   *        ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function infoBefore(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('codeFencedFence')\n      return self.interrupt\n        ? ok(code)\n        : effects.check(nonLazyContinuation, atNonLazyBreak, after)(code)\n    }\n    effects.enter('codeFencedFenceInfo')\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return info(code)\n  }\n\n  /**\n   * In info.\n   *\n   * ```markdown\n   * > | ~~~js\n   *        ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function info(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('chunkString')\n      effects.exit('codeFencedFenceInfo')\n      return infoBefore(code)\n    }\n    if (markdownSpace(code)) {\n      effects.exit('chunkString')\n      effects.exit('codeFencedFenceInfo')\n      return factorySpace(effects, metaBefore, 'whitespace')(code)\n    }\n    if (code === 96 && code === marker) {\n      return nok(code)\n    }\n    effects.consume(code)\n    return info\n  }\n\n  /**\n   * In opening fence, after info and whitespace, before meta.\n   *\n   * ```markdown\n   * > | ~~~js eval\n   *           ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function metaBefore(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return infoBefore(code)\n    }\n    effects.enter('codeFencedFenceMeta')\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return meta(code)\n  }\n\n  /**\n   * In meta.\n   *\n   * ```markdown\n   * > | ~~~js eval\n   *           ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function meta(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('chunkString')\n      effects.exit('codeFencedFenceMeta')\n      return infoBefore(code)\n    }\n    if (code === 96 && code === marker) {\n      return nok(code)\n    }\n    effects.consume(code)\n    return meta\n  }\n\n  /**\n   * At eol/eof in code, before a non-lazy closing fence or content.\n   *\n   * ```markdown\n   * > | ~~~js\n   *          ^\n   * > | alert(1)\n   *             ^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function atNonLazyBreak(code) {\n    return effects.attempt(closeStart, after, contentBefore)(code)\n  }\n\n  /**\n   * Before code content, not a closing fence, at eol.\n   *\n   * ```markdown\n   *   | ~~~js\n   * > | alert(1)\n   *             ^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function contentBefore(code) {\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return contentStart\n  }\n\n  /**\n   * Before code content, not a closing fence.\n   *\n   * ```markdown\n   *   | ~~~js\n   * > | alert(1)\n   *     ^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function contentStart(code) {\n    return initialPrefix > 0 && markdownSpace(code)\n      ? factorySpace(\n          effects,\n          beforeContentChunk,\n          'linePrefix',\n          initialPrefix + 1\n        )(code)\n      : beforeContentChunk(code)\n  }\n\n  /**\n   * Before code content, after optional prefix.\n   *\n   * ```markdown\n   *   | ~~~js\n   * > | alert(1)\n   *     ^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function beforeContentChunk(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return effects.check(nonLazyContinuation, atNonLazyBreak, after)(code)\n    }\n    effects.enter('codeFlowValue')\n    return contentChunk(code)\n  }\n\n  /**\n   * In code content.\n   *\n   * ```markdown\n   *   | ~~~js\n   * > | alert(1)\n   *     ^^^^^^^^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function contentChunk(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('codeFlowValue')\n      return beforeContentChunk(code)\n    }\n    effects.consume(code)\n    return contentChunk\n  }\n\n  /**\n   * After code.\n   *\n   * ```markdown\n   *   | ~~~js\n   *   | alert(1)\n   * > | ~~~\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    effects.exit('codeFenced')\n    return ok(code)\n  }\n\n  /**\n   * @this {TokenizeContext}\n   * @type {Tokenizer}\n   */\n  function tokenizeCloseStart(effects, ok, nok) {\n    let size = 0\n    return startBefore\n\n    /**\n     *\n     *\n     * @type {State}\n     */\n    function startBefore(code) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return start\n    }\n\n    /**\n     * Before closing fence, at optional whitespace.\n     *\n     * ```markdown\n     *   | ~~~js\n     *   | alert(1)\n     * > | ~~~\n     *     ^\n     * ```\n     *\n     * @type {State}\n     */\n    function start(code) {\n      // Always populated by defaults.\n\n      // To do: `enter` here or in next state?\n      effects.enter('codeFencedFence')\n      return markdownSpace(code)\n        ? factorySpace(\n            effects,\n            beforeSequenceClose,\n            'linePrefix',\n            self.parser.constructs.disable.null.includes('codeIndented')\n              ? undefined\n              : 4\n          )(code)\n        : beforeSequenceClose(code)\n    }\n\n    /**\n     * In closing fence, after optional whitespace, at sequence.\n     *\n     * ```markdown\n     *   | ~~~js\n     *   | alert(1)\n     * > | ~~~\n     *     ^\n     * ```\n     *\n     * @type {State}\n     */\n    function beforeSequenceClose(code) {\n      if (code === marker) {\n        effects.enter('codeFencedFenceSequence')\n        return sequenceClose(code)\n      }\n      return nok(code)\n    }\n\n    /**\n     * In closing fence sequence.\n     *\n     * ```markdown\n     *   | ~~~js\n     *   | alert(1)\n     * > | ~~~\n     *     ^\n     * ```\n     *\n     * @type {State}\n     */\n    function sequenceClose(code) {\n      if (code === marker) {\n        size++\n        effects.consume(code)\n        return sequenceClose\n      }\n      if (size >= sizeOpen) {\n        effects.exit('codeFencedFenceSequence')\n        return markdownSpace(code)\n          ? factorySpace(effects, sequenceCloseAfter, 'whitespace')(code)\n          : sequenceCloseAfter(code)\n      }\n      return nok(code)\n    }\n\n    /**\n     * After closing fence sequence, after optional whitespace.\n     *\n     * ```markdown\n     *   | ~~~js\n     *   | alert(1)\n     * > | ~~~\n     *        ^\n     * ```\n     *\n     * @type {State}\n     */\n    function sequenceCloseAfter(code) {\n      if (code === null || markdownLineEnding(code)) {\n        effects.exit('codeFencedFence')\n        return ok(code)\n      }\n      return nok(code)\n    }\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeNonLazyContinuation(effects, ok, nok) {\n  const self = this\n  return start\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (code === null) {\n      return nok(code)\n    }\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return lineStart\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function lineStart(code) {\n    return self.parser.lazy[self.now().line] ? nok(code) : ok(code)\n  }\n}\n","/// <reference lib=\"dom\" />\n\n/* eslint-env browser */\n\nconst element = document.createElement('i')\n\n/**\n * @param {string} value\n * @returns {string|false}\n */\nexport function decodeNamedCharacterReference(value) {\n  const characterReference = '&' + value + ';'\n  element.innerHTML = characterReference\n  const char = element.textContent\n\n  // Some named character references do not require the closing semicolon\n  // (`&not`, for instance), which leads to situations where parsing the assumed\n  // named reference of `&notit;` will result in the string `¬it;`.\n  // When we encounter a trailing semicolon after parsing, and the character\n  // reference to decode was not a semicolon (`&semi;`), we can assume that the\n  // matching was not complete.\n  // @ts-expect-error: TypeScript is wrong that `textContent` on elements can\n  // yield `null`.\n  if (char.charCodeAt(char.length - 1) === 59 /* `;` */ && value !== 'semi') {\n    return false\n  }\n\n  // If the decoded string is equal to the input, the character reference was\n  // not valid.\n  // @ts-expect-error: TypeScript is wrong that `textContent` on elements can\n  // yield `null`.\n  return char === characterReference ? false : char\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {decodeNamedCharacterReference} from 'decode-named-character-reference'\nimport {\n  asciiAlphanumeric,\n  asciiDigit,\n  asciiHexDigit\n} from 'micromark-util-character'\n/** @type {Construct} */\nexport const characterReference = {\n  name: 'characterReference',\n  tokenize: tokenizeCharacterReference\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeCharacterReference(effects, ok, nok) {\n  const self = this\n  let size = 0\n  /** @type {number} */\n  let max\n  /** @type {(code: Code) => boolean} */\n  let test\n  return start\n\n  /**\n   * Start of character reference.\n   *\n   * ```markdown\n   * > | a&amp;b\n   *      ^\n   * > | a&#123;b\n   *      ^\n   * > | a&#x9;b\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('characterReference')\n    effects.enter('characterReferenceMarker')\n    effects.consume(code)\n    effects.exit('characterReferenceMarker')\n    return open\n  }\n\n  /**\n   * After `&`, at `#` for numeric references or alphanumeric for named\n   * references.\n   *\n   * ```markdown\n   * > | a&amp;b\n   *       ^\n   * > | a&#123;b\n   *       ^\n   * > | a&#x9;b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (code === 35) {\n      effects.enter('characterReferenceMarkerNumeric')\n      effects.consume(code)\n      effects.exit('characterReferenceMarkerNumeric')\n      return numeric\n    }\n    effects.enter('characterReferenceValue')\n    max = 31\n    test = asciiAlphanumeric\n    return value(code)\n  }\n\n  /**\n   * After `#`, at `x` for hexadecimals or digit for decimals.\n   *\n   * ```markdown\n   * > | a&#123;b\n   *        ^\n   * > | a&#x9;b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function numeric(code) {\n    if (code === 88 || code === 120) {\n      effects.enter('characterReferenceMarkerHexadecimal')\n      effects.consume(code)\n      effects.exit('characterReferenceMarkerHexadecimal')\n      effects.enter('characterReferenceValue')\n      max = 6\n      test = asciiHexDigit\n      return value\n    }\n    effects.enter('characterReferenceValue')\n    max = 7\n    test = asciiDigit\n    return value(code)\n  }\n\n  /**\n   * After markers (`&#x`, `&#`, or `&`), in value, before `;`.\n   *\n   * The character reference kind defines what and how many characters are\n   * allowed.\n   *\n   * ```markdown\n   * > | a&amp;b\n   *       ^^^\n   * > | a&#123;b\n   *        ^^^\n   * > | a&#x9;b\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function value(code) {\n    if (code === 59 && size) {\n      const token = effects.exit('characterReferenceValue')\n      if (\n        test === asciiAlphanumeric &&\n        !decodeNamedCharacterReference(self.sliceSerialize(token))\n      ) {\n        return nok(code)\n      }\n\n      // To do: `markdown-rs` uses a different name:\n      // `CharacterReferenceMarkerSemi`.\n      effects.enter('characterReferenceMarker')\n      effects.consume(code)\n      effects.exit('characterReferenceMarker')\n      effects.exit('characterReference')\n      return ok\n    }\n    if (test(code) && size++ < max) {\n      effects.consume(code)\n      return value\n    }\n    return nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {asciiPunctuation} from 'micromark-util-character'\n/** @type {Construct} */\nexport const characterEscape = {\n  name: 'characterEscape',\n  tokenize: tokenizeCharacterEscape\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeCharacterEscape(effects, ok, nok) {\n  return start\n\n  /**\n   * Start of character escape.\n   *\n   * ```markdown\n   * > | a\\*b\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('characterEscape')\n    effects.enter('escapeMarker')\n    effects.consume(code)\n    effects.exit('escapeMarker')\n    return inside\n  }\n\n  /**\n   * After `\\`, at punctuation.\n   *\n   * ```markdown\n   * > | a\\*b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    // ASCII punctuation.\n    if (asciiPunctuation(code)) {\n      effects.enter('characterEscapeValue')\n      effects.consume(code)\n      effects.exit('characterEscapeValue')\n      effects.exit('characterEscape')\n      return ok\n    }\n    return nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\n/** @type {Construct} */\nexport const lineEnding = {\n  name: 'lineEnding',\n  tokenize: tokenizeLineEnding\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeLineEnding(effects, ok) {\n  return start\n\n  /** @type {State} */\n  function start(code) {\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return factorySpace(effects, ok, 'linePrefix')\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factoryDestination} from 'micromark-factory-destination'\nimport {factoryLabel} from 'micromark-factory-label'\nimport {factoryTitle} from 'micromark-factory-title'\nimport {factoryWhitespace} from 'micromark-factory-whitespace'\nimport {markdownLineEndingOrSpace} from 'micromark-util-character'\nimport {push, splice} from 'micromark-util-chunked'\nimport {normalizeIdentifier} from 'micromark-util-normalize-identifier'\nimport {resolveAll} from 'micromark-util-resolve-all'\n/** @type {Construct} */\nexport const labelEnd = {\n  name: 'labelEnd',\n  tokenize: tokenizeLabelEnd,\n  resolveTo: resolveToLabelEnd,\n  resolveAll: resolveAllLabelEnd\n}\n\n/** @type {Construct} */\nconst resourceConstruct = {\n  tokenize: tokenizeResource\n}\n/** @type {Construct} */\nconst referenceFullConstruct = {\n  tokenize: tokenizeReferenceFull\n}\n/** @type {Construct} */\nconst referenceCollapsedConstruct = {\n  tokenize: tokenizeReferenceCollapsed\n}\n\n/** @type {Resolver} */\nfunction resolveAllLabelEnd(events) {\n  let index = -1\n  while (++index < events.length) {\n    const token = events[index][1]\n    if (\n      token.type === 'labelImage' ||\n      token.type === 'labelLink' ||\n      token.type === 'labelEnd'\n    ) {\n      // Remove the marker.\n      events.splice(index + 1, token.type === 'labelImage' ? 4 : 2)\n      token.type = 'data'\n      index++\n    }\n  }\n  return events\n}\n\n/** @type {Resolver} */\nfunction resolveToLabelEnd(events, context) {\n  let index = events.length\n  let offset = 0\n  /** @type {Token} */\n  let token\n  /** @type {number | undefined} */\n  let open\n  /** @type {number | undefined} */\n  let close\n  /** @type {Array<Event>} */\n  let media\n\n  // Find an opening.\n  while (index--) {\n    token = events[index][1]\n    if (open) {\n      // If we see another link, or inactive link label, we’ve been here before.\n      if (\n        token.type === 'link' ||\n        (token.type === 'labelLink' && token._inactive)\n      ) {\n        break\n      }\n\n      // Mark other link openings as inactive, as we can’t have links in\n      // links.\n      if (events[index][0] === 'enter' && token.type === 'labelLink') {\n        token._inactive = true\n      }\n    } else if (close) {\n      if (\n        events[index][0] === 'enter' &&\n        (token.type === 'labelImage' || token.type === 'labelLink') &&\n        !token._balanced\n      ) {\n        open = index\n        if (token.type !== 'labelLink') {\n          offset = 2\n          break\n        }\n      }\n    } else if (token.type === 'labelEnd') {\n      close = index\n    }\n  }\n  const group = {\n    type: events[open][1].type === 'labelLink' ? 'link' : 'image',\n    start: Object.assign({}, events[open][1].start),\n    end: Object.assign({}, events[events.length - 1][1].end)\n  }\n  const label = {\n    type: 'label',\n    start: Object.assign({}, events[open][1].start),\n    end: Object.assign({}, events[close][1].end)\n  }\n  const text = {\n    type: 'labelText',\n    start: Object.assign({}, events[open + offset + 2][1].end),\n    end: Object.assign({}, events[close - 2][1].start)\n  }\n  media = [\n    ['enter', group, context],\n    ['enter', label, context]\n  ]\n\n  // Opening marker.\n  media = push(media, events.slice(open + 1, open + offset + 3))\n\n  // Text open.\n  media = push(media, [['enter', text, context]])\n\n  // Always populated by defaults.\n\n  // Between.\n  media = push(\n    media,\n    resolveAll(\n      context.parser.constructs.insideSpan.null,\n      events.slice(open + offset + 4, close - 3),\n      context\n    )\n  )\n\n  // Text close, marker close, label close.\n  media = push(media, [\n    ['exit', text, context],\n    events[close - 2],\n    events[close - 1],\n    ['exit', label, context]\n  ])\n\n  // Reference, resource, or so.\n  media = push(media, events.slice(close + 1))\n\n  // Media close.\n  media = push(media, [['exit', group, context]])\n  splice(events, open, events.length, media)\n  return events\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeLabelEnd(effects, ok, nok) {\n  const self = this\n  let index = self.events.length\n  /** @type {Token} */\n  let labelStart\n  /** @type {boolean} */\n  let defined\n\n  // Find an opening.\n  while (index--) {\n    if (\n      (self.events[index][1].type === 'labelImage' ||\n        self.events[index][1].type === 'labelLink') &&\n      !self.events[index][1]._balanced\n    ) {\n      labelStart = self.events[index][1]\n      break\n    }\n  }\n  return start\n\n  /**\n   * Start of label end.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *       ^\n   * > | [a][b] c\n   *       ^\n   * > | [a][] b\n   *       ^\n   * > | [a] b\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // If there is not an okay opening.\n    if (!labelStart) {\n      return nok(code)\n    }\n\n    // If the corresponding label (link) start is marked as inactive,\n    // it means we’d be wrapping a link, like this:\n    //\n    // ```markdown\n    // > | a [b [c](d) e](f) g.\n    //                  ^\n    // ```\n    //\n    // We can’t have that, so it’s just balanced brackets.\n    if (labelStart._inactive) {\n      return labelEndNok(code)\n    }\n    defined = self.parser.defined.includes(\n      normalizeIdentifier(\n        self.sliceSerialize({\n          start: labelStart.end,\n          end: self.now()\n        })\n      )\n    )\n    effects.enter('labelEnd')\n    effects.enter('labelMarker')\n    effects.consume(code)\n    effects.exit('labelMarker')\n    effects.exit('labelEnd')\n    return after\n  }\n\n  /**\n   * After `]`.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *       ^\n   * > | [a][b] c\n   *       ^\n   * > | [a][] b\n   *       ^\n   * > | [a] b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    // Note: `markdown-rs` also parses GFM footnotes here, which for us is in\n    // an extension.\n\n    // Resource (`[asd](fgh)`)?\n    if (code === 40) {\n      return effects.attempt(\n        resourceConstruct,\n        labelEndOk,\n        defined ? labelEndOk : labelEndNok\n      )(code)\n    }\n\n    // Full (`[asd][fgh]`) or collapsed (`[asd][]`) reference?\n    if (code === 91) {\n      return effects.attempt(\n        referenceFullConstruct,\n        labelEndOk,\n        defined ? referenceNotFull : labelEndNok\n      )(code)\n    }\n\n    // Shortcut (`[asd]`) reference?\n    return defined ? labelEndOk(code) : labelEndNok(code)\n  }\n\n  /**\n   * After `]`, at `[`, but not at a full reference.\n   *\n   * > 👉 **Note**: we only get here if the label is defined.\n   *\n   * ```markdown\n   * > | [a][] b\n   *        ^\n   * > | [a] b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceNotFull(code) {\n    return effects.attempt(\n      referenceCollapsedConstruct,\n      labelEndOk,\n      labelEndNok\n    )(code)\n  }\n\n  /**\n   * Done, we found something.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *           ^\n   * > | [a][b] c\n   *           ^\n   * > | [a][] b\n   *          ^\n   * > | [a] b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelEndOk(code) {\n    // Note: `markdown-rs` does a bunch of stuff here.\n    return ok(code)\n  }\n\n  /**\n   * Done, it’s nothing.\n   *\n   * There was an okay opening, but we didn’t match anything.\n   *\n   * ```markdown\n   * > | [a](b c\n   *        ^\n   * > | [a][b c\n   *        ^\n   * > | [a] b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelEndNok(code) {\n    labelStart._balanced = true\n    return nok(code)\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeResource(effects, ok, nok) {\n  return resourceStart\n\n  /**\n   * At a resource.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceStart(code) {\n    effects.enter('resource')\n    effects.enter('resourceMarker')\n    effects.consume(code)\n    effects.exit('resourceMarker')\n    return resourceBefore\n  }\n\n  /**\n   * In resource, after `(`, at optional whitespace.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceBefore(code) {\n    return markdownLineEndingOrSpace(code)\n      ? factoryWhitespace(effects, resourceOpen)(code)\n      : resourceOpen(code)\n  }\n\n  /**\n   * In resource, after optional whitespace, at `)` or a destination.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceOpen(code) {\n    if (code === 41) {\n      return resourceEnd(code)\n    }\n    return factoryDestination(\n      effects,\n      resourceDestinationAfter,\n      resourceDestinationMissing,\n      'resourceDestination',\n      'resourceDestinationLiteral',\n      'resourceDestinationLiteralMarker',\n      'resourceDestinationRaw',\n      'resourceDestinationString',\n      32\n    )(code)\n  }\n\n  /**\n   * In resource, after destination, at optional whitespace.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceDestinationAfter(code) {\n    return markdownLineEndingOrSpace(code)\n      ? factoryWhitespace(effects, resourceBetween)(code)\n      : resourceEnd(code)\n  }\n\n  /**\n   * At invalid destination.\n   *\n   * ```markdown\n   * > | [a](<<) b\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceDestinationMissing(code) {\n    return nok(code)\n  }\n\n  /**\n   * In resource, after destination and whitespace, at `(` or title.\n   *\n   * ```markdown\n   * > | [a](b ) c\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceBetween(code) {\n    if (code === 34 || code === 39 || code === 40) {\n      return factoryTitle(\n        effects,\n        resourceTitleAfter,\n        nok,\n        'resourceTitle',\n        'resourceTitleMarker',\n        'resourceTitleString'\n      )(code)\n    }\n    return resourceEnd(code)\n  }\n\n  /**\n   * In resource, after title, at optional whitespace.\n   *\n   * ```markdown\n   * > | [a](b \"c\") d\n   *              ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceTitleAfter(code) {\n    return markdownLineEndingOrSpace(code)\n      ? factoryWhitespace(effects, resourceEnd)(code)\n      : resourceEnd(code)\n  }\n\n  /**\n   * In resource, at `)`.\n   *\n   * ```markdown\n   * > | [a](b) d\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceEnd(code) {\n    if (code === 41) {\n      effects.enter('resourceMarker')\n      effects.consume(code)\n      effects.exit('resourceMarker')\n      effects.exit('resource')\n      return ok\n    }\n    return nok(code)\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeReferenceFull(effects, ok, nok) {\n  const self = this\n  return referenceFull\n\n  /**\n   * In a reference (full), at the `[`.\n   *\n   * ```markdown\n   * > | [a][b] d\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceFull(code) {\n    return factoryLabel.call(\n      self,\n      effects,\n      referenceFullAfter,\n      referenceFullMissing,\n      'reference',\n      'referenceMarker',\n      'referenceString'\n    )(code)\n  }\n\n  /**\n   * In a reference (full), after `]`.\n   *\n   * ```markdown\n   * > | [a][b] d\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceFullAfter(code) {\n    return self.parser.defined.includes(\n      normalizeIdentifier(\n        self.sliceSerialize(self.events[self.events.length - 1][1]).slice(1, -1)\n      )\n    )\n      ? ok(code)\n      : nok(code)\n  }\n\n  /**\n   * In reference (full) that was missing.\n   *\n   * ```markdown\n   * > | [a][b d\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceFullMissing(code) {\n    return nok(code)\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeReferenceCollapsed(effects, ok, nok) {\n  return referenceCollapsedStart\n\n  /**\n   * In reference (collapsed), at `[`.\n   *\n   * > 👉 **Note**: we only get here if the label is defined.\n   *\n   * ```markdown\n   * > | [a][] d\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceCollapsedStart(code) {\n    // We only attempt a collapsed label if there’s a `[`.\n\n    effects.enter('reference')\n    effects.enter('referenceMarker')\n    effects.consume(code)\n    effects.exit('referenceMarker')\n    return referenceCollapsedOpen\n  }\n\n  /**\n   * In reference (collapsed), at `]`.\n   *\n   * > 👉 **Note**: we only get here if the label is defined.\n   *\n   * ```markdown\n   * > | [a][] d\n   *         ^\n   * ```\n   *\n   *  @type {State}\n   */\n  function referenceCollapsedOpen(code) {\n    if (code === 93) {\n      effects.enter('referenceMarker')\n      effects.consume(code)\n      effects.exit('referenceMarker')\n      effects.exit('reference')\n      return ok\n    }\n    return nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {labelEnd} from './label-end.js'\n\n/** @type {Construct} */\nexport const labelStartImage = {\n  name: 'labelStartImage',\n  tokenize: tokenizeLabelStartImage,\n  resolveAll: labelEnd.resolveAll\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeLabelStartImage(effects, ok, nok) {\n  const self = this\n  return start\n\n  /**\n   * Start of label (image) start.\n   *\n   * ```markdown\n   * > | a ![b] c\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('labelImage')\n    effects.enter('labelImageMarker')\n    effects.consume(code)\n    effects.exit('labelImageMarker')\n    return open\n  }\n\n  /**\n   * After `!`, at `[`.\n   *\n   * ```markdown\n   * > | a ![b] c\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (code === 91) {\n      effects.enter('labelMarker')\n      effects.consume(code)\n      effects.exit('labelMarker')\n      effects.exit('labelImage')\n      return after\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `![`.\n   *\n   * ```markdown\n   * > | a ![b] c\n   *         ^\n   * ```\n   *\n   * This is needed in because, when GFM footnotes are enabled, images never\n   * form when started with a `^`.\n   * Instead, links form:\n   *\n   * ```markdown\n   * ![^a](b)\n   *\n   * ![^a][b]\n   *\n   * [b]: c\n   * ```\n   *\n   * ```html\n   * <p>!<a href=\\\"b\\\">^a</a></p>\n   * <p>!<a href=\\\"c\\\">^a</a></p>\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    // To do: use a new field to do this, this is still needed for\n    // `micromark-extension-gfm-footnote`, but the `label-start-link`\n    // behavior isn’t.\n    // Hidden footnotes hook.\n    /* c8 ignore next 3 */\n    return code === 94 && '_hiddenFootnoteSupport' in self.parser.constructs\n      ? nok(code)\n      : ok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n */\n\nimport {\n  markdownLineEndingOrSpace,\n  unicodePunctuation,\n  unicodeWhitespace\n} from 'micromark-util-character'\n/**\n * Classify whether a code represents whitespace, punctuation, or something\n * else.\n *\n * Used for attention (emphasis, strong), whose sequences can open or close\n * based on the class of surrounding characters.\n *\n * > 👉 **Note**: eof (`null`) is seen as whitespace.\n *\n * @param {Code} code\n *   Code.\n * @returns {typeof constants.characterGroupWhitespace | typeof constants.characterGroupPunctuation | undefined}\n *   Group.\n */\nexport function classifyCharacter(code) {\n  if (\n    code === null ||\n    markdownLineEndingOrSpace(code) ||\n    unicodeWhitespace(code)\n  ) {\n    return 1\n  }\n  if (unicodePunctuation(code)) {\n    return 2\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').Point} Point\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {push, splice} from 'micromark-util-chunked'\nimport {classifyCharacter} from 'micromark-util-classify-character'\nimport {resolveAll} from 'micromark-util-resolve-all'\n/** @type {Construct} */\nexport const attention = {\n  name: 'attention',\n  tokenize: tokenizeAttention,\n  resolveAll: resolveAllAttention\n}\n\n/**\n * Take all events and resolve attention to emphasis or strong.\n *\n * @type {Resolver}\n */\n// eslint-disable-next-line complexity\nfunction resolveAllAttention(events, context) {\n  let index = -1\n  /** @type {number} */\n  let open\n  /** @type {Token} */\n  let group\n  /** @type {Token} */\n  let text\n  /** @type {Token} */\n  let openingSequence\n  /** @type {Token} */\n  let closingSequence\n  /** @type {number} */\n  let use\n  /** @type {Array<Event>} */\n  let nextEvents\n  /** @type {number} */\n  let offset\n\n  // Walk through all events.\n  //\n  // Note: performance of this is fine on an mb of normal markdown, but it’s\n  // a bottleneck for malicious stuff.\n  while (++index < events.length) {\n    // Find a token that can close.\n    if (\n      events[index][0] === 'enter' &&\n      events[index][1].type === 'attentionSequence' &&\n      events[index][1]._close\n    ) {\n      open = index\n\n      // Now walk back to find an opener.\n      while (open--) {\n        // Find a token that can open the closer.\n        if (\n          events[open][0] === 'exit' &&\n          events[open][1].type === 'attentionSequence' &&\n          events[open][1]._open &&\n          // If the markers are the same:\n          context.sliceSerialize(events[open][1]).charCodeAt(0) ===\n            context.sliceSerialize(events[index][1]).charCodeAt(0)\n        ) {\n          // If the opening can close or the closing can open,\n          // and the close size *is not* a multiple of three,\n          // but the sum of the opening and closing size *is* multiple of three,\n          // then don’t match.\n          if (\n            (events[open][1]._close || events[index][1]._open) &&\n            (events[index][1].end.offset - events[index][1].start.offset) % 3 &&\n            !(\n              (events[open][1].end.offset -\n                events[open][1].start.offset +\n                events[index][1].end.offset -\n                events[index][1].start.offset) %\n              3\n            )\n          ) {\n            continue\n          }\n\n          // Number of markers to use from the sequence.\n          use =\n            events[open][1].end.offset - events[open][1].start.offset > 1 &&\n            events[index][1].end.offset - events[index][1].start.offset > 1\n              ? 2\n              : 1\n          const start = Object.assign({}, events[open][1].end)\n          const end = Object.assign({}, events[index][1].start)\n          movePoint(start, -use)\n          movePoint(end, use)\n          openingSequence = {\n            type: use > 1 ? 'strongSequence' : 'emphasisSequence',\n            start,\n            end: Object.assign({}, events[open][1].end)\n          }\n          closingSequence = {\n            type: use > 1 ? 'strongSequence' : 'emphasisSequence',\n            start: Object.assign({}, events[index][1].start),\n            end\n          }\n          text = {\n            type: use > 1 ? 'strongText' : 'emphasisText',\n            start: Object.assign({}, events[open][1].end),\n            end: Object.assign({}, events[index][1].start)\n          }\n          group = {\n            type: use > 1 ? 'strong' : 'emphasis',\n            start: Object.assign({}, openingSequence.start),\n            end: Object.assign({}, closingSequence.end)\n          }\n          events[open][1].end = Object.assign({}, openingSequence.start)\n          events[index][1].start = Object.assign({}, closingSequence.end)\n          nextEvents = []\n\n          // If there are more markers in the opening, add them before.\n          if (events[open][1].end.offset - events[open][1].start.offset) {\n            nextEvents = push(nextEvents, [\n              ['enter', events[open][1], context],\n              ['exit', events[open][1], context]\n            ])\n          }\n\n          // Opening.\n          nextEvents = push(nextEvents, [\n            ['enter', group, context],\n            ['enter', openingSequence, context],\n            ['exit', openingSequence, context],\n            ['enter', text, context]\n          ])\n\n          // Always populated by defaults.\n\n          // Between.\n          nextEvents = push(\n            nextEvents,\n            resolveAll(\n              context.parser.constructs.insideSpan.null,\n              events.slice(open + 1, index),\n              context\n            )\n          )\n\n          // Closing.\n          nextEvents = push(nextEvents, [\n            ['exit', text, context],\n            ['enter', closingSequence, context],\n            ['exit', closingSequence, context],\n            ['exit', group, context]\n          ])\n\n          // If there are more markers in the closing, add them after.\n          if (events[index][1].end.offset - events[index][1].start.offset) {\n            offset = 2\n            nextEvents = push(nextEvents, [\n              ['enter', events[index][1], context],\n              ['exit', events[index][1], context]\n            ])\n          } else {\n            offset = 0\n          }\n          splice(events, open - 1, index - open + 3, nextEvents)\n          index = open + nextEvents.length - offset - 2\n          break\n        }\n      }\n    }\n  }\n\n  // Remove remaining sequences.\n  index = -1\n  while (++index < events.length) {\n    if (events[index][1].type === 'attentionSequence') {\n      events[index][1].type = 'data'\n    }\n  }\n  return events\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeAttention(effects, ok) {\n  const attentionMarkers = this.parser.constructs.attentionMarkers.null\n  const previous = this.previous\n  const before = classifyCharacter(previous)\n\n  /** @type {NonNullable<Code>} */\n  let marker\n  return start\n\n  /**\n   * Before a sequence.\n   *\n   * ```markdown\n   * > | **\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    marker = code\n    effects.enter('attentionSequence')\n    return inside(code)\n  }\n\n  /**\n   * In a sequence.\n   *\n   * ```markdown\n   * > | **\n   *     ^^\n   * ```\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    if (code === marker) {\n      effects.consume(code)\n      return inside\n    }\n    const token = effects.exit('attentionSequence')\n\n    // To do: next major: move this to resolver, just like `markdown-rs`.\n    const after = classifyCharacter(code)\n\n    // Always populated by defaults.\n\n    const open =\n      !after || (after === 2 && before) || attentionMarkers.includes(code)\n    const close =\n      !before || (before === 2 && after) || attentionMarkers.includes(previous)\n    token._open = Boolean(marker === 42 ? open : open && (before || !close))\n    token._close = Boolean(marker === 42 ? close : close && (after || !open))\n    return ok(code)\n  }\n}\n\n/**\n * Move a point a bit.\n *\n * Note: `move` only works inside lines! It’s not possible to move past other\n * chunks (replacement characters, tabs, or line endings).\n *\n * @param {Point} point\n * @param {number} offset\n * @returns {undefined}\n */\nfunction movePoint(point, offset) {\n  point.column += offset\n  point.offset += offset\n  point._bufferIndex += offset\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {\n  asciiAlpha,\n  asciiAlphanumeric,\n  asciiAtext,\n  asciiControl\n} from 'micromark-util-character'\n/** @type {Construct} */\nexport const autolink = {\n  name: 'autolink',\n  tokenize: tokenizeAutolink\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeAutolink(effects, ok, nok) {\n  let size = 0\n  return start\n\n  /**\n   * Start of an autolink.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *      ^\n   * > | a<user@example.com>b\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('autolink')\n    effects.enter('autolinkMarker')\n    effects.consume(code)\n    effects.exit('autolinkMarker')\n    effects.enter('autolinkProtocol')\n    return open\n  }\n\n  /**\n   * After `<`, at protocol or atext.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *       ^\n   * > | a<user@example.com>b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      return schemeOrEmailAtext\n    }\n    return emailAtext(code)\n  }\n\n  /**\n   * At second byte of protocol or atext.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *        ^\n   * > | a<user@example.com>b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function schemeOrEmailAtext(code) {\n    // ASCII alphanumeric and `+`, `-`, and `.`.\n    if (code === 43 || code === 45 || code === 46 || asciiAlphanumeric(code)) {\n      // Count the previous alphabetical from `open` too.\n      size = 1\n      return schemeInsideOrEmailAtext(code)\n    }\n    return emailAtext(code)\n  }\n\n  /**\n   * In ambiguous protocol or atext.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *        ^\n   * > | a<user@example.com>b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function schemeInsideOrEmailAtext(code) {\n    if (code === 58) {\n      effects.consume(code)\n      size = 0\n      return urlInside\n    }\n\n    // ASCII alphanumeric and `+`, `-`, and `.`.\n    if (\n      (code === 43 || code === 45 || code === 46 || asciiAlphanumeric(code)) &&\n      size++ < 32\n    ) {\n      effects.consume(code)\n      return schemeInsideOrEmailAtext\n    }\n    size = 0\n    return emailAtext(code)\n  }\n\n  /**\n   * After protocol, in URL.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function urlInside(code) {\n    if (code === 62) {\n      effects.exit('autolinkProtocol')\n      effects.enter('autolinkMarker')\n      effects.consume(code)\n      effects.exit('autolinkMarker')\n      effects.exit('autolink')\n      return ok\n    }\n\n    // ASCII control, space, or `<`.\n    if (code === null || code === 32 || code === 60 || asciiControl(code)) {\n      return nok(code)\n    }\n    effects.consume(code)\n    return urlInside\n  }\n\n  /**\n   * In email atext.\n   *\n   * ```markdown\n   * > | a<user.name@example.com>b\n   *              ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailAtext(code) {\n    if (code === 64) {\n      effects.consume(code)\n      return emailAtSignOrDot\n    }\n    if (asciiAtext(code)) {\n      effects.consume(code)\n      return emailAtext\n    }\n    return nok(code)\n  }\n\n  /**\n   * In label, after at-sign or dot.\n   *\n   * ```markdown\n   * > | a<user.name@example.com>b\n   *                 ^       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailAtSignOrDot(code) {\n    return asciiAlphanumeric(code) ? emailLabel(code) : nok(code)\n  }\n\n  /**\n   * In label, where `.` and `>` are allowed.\n   *\n   * ```markdown\n   * > | a<user.name@example.com>b\n   *                   ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailLabel(code) {\n    if (code === 46) {\n      effects.consume(code)\n      size = 0\n      return emailAtSignOrDot\n    }\n    if (code === 62) {\n      // Exit, then change the token type.\n      effects.exit('autolinkProtocol').type = 'autolinkEmail'\n      effects.enter('autolinkMarker')\n      effects.consume(code)\n      effects.exit('autolinkMarker')\n      effects.exit('autolink')\n      return ok\n    }\n    return emailValue(code)\n  }\n\n  /**\n   * In label, where `.` and `>` are *not* allowed.\n   *\n   * Though, this is also used in `emailLabel` to parse other values.\n   *\n   * ```markdown\n   * > | a<user.name@ex-ample.com>b\n   *                    ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailValue(code) {\n    // ASCII alphanumeric or `-`.\n    if ((code === 45 || asciiAlphanumeric(code)) && size++ < 63) {\n      const next = code === 45 ? emailValue : emailLabel\n      effects.consume(code)\n      return next\n    }\n    return nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {\n  asciiAlpha,\n  asciiAlphanumeric,\n  markdownLineEnding,\n  markdownLineEndingOrSpace,\n  markdownSpace\n} from 'micromark-util-character'\n/** @type {Construct} */\nexport const htmlText = {\n  name: 'htmlText',\n  tokenize: tokenizeHtmlText\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeHtmlText(effects, ok, nok) {\n  const self = this\n  /** @type {NonNullable<Code> | undefined} */\n  let marker\n  /** @type {number} */\n  let index\n  /** @type {State} */\n  let returnState\n  return start\n\n  /**\n   * Start of HTML (text).\n   *\n   * ```markdown\n   * > | a <b> c\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('htmlText')\n    effects.enter('htmlTextData')\n    effects.consume(code)\n    return open\n  }\n\n  /**\n   * After `<`, at tag name or other stuff.\n   *\n   * ```markdown\n   * > | a <b> c\n   *        ^\n   * > | a <!doctype> c\n   *        ^\n   * > | a <!--b--> c\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (code === 33) {\n      effects.consume(code)\n      return declarationOpen\n    }\n    if (code === 47) {\n      effects.consume(code)\n      return tagCloseStart\n    }\n    if (code === 63) {\n      effects.consume(code)\n      return instruction\n    }\n\n    // ASCII alphabetical.\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      return tagOpen\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `<!`, at declaration, comment, or CDATA.\n   *\n   * ```markdown\n   * > | a <!doctype> c\n   *         ^\n   * > | a <!--b--> c\n   *         ^\n   * > | a <![CDATA[>&<]]> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function declarationOpen(code) {\n    if (code === 45) {\n      effects.consume(code)\n      return commentOpenInside\n    }\n    if (code === 91) {\n      effects.consume(code)\n      index = 0\n      return cdataOpenInside\n    }\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      return declaration\n    }\n    return nok(code)\n  }\n\n  /**\n   * In a comment, after `<!-`, at another `-`.\n   *\n   * ```markdown\n   * > | a <!--b--> c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function commentOpenInside(code) {\n    if (code === 45) {\n      effects.consume(code)\n      return commentEnd\n    }\n    return nok(code)\n  }\n\n  /**\n   * In comment.\n   *\n   * ```markdown\n   * > | a <!--b--> c\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function comment(code) {\n    if (code === null) {\n      return nok(code)\n    }\n    if (code === 45) {\n      effects.consume(code)\n      return commentClose\n    }\n    if (markdownLineEnding(code)) {\n      returnState = comment\n      return lineEndingBefore(code)\n    }\n    effects.consume(code)\n    return comment\n  }\n\n  /**\n   * In comment, after `-`.\n   *\n   * ```markdown\n   * > | a <!--b--> c\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function commentClose(code) {\n    if (code === 45) {\n      effects.consume(code)\n      return commentEnd\n    }\n    return comment(code)\n  }\n\n  /**\n   * In comment, after `--`.\n   *\n   * ```markdown\n   * > | a <!--b--> c\n   *              ^\n   * ```\n   *\n   * @type {State}\n   */\n  function commentEnd(code) {\n    return code === 62\n      ? end(code)\n      : code === 45\n      ? commentClose(code)\n      : comment(code)\n  }\n\n  /**\n   * After `<![`, in CDATA, expecting `CDATA[`.\n   *\n   * ```markdown\n   * > | a <![CDATA[>&<]]> b\n   *          ^^^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdataOpenInside(code) {\n    const value = 'CDATA['\n    if (code === value.charCodeAt(index++)) {\n      effects.consume(code)\n      return index === value.length ? cdata : cdataOpenInside\n    }\n    return nok(code)\n  }\n\n  /**\n   * In CDATA.\n   *\n   * ```markdown\n   * > | a <![CDATA[>&<]]> b\n   *                ^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdata(code) {\n    if (code === null) {\n      return nok(code)\n    }\n    if (code === 93) {\n      effects.consume(code)\n      return cdataClose\n    }\n    if (markdownLineEnding(code)) {\n      returnState = cdata\n      return lineEndingBefore(code)\n    }\n    effects.consume(code)\n    return cdata\n  }\n\n  /**\n   * In CDATA, after `]`, at another `]`.\n   *\n   * ```markdown\n   * > | a <![CDATA[>&<]]> b\n   *                    ^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdataClose(code) {\n    if (code === 93) {\n      effects.consume(code)\n      return cdataEnd\n    }\n    return cdata(code)\n  }\n\n  /**\n   * In CDATA, after `]]`, at `>`.\n   *\n   * ```markdown\n   * > | a <![CDATA[>&<]]> b\n   *                     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdataEnd(code) {\n    if (code === 62) {\n      return end(code)\n    }\n    if (code === 93) {\n      effects.consume(code)\n      return cdataEnd\n    }\n    return cdata(code)\n  }\n\n  /**\n   * In declaration.\n   *\n   * ```markdown\n   * > | a <!b> c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function declaration(code) {\n    if (code === null || code === 62) {\n      return end(code)\n    }\n    if (markdownLineEnding(code)) {\n      returnState = declaration\n      return lineEndingBefore(code)\n    }\n    effects.consume(code)\n    return declaration\n  }\n\n  /**\n   * In instruction.\n   *\n   * ```markdown\n   * > | a <?b?> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function instruction(code) {\n    if (code === null) {\n      return nok(code)\n    }\n    if (code === 63) {\n      effects.consume(code)\n      return instructionClose\n    }\n    if (markdownLineEnding(code)) {\n      returnState = instruction\n      return lineEndingBefore(code)\n    }\n    effects.consume(code)\n    return instruction\n  }\n\n  /**\n   * In instruction, after `?`, at `>`.\n   *\n   * ```markdown\n   * > | a <?b?> c\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function instructionClose(code) {\n    return code === 62 ? end(code) : instruction(code)\n  }\n\n  /**\n   * After `</`, in closing tag, at tag name.\n   *\n   * ```markdown\n   * > | a </b> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagCloseStart(code) {\n    // ASCII alphabetical.\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      return tagClose\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `</x`, in a tag name.\n   *\n   * ```markdown\n   * > | a </b> c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagClose(code) {\n    // ASCII alphanumerical and `-`.\n    if (code === 45 || asciiAlphanumeric(code)) {\n      effects.consume(code)\n      return tagClose\n    }\n    return tagCloseBetween(code)\n  }\n\n  /**\n   * In closing tag, after tag name.\n   *\n   * ```markdown\n   * > | a </b> c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagCloseBetween(code) {\n    if (markdownLineEnding(code)) {\n      returnState = tagCloseBetween\n      return lineEndingBefore(code)\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return tagCloseBetween\n    }\n    return end(code)\n  }\n\n  /**\n   * After `<x`, in opening tag name.\n   *\n   * ```markdown\n   * > | a <b> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpen(code) {\n    // ASCII alphanumerical and `-`.\n    if (code === 45 || asciiAlphanumeric(code)) {\n      effects.consume(code)\n      return tagOpen\n    }\n    if (code === 47 || code === 62 || markdownLineEndingOrSpace(code)) {\n      return tagOpenBetween(code)\n    }\n    return nok(code)\n  }\n\n  /**\n   * In opening tag, after tag name.\n   *\n   * ```markdown\n   * > | a <b> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenBetween(code) {\n    if (code === 47) {\n      effects.consume(code)\n      return end\n    }\n\n    // ASCII alphabetical and `:` and `_`.\n    if (code === 58 || code === 95 || asciiAlpha(code)) {\n      effects.consume(code)\n      return tagOpenAttributeName\n    }\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenBetween\n      return lineEndingBefore(code)\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return tagOpenBetween\n    }\n    return end(code)\n  }\n\n  /**\n   * In attribute name.\n   *\n   * ```markdown\n   * > | a <b c> d\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeName(code) {\n    // ASCII alphabetical and `-`, `.`, `:`, and `_`.\n    if (\n      code === 45 ||\n      code === 46 ||\n      code === 58 ||\n      code === 95 ||\n      asciiAlphanumeric(code)\n    ) {\n      effects.consume(code)\n      return tagOpenAttributeName\n    }\n    return tagOpenAttributeNameAfter(code)\n  }\n\n  /**\n   * After attribute name, before initializer, the end of the tag, or\n   * whitespace.\n   *\n   * ```markdown\n   * > | a <b c> d\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeNameAfter(code) {\n    if (code === 61) {\n      effects.consume(code)\n      return tagOpenAttributeValueBefore\n    }\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenAttributeNameAfter\n      return lineEndingBefore(code)\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return tagOpenAttributeNameAfter\n    }\n    return tagOpenBetween(code)\n  }\n\n  /**\n   * Before unquoted, double quoted, or single quoted attribute value, allowing\n   * whitespace.\n   *\n   * ```markdown\n   * > | a <b c=d> e\n   *            ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeValueBefore(code) {\n    if (\n      code === null ||\n      code === 60 ||\n      code === 61 ||\n      code === 62 ||\n      code === 96\n    ) {\n      return nok(code)\n    }\n    if (code === 34 || code === 39) {\n      effects.consume(code)\n      marker = code\n      return tagOpenAttributeValueQuoted\n    }\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenAttributeValueBefore\n      return lineEndingBefore(code)\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return tagOpenAttributeValueBefore\n    }\n    effects.consume(code)\n    return tagOpenAttributeValueUnquoted\n  }\n\n  /**\n   * In double or single quoted attribute value.\n   *\n   * ```markdown\n   * > | a <b c=\"d\"> e\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeValueQuoted(code) {\n    if (code === marker) {\n      effects.consume(code)\n      marker = undefined\n      return tagOpenAttributeValueQuotedAfter\n    }\n    if (code === null) {\n      return nok(code)\n    }\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenAttributeValueQuoted\n      return lineEndingBefore(code)\n    }\n    effects.consume(code)\n    return tagOpenAttributeValueQuoted\n  }\n\n  /**\n   * In unquoted attribute value.\n   *\n   * ```markdown\n   * > | a <b c=d> e\n   *            ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeValueUnquoted(code) {\n    if (\n      code === null ||\n      code === 34 ||\n      code === 39 ||\n      code === 60 ||\n      code === 61 ||\n      code === 96\n    ) {\n      return nok(code)\n    }\n    if (code === 47 || code === 62 || markdownLineEndingOrSpace(code)) {\n      return tagOpenBetween(code)\n    }\n    effects.consume(code)\n    return tagOpenAttributeValueUnquoted\n  }\n\n  /**\n   * After double or single quoted attribute value, before whitespace or the end\n   * of the tag.\n   *\n   * ```markdown\n   * > | a <b c=\"d\"> e\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeValueQuotedAfter(code) {\n    if (code === 47 || code === 62 || markdownLineEndingOrSpace(code)) {\n      return tagOpenBetween(code)\n    }\n    return nok(code)\n  }\n\n  /**\n   * In certain circumstances of a tag where only an `>` is allowed.\n   *\n   * ```markdown\n   * > | a <b c=\"d\"> e\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function end(code) {\n    if (code === 62) {\n      effects.consume(code)\n      effects.exit('htmlTextData')\n      effects.exit('htmlText')\n      return ok\n    }\n    return nok(code)\n  }\n\n  /**\n   * At eol.\n   *\n   * > 👉 **Note**: we can’t have blank lines in text, so no need to worry about\n   * > empty tokens.\n   *\n   * ```markdown\n   * > | a <!--a\n   *            ^\n   *   | b-->\n   * ```\n   *\n   * @type {State}\n   */\n  function lineEndingBefore(code) {\n    effects.exit('htmlTextData')\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return lineEndingAfter\n  }\n\n  /**\n   * After eol, at optional whitespace.\n   *\n   * > 👉 **Note**: we can’t have blank lines in text, so no need to worry about\n   * > empty tokens.\n   *\n   * ```markdown\n   *   | a <!--a\n   * > | b-->\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function lineEndingAfter(code) {\n    // Always populated by defaults.\n\n    return markdownSpace(code)\n      ? factorySpace(\n          effects,\n          lineEndingAfterPrefix,\n          'linePrefix',\n          self.parser.constructs.disable.null.includes('codeIndented')\n            ? undefined\n            : 4\n        )(code)\n      : lineEndingAfterPrefix(code)\n  }\n\n  /**\n   * After eol, after optional whitespace.\n   *\n   * > 👉 **Note**: we can’t have blank lines in text, so no need to worry about\n   * > empty tokens.\n   *\n   * ```markdown\n   *   | a <!--a\n   * > | b-->\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function lineEndingAfterPrefix(code) {\n    effects.enter('htmlTextData')\n    return returnState(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {labelEnd} from './label-end.js'\n\n/** @type {Construct} */\nexport const labelStartLink = {\n  name: 'labelStartLink',\n  tokenize: tokenizeLabelStartLink,\n  resolveAll: labelEnd.resolveAll\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeLabelStartLink(effects, ok, nok) {\n  const self = this\n  return start\n\n  /**\n   * Start of label (link) start.\n   *\n   * ```markdown\n   * > | a [b] c\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('labelLink')\n    effects.enter('labelMarker')\n    effects.consume(code)\n    effects.exit('labelMarker')\n    effects.exit('labelLink')\n    return after\n  }\n\n  /** @type {State} */\n  function after(code) {\n    // To do: this isn’t needed in `micromark-extension-gfm-footnote`,\n    // remove.\n    // Hidden footnotes hook.\n    /* c8 ignore next 3 */\n    return code === 94 && '_hiddenFootnoteSupport' in self.parser.constructs\n      ? nok(code)\n      : ok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {markdownLineEnding} from 'micromark-util-character'\n/** @type {Construct} */\nexport const hardBreakEscape = {\n  name: 'hardBreakEscape',\n  tokenize: tokenizeHardBreakEscape\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeHardBreakEscape(effects, ok, nok) {\n  return start\n\n  /**\n   * Start of a hard break (escape).\n   *\n   * ```markdown\n   * > | a\\\n   *      ^\n   *   | b\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('hardBreakEscape')\n    effects.consume(code)\n    return after\n  }\n\n  /**\n   * After `\\`, at eol.\n   *\n   * ```markdown\n   * > | a\\\n   *       ^\n   *   | b\n   * ```\n   *\n   *  @type {State}\n   */\n  function after(code) {\n    if (markdownLineEnding(code)) {\n      effects.exit('hardBreakEscape')\n      return ok(code)\n    }\n    return nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Previous} Previous\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {markdownLineEnding} from 'micromark-util-character'\n/** @type {Construct} */\nexport const codeText = {\n  name: 'codeText',\n  tokenize: tokenizeCodeText,\n  resolve: resolveCodeText,\n  previous\n}\n\n// To do: next major: don’t resolve, like `markdown-rs`.\n/** @type {Resolver} */\nfunction resolveCodeText(events) {\n  let tailExitIndex = events.length - 4\n  let headEnterIndex = 3\n  /** @type {number} */\n  let index\n  /** @type {number | undefined} */\n  let enter\n\n  // If we start and end with an EOL or a space.\n  if (\n    (events[headEnterIndex][1].type === 'lineEnding' ||\n      events[headEnterIndex][1].type === 'space') &&\n    (events[tailExitIndex][1].type === 'lineEnding' ||\n      events[tailExitIndex][1].type === 'space')\n  ) {\n    index = headEnterIndex\n\n    // And we have data.\n    while (++index < tailExitIndex) {\n      if (events[index][1].type === 'codeTextData') {\n        // Then we have padding.\n        events[headEnterIndex][1].type = 'codeTextPadding'\n        events[tailExitIndex][1].type = 'codeTextPadding'\n        headEnterIndex += 2\n        tailExitIndex -= 2\n        break\n      }\n    }\n  }\n\n  // Merge adjacent spaces and data.\n  index = headEnterIndex - 1\n  tailExitIndex++\n  while (++index <= tailExitIndex) {\n    if (enter === undefined) {\n      if (index !== tailExitIndex && events[index][1].type !== 'lineEnding') {\n        enter = index\n      }\n    } else if (\n      index === tailExitIndex ||\n      events[index][1].type === 'lineEnding'\n    ) {\n      events[enter][1].type = 'codeTextData'\n      if (index !== enter + 2) {\n        events[enter][1].end = events[index - 1][1].end\n        events.splice(enter + 2, index - enter - 2)\n        tailExitIndex -= index - enter - 2\n        index = enter + 2\n      }\n      enter = undefined\n    }\n  }\n  return events\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Previous}\n */\nfunction previous(code) {\n  // If there is a previous code, there will always be a tail.\n  return (\n    code !== 96 ||\n    this.events[this.events.length - 1][1].type === 'characterEscape'\n  )\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeCodeText(effects, ok, nok) {\n  const self = this\n  let sizeOpen = 0\n  /** @type {number} */\n  let size\n  /** @type {Token} */\n  let token\n  return start\n\n  /**\n   * Start of code (text).\n   *\n   * ```markdown\n   * > | `a`\n   *     ^\n   * > | \\`a`\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('codeText')\n    effects.enter('codeTextSequence')\n    return sequenceOpen(code)\n  }\n\n  /**\n   * In opening sequence.\n   *\n   * ```markdown\n   * > | `a`\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceOpen(code) {\n    if (code === 96) {\n      effects.consume(code)\n      sizeOpen++\n      return sequenceOpen\n    }\n    effects.exit('codeTextSequence')\n    return between(code)\n  }\n\n  /**\n   * Between something and something else.\n   *\n   * ```markdown\n   * > | `a`\n   *      ^^\n   * ```\n   *\n   * @type {State}\n   */\n  function between(code) {\n    // EOF.\n    if (code === null) {\n      return nok(code)\n    }\n\n    // To do: next major: don’t do spaces in resolve, but when compiling,\n    // like `markdown-rs`.\n    // Tabs don’t work, and virtual spaces don’t make sense.\n    if (code === 32) {\n      effects.enter('space')\n      effects.consume(code)\n      effects.exit('space')\n      return between\n    }\n\n    // Closing fence? Could also be data.\n    if (code === 96) {\n      token = effects.enter('codeTextSequence')\n      size = 0\n      return sequenceClose(code)\n    }\n    if (markdownLineEnding(code)) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return between\n    }\n\n    // Data.\n    effects.enter('codeTextData')\n    return data(code)\n  }\n\n  /**\n   * In data.\n   *\n   * ```markdown\n   * > | `a`\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function data(code) {\n    if (\n      code === null ||\n      code === 32 ||\n      code === 96 ||\n      markdownLineEnding(code)\n    ) {\n      effects.exit('codeTextData')\n      return between(code)\n    }\n    effects.consume(code)\n    return data\n  }\n\n  /**\n   * In closing sequence.\n   *\n   * ```markdown\n   * > | `a`\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceClose(code) {\n    // More.\n    if (code === 96) {\n      effects.consume(code)\n      size++\n      return sequenceClose\n    }\n\n    // Done!\n    if (size === sizeOpen) {\n      effects.exit('codeTextSequence')\n      effects.exit('codeText')\n      return ok(code)\n    }\n\n    // More or less accents: mark as data.\n    token.type = 'codeTextData'\n    return data(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Extension} Extension\n */\n\nimport {\n  attention,\n  autolink,\n  blockQuote,\n  characterEscape,\n  characterReference,\n  codeFenced,\n  codeIndented,\n  codeText,\n  definition,\n  hardBreakEscape,\n  headingAtx,\n  htmlFlow,\n  htmlText,\n  labelEnd,\n  labelStartImage,\n  labelStartLink,\n  lineEnding,\n  list,\n  setextUnderline,\n  thematicBreak\n} from 'micromark-core-commonmark'\nimport {resolver as resolveText} from './initialize/text.js'\n\n/** @satisfies {Extension['document']} */\nexport const document = {\n  [42]: list,\n  [43]: list,\n  [45]: list,\n  [48]: list,\n  [49]: list,\n  [50]: list,\n  [51]: list,\n  [52]: list,\n  [53]: list,\n  [54]: list,\n  [55]: list,\n  [56]: list,\n  [57]: list,\n  [62]: blockQuote\n}\n\n/** @satisfies {Extension['contentInitial']} */\nexport const contentInitial = {\n  [91]: definition\n}\n\n/** @satisfies {Extension['flowInitial']} */\nexport const flowInitial = {\n  [-2]: codeIndented,\n  [-1]: codeIndented,\n  [32]: codeIndented\n}\n\n/** @satisfies {Extension['flow']} */\nexport const flow = {\n  [35]: headingAtx,\n  [42]: thematicBreak,\n  [45]: [setextUnderline, thematicBreak],\n  [60]: htmlFlow,\n  [61]: setextUnderline,\n  [95]: thematicBreak,\n  [96]: codeFenced,\n  [126]: codeFenced\n}\n\n/** @satisfies {Extension['string']} */\nexport const string = {\n  [38]: characterReference,\n  [92]: characterEscape\n}\n\n/** @satisfies {Extension['text']} */\nexport const text = {\n  [-5]: lineEnding,\n  [-4]: lineEnding,\n  [-3]: lineEnding,\n  [33]: labelStartImage,\n  [38]: characterReference,\n  [42]: attention,\n  [60]: [autolink, htmlText],\n  [91]: labelStartLink,\n  [92]: [hardBreakEscape, characterEscape],\n  [93]: labelEnd,\n  [95]: attention,\n  [96]: codeText\n}\n\n/** @satisfies {Extension['insideSpan']} */\nexport const insideSpan = {\n  null: [attention, resolveText]\n}\n\n/** @satisfies {Extension['attentionMarkers']} */\nexport const attentionMarkers = {\n  null: [42, 95]\n}\n\n/** @satisfies {Extension['disable']} */\nexport const disable = {\n  null: []\n}\n","/**\n * @typedef {import('micromark-util-types').Create} Create\n * @typedef {import('micromark-util-types').FullNormalizedExtension} FullNormalizedExtension\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').ParseContext} ParseContext\n * @typedef {import('micromark-util-types').ParseOptions} ParseOptions\n */\n\nimport {combineExtensions} from 'micromark-util-combine-extensions'\nimport {content} from './initialize/content.js'\nimport {document} from './initialize/document.js'\nimport {flow} from './initialize/flow.js'\nimport {string, text} from './initialize/text.js'\nimport {createTokenizer} from './create-tokenizer.js'\nimport * as defaultConstructs from './constructs.js'\n\n/**\n * @param {ParseOptions | null | undefined} [options]\n * @returns {ParseContext}\n */\nexport function parse(options) {\n  const settings = options || {}\n  const constructs =\n    /** @type {FullNormalizedExtension} */\n    combineExtensions([defaultConstructs, ...(settings.extensions || [])])\n\n  /** @type {ParseContext} */\n  const parser = {\n    defined: [],\n    lazy: {},\n    constructs,\n    content: create(content),\n    document: create(document),\n    flow: create(flow),\n    string: create(string),\n    text: create(text)\n  }\n  return parser\n\n  /**\n   * @param {InitialConstruct} initial\n   */\n  function create(initial) {\n    return creator\n    /** @type {Create} */\n    function creator(from) {\n      return createTokenizer(parser, initial, from)\n    }\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Chunk} Chunk\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Encoding} Encoding\n * @typedef {import('micromark-util-types').Value} Value\n */\n\n/**\n * @callback Preprocessor\n * @param {Value} value\n * @param {Encoding | null | undefined} [encoding]\n * @param {boolean | null | undefined} [end=false]\n * @returns {Array<Chunk>}\n */\n\nconst search = /[\\0\\t\\n\\r]/g\n\n/**\n * @returns {Preprocessor}\n */\nexport function preprocess() {\n  let column = 1\n  let buffer = ''\n  /** @type {boolean | undefined} */\n  let start = true\n  /** @type {boolean | undefined} */\n  let atCarriageReturn\n  return preprocessor\n\n  /** @type {Preprocessor} */\n  // eslint-disable-next-line complexity\n  function preprocessor(value, encoding, end) {\n    /** @type {Array<Chunk>} */\n    const chunks = []\n    /** @type {RegExpMatchArray | null} */\n    let match\n    /** @type {number} */\n    let next\n    /** @type {number} */\n    let startPosition\n    /** @type {number} */\n    let endPosition\n    /** @type {Code} */\n    let code\n    value =\n      buffer +\n      (typeof value === 'string'\n        ? value.toString()\n        : new TextDecoder(encoding || undefined).decode(value))\n    startPosition = 0\n    buffer = ''\n    if (start) {\n      // To do: `markdown-rs` actually parses BOMs (byte order mark).\n      if (value.charCodeAt(0) === 65279) {\n        startPosition++\n      }\n      start = undefined\n    }\n    while (startPosition < value.length) {\n      search.lastIndex = startPosition\n      match = search.exec(value)\n      endPosition =\n        match && match.index !== undefined ? match.index : value.length\n      code = value.charCodeAt(endPosition)\n      if (!match) {\n        buffer = value.slice(startPosition)\n        break\n      }\n      if (code === 10 && startPosition === endPosition && atCarriageReturn) {\n        chunks.push(-3)\n        atCarriageReturn = undefined\n      } else {\n        if (atCarriageReturn) {\n          chunks.push(-5)\n          atCarriageReturn = undefined\n        }\n        if (startPosition < endPosition) {\n          chunks.push(value.slice(startPosition, endPosition))\n          column += endPosition - startPosition\n        }\n        switch (code) {\n          case 0: {\n            chunks.push(65533)\n            column++\n            break\n          }\n          case 9: {\n            next = Math.ceil(column / 4) * 4\n            chunks.push(-2)\n            while (column++ < next) chunks.push(-1)\n            break\n          }\n          case 10: {\n            chunks.push(-4)\n            column = 1\n            break\n          }\n          default: {\n            atCarriageReturn = true\n            column = 1\n          }\n        }\n      }\n      startPosition = endPosition + 1\n    }\n    if (end) {\n      if (atCarriageReturn) chunks.push(-5)\n      if (buffer) chunks.push(buffer)\n      chunks.push(null)\n    }\n    return chunks\n  }\n}\n","/**\n * Turn the number (in string form as either hexa- or plain decimal) coming from\n * a numeric character reference into a character.\n *\n * Sort of like `String.fromCodePoint(Number.parseInt(value, base))`, but makes\n * non-characters and control characters safe.\n *\n * @param {string} value\n *   Value to decode.\n * @param {number} base\n *   Numeric base.\n * @returns {string}\n *   Character.\n */\nexport function decodeNumericCharacterReference(value, base) {\n  const code = Number.parseInt(value, base);\n  if (\n  // C0 except for HT, LF, FF, CR, space.\n  code < 9 || code === 11 || code > 13 && code < 32 ||\n  // Control character (DEL) of C0, and C1 controls.\n  code > 126 && code < 160 ||\n  // Lone high surrogates and low surrogates.\n  code > 55_295 && code < 57_344 ||\n  // Noncharacters.\n  code > 64_975 && code < 65_008 || /* eslint-disable no-bitwise */\n  (code & 65_535) === 65_535 || (code & 65_535) === 65_534 || /* eslint-enable no-bitwise */\n  // Out of range\n  code > 1_114_111) {\n    return \"\\uFFFD\";\n  }\n  return String.fromCodePoint(code);\n}","import {decodeNamedCharacterReference} from 'decode-named-character-reference'\nimport {decodeNumericCharacterReference} from 'micromark-util-decode-numeric-character-reference'\nconst characterEscapeOrReference =\n  /\\\\([!-/:-@[-`{-~])|&(#(?:\\d{1,7}|x[\\da-f]{1,6})|[\\da-z]{1,31});/gi\n\n/**\n * Decode markdown strings (which occur in places such as fenced code info\n * strings, destinations, labels, and titles).\n *\n * The “string” content type allows character escapes and -references.\n * This decodes those.\n *\n * @param {string} value\n *   Value to decode.\n * @returns {string}\n *   Decoded value.\n */\nexport function decodeString(value) {\n  return value.replace(characterEscapeOrReference, decode)\n}\n\n/**\n * @param {string} $0\n * @param {string} $1\n * @param {string} $2\n * @returns {string}\n */\nfunction decode($0, $1, $2) {\n  if ($1) {\n    // Escape.\n    return $1\n  }\n\n  // Reference.\n  const head = $2.charCodeAt(0)\n  if (head === 35) {\n    const head = $2.charCodeAt(1)\n    const hex = head === 120 || head === 88\n    return decodeNumericCharacterReference($2.slice(hex ? 2 : 1), hex ? 16 : 10)\n  }\n  return decodeNamedCharacterReference($2) || $0\n}\n","/**\n * @typedef {import('mdast').Break} Break\n * @typedef {import('mdast').Blockquote} Blockquote\n * @typedef {import('mdast').Code} Code\n * @typedef {import('mdast').Definition} Definition\n * @typedef {import('mdast').Emphasis} Emphasis\n * @typedef {import('mdast').Heading} Heading\n * @typedef {import('mdast').Html} Html\n * @typedef {import('mdast').Image} Image\n * @typedef {import('mdast').InlineCode} InlineCode\n * @typedef {import('mdast').Link} Link\n * @typedef {import('mdast').List} List\n * @typedef {import('mdast').ListItem} ListItem\n * @typedef {import('mdast').Nodes} Nodes\n * @typedef {import('mdast').Paragraph} Paragraph\n * @typedef {import('mdast').Parent} Parent\n * @typedef {import('mdast').PhrasingContent} PhrasingContent\n * @typedef {import('mdast').ReferenceType} ReferenceType\n * @typedef {import('mdast').Root} Root\n * @typedef {import('mdast').Strong} Strong\n * @typedef {import('mdast').Text} Text\n * @typedef {import('mdast').ThematicBreak} ThematicBreak\n *\n * @typedef {import('micromark-util-types').Encoding} Encoding\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').ParseOptions} ParseOptions\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Value} Value\n *\n * @typedef {import('unist').Point} Point\n *\n * @typedef {import('../index.js').CompileData} CompileData\n */\n\n/**\n * @typedef {Omit<Parent, 'children' | 'type'> & {type: 'fragment', children: Array<PhrasingContent>}} Fragment\n */\n\n/**\n * @callback Transform\n *   Extra transform, to change the AST afterwards.\n * @param {Root} tree\n *   Tree to transform.\n * @returns {Root | null | undefined | void}\n *   New tree or nothing (in which case the current tree is used).\n *\n * @callback Handle\n *   Handle a token.\n * @param {CompileContext} this\n *   Context.\n * @param {Token} token\n *   Current token.\n * @returns {undefined | void}\n *   Nothing.\n *\n * @typedef {Record<string, Handle>} Handles\n *   Token types mapping to handles\n *\n * @callback OnEnterError\n *   Handle the case where the `right` token is open, but it is closed (by the\n *   `left` token) or because we reached the end of the document.\n * @param {Omit<CompileContext, 'sliceSerialize'>} this\n *   Context.\n * @param {Token | undefined} left\n *   Left token.\n * @param {Token} right\n *   Right token.\n * @returns {undefined}\n *   Nothing.\n *\n * @callback OnExitError\n *   Handle the case where the `right` token is open but it is closed by\n *   exiting the `left` token.\n * @param {Omit<CompileContext, 'sliceSerialize'>} this\n *   Context.\n * @param {Token} left\n *   Left token.\n * @param {Token} right\n *   Right token.\n * @returns {undefined}\n *   Nothing.\n *\n * @typedef {[Token, OnEnterError | undefined]} TokenTuple\n *   Open token on the stack, with an optional error handler for when\n *   that token isn’t closed properly.\n */\n\n/**\n * @typedef Config\n *   Configuration.\n *\n *   We have our defaults, but extensions will add more.\n * @property {Array<string>} canContainEols\n *   Token types where line endings are used.\n * @property {Handles} enter\n *   Opening handles.\n * @property {Handles} exit\n *   Closing handles.\n * @property {Array<Transform>} transforms\n *   Tree transforms.\n *\n * @typedef {Partial<Config>} Extension\n *   Change how markdown tokens from micromark are turned into mdast.\n *\n * @typedef CompileContext\n *   mdast compiler context.\n * @property {Array<Fragment | Nodes>} stack\n *   Stack of nodes.\n * @property {Array<TokenTuple>} tokenStack\n *   Stack of tokens.\n * @property {(this: CompileContext) => undefined} buffer\n *   Capture some of the output data.\n * @property {(this: CompileContext) => string} resume\n *   Stop capturing and access the output data.\n * @property {(this: CompileContext, node: Nodes, token: Token, onError?: OnEnterError) => undefined} enter\n *   Enter a node.\n * @property {(this: CompileContext, token: Token, onError?: OnExitError) => undefined} exit\n *   Exit a node.\n * @property {TokenizeContext['sliceSerialize']} sliceSerialize\n *   Get the string value of a token.\n * @property {Config} config\n *   Configuration.\n * @property {CompileData} data\n *   Info passed around; key/value store.\n *\n * @typedef FromMarkdownOptions\n *   Configuration for how to build mdast.\n * @property {Array<Extension | Array<Extension>> | null | undefined} [mdastExtensions]\n *   Extensions for this utility to change how tokens are turned into a tree.\n *\n * @typedef {ParseOptions & FromMarkdownOptions} Options\n *   Configuration.\n */\n\nimport {toString} from 'mdast-util-to-string'\nimport {parse, postprocess, preprocess} from 'micromark'\nimport {decodeNumericCharacterReference} from 'micromark-util-decode-numeric-character-reference'\nimport {decodeString} from 'micromark-util-decode-string'\nimport {normalizeIdentifier} from 'micromark-util-normalize-identifier'\nimport {decodeNamedCharacterReference} from 'decode-named-character-reference'\nimport {stringifyPosition} from 'unist-util-stringify-position'\nconst own = {}.hasOwnProperty\n\n/**\n * Turn markdown into a syntax tree.\n *\n * @overload\n * @param {Value} value\n * @param {Encoding | null | undefined} [encoding]\n * @param {Options | null | undefined} [options]\n * @returns {Root}\n *\n * @overload\n * @param {Value} value\n * @param {Options | null | undefined} [options]\n * @returns {Root}\n *\n * @param {Value} value\n *   Markdown to parse.\n * @param {Encoding | Options | null | undefined} [encoding]\n *   Character encoding for when `value` is `Buffer`.\n * @param {Options | null | undefined} [options]\n *   Configuration.\n * @returns {Root}\n *   mdast tree.\n */\nexport function fromMarkdown(value, encoding, options) {\n  if (typeof encoding !== 'string') {\n    options = encoding\n    encoding = undefined\n  }\n  return compiler(options)(\n    postprocess(\n      parse(options).document().write(preprocess()(value, encoding, true))\n    )\n  )\n}\n\n/**\n * Note this compiler only understand complete buffering, not streaming.\n *\n * @param {Options | null | undefined} [options]\n */\nfunction compiler(options) {\n  /** @type {Config} */\n  const config = {\n    transforms: [],\n    canContainEols: ['emphasis', 'fragment', 'heading', 'paragraph', 'strong'],\n    enter: {\n      autolink: opener(link),\n      autolinkProtocol: onenterdata,\n      autolinkEmail: onenterdata,\n      atxHeading: opener(heading),\n      blockQuote: opener(blockQuote),\n      characterEscape: onenterdata,\n      characterReference: onenterdata,\n      codeFenced: opener(codeFlow),\n      codeFencedFenceInfo: buffer,\n      codeFencedFenceMeta: buffer,\n      codeIndented: opener(codeFlow, buffer),\n      codeText: opener(codeText, buffer),\n      codeTextData: onenterdata,\n      data: onenterdata,\n      codeFlowValue: onenterdata,\n      definition: opener(definition),\n      definitionDestinationString: buffer,\n      definitionLabelString: buffer,\n      definitionTitleString: buffer,\n      emphasis: opener(emphasis),\n      hardBreakEscape: opener(hardBreak),\n      hardBreakTrailing: opener(hardBreak),\n      htmlFlow: opener(html, buffer),\n      htmlFlowData: onenterdata,\n      htmlText: opener(html, buffer),\n      htmlTextData: onenterdata,\n      image: opener(image),\n      label: buffer,\n      link: opener(link),\n      listItem: opener(listItem),\n      listItemValue: onenterlistitemvalue,\n      listOrdered: opener(list, onenterlistordered),\n      listUnordered: opener(list),\n      paragraph: opener(paragraph),\n      reference: onenterreference,\n      referenceString: buffer,\n      resourceDestinationString: buffer,\n      resourceTitleString: buffer,\n      setextHeading: opener(heading),\n      strong: opener(strong),\n      thematicBreak: opener(thematicBreak)\n    },\n    exit: {\n      atxHeading: closer(),\n      atxHeadingSequence: onexitatxheadingsequence,\n      autolink: closer(),\n      autolinkEmail: onexitautolinkemail,\n      autolinkProtocol: onexitautolinkprotocol,\n      blockQuote: closer(),\n      characterEscapeValue: onexitdata,\n      characterReferenceMarkerHexadecimal: onexitcharacterreferencemarker,\n      characterReferenceMarkerNumeric: onexitcharacterreferencemarker,\n      characterReferenceValue: onexitcharacterreferencevalue,\n      codeFenced: closer(onexitcodefenced),\n      codeFencedFence: onexitcodefencedfence,\n      codeFencedFenceInfo: onexitcodefencedfenceinfo,\n      codeFencedFenceMeta: onexitcodefencedfencemeta,\n      codeFlowValue: onexitdata,\n      codeIndented: closer(onexitcodeindented),\n      codeText: closer(onexitcodetext),\n      codeTextData: onexitdata,\n      data: onexitdata,\n      definition: closer(),\n      definitionDestinationString: onexitdefinitiondestinationstring,\n      definitionLabelString: onexitdefinitionlabelstring,\n      definitionTitleString: onexitdefinitiontitlestring,\n      emphasis: closer(),\n      hardBreakEscape: closer(onexithardbreak),\n      hardBreakTrailing: closer(onexithardbreak),\n      htmlFlow: closer(onexithtmlflow),\n      htmlFlowData: onexitdata,\n      htmlText: closer(onexithtmltext),\n      htmlTextData: onexitdata,\n      image: closer(onexitimage),\n      label: onexitlabel,\n      labelText: onexitlabeltext,\n      lineEnding: onexitlineending,\n      link: closer(onexitlink),\n      listItem: closer(),\n      listOrdered: closer(),\n      listUnordered: closer(),\n      paragraph: closer(),\n      referenceString: onexitreferencestring,\n      resourceDestinationString: onexitresourcedestinationstring,\n      resourceTitleString: onexitresourcetitlestring,\n      resource: onexitresource,\n      setextHeading: closer(onexitsetextheading),\n      setextHeadingLineSequence: onexitsetextheadinglinesequence,\n      setextHeadingText: onexitsetextheadingtext,\n      strong: closer(),\n      thematicBreak: closer()\n    }\n  }\n  configure(config, (options || {}).mdastExtensions || [])\n\n  /** @type {CompileData} */\n  const data = {}\n  return compile\n\n  /**\n   * Turn micromark events into an mdast tree.\n   *\n   * @param {Array<Event>} events\n   *   Events.\n   * @returns {Root}\n   *   mdast tree.\n   */\n  function compile(events) {\n    /** @type {Root} */\n    let tree = {\n      type: 'root',\n      children: []\n    }\n    /** @type {Omit<CompileContext, 'sliceSerialize'>} */\n    const context = {\n      stack: [tree],\n      tokenStack: [],\n      config,\n      enter,\n      exit,\n      buffer,\n      resume,\n      data\n    }\n    /** @type {Array<number>} */\n    const listStack = []\n    let index = -1\n    while (++index < events.length) {\n      // We preprocess lists to add `listItem` tokens, and to infer whether\n      // items the list itself are spread out.\n      if (\n        events[index][1].type === 'listOrdered' ||\n        events[index][1].type === 'listUnordered'\n      ) {\n        if (events[index][0] === 'enter') {\n          listStack.push(index)\n        } else {\n          const tail = listStack.pop()\n          index = prepareList(events, tail, index)\n        }\n      }\n    }\n    index = -1\n    while (++index < events.length) {\n      const handler = config[events[index][0]]\n      if (own.call(handler, events[index][1].type)) {\n        handler[events[index][1].type].call(\n          Object.assign(\n            {\n              sliceSerialize: events[index][2].sliceSerialize\n            },\n            context\n          ),\n          events[index][1]\n        )\n      }\n    }\n\n    // Handle tokens still being open.\n    if (context.tokenStack.length > 0) {\n      const tail = context.tokenStack[context.tokenStack.length - 1]\n      const handler = tail[1] || defaultOnError\n      handler.call(context, undefined, tail[0])\n    }\n\n    // Figure out `root` position.\n    tree.position = {\n      start: point(\n        events.length > 0\n          ? events[0][1].start\n          : {\n              line: 1,\n              column: 1,\n              offset: 0\n            }\n      ),\n      end: point(\n        events.length > 0\n          ? events[events.length - 2][1].end\n          : {\n              line: 1,\n              column: 1,\n              offset: 0\n            }\n      )\n    }\n\n    // Call transforms.\n    index = -1\n    while (++index < config.transforms.length) {\n      tree = config.transforms[index](tree) || tree\n    }\n    return tree\n  }\n\n  /**\n   * @param {Array<Event>} events\n   * @param {number} start\n   * @param {number} length\n   * @returns {number}\n   */\n  function prepareList(events, start, length) {\n    let index = start - 1\n    let containerBalance = -1\n    let listSpread = false\n    /** @type {Token | undefined} */\n    let listItem\n    /** @type {number | undefined} */\n    let lineIndex\n    /** @type {number | undefined} */\n    let firstBlankLineIndex\n    /** @type {boolean | undefined} */\n    let atMarker\n    while (++index <= length) {\n      const event = events[index]\n      switch (event[1].type) {\n        case 'listUnordered':\n        case 'listOrdered':\n        case 'blockQuote': {\n          if (event[0] === 'enter') {\n            containerBalance++\n          } else {\n            containerBalance--\n          }\n          atMarker = undefined\n          break\n        }\n        case 'lineEndingBlank': {\n          if (event[0] === 'enter') {\n            if (\n              listItem &&\n              !atMarker &&\n              !containerBalance &&\n              !firstBlankLineIndex\n            ) {\n              firstBlankLineIndex = index\n            }\n            atMarker = undefined\n          }\n          break\n        }\n        case 'linePrefix':\n        case 'listItemValue':\n        case 'listItemMarker':\n        case 'listItemPrefix':\n        case 'listItemPrefixWhitespace': {\n          // Empty.\n\n          break\n        }\n        default: {\n          atMarker = undefined\n        }\n      }\n      if (\n        (!containerBalance &&\n          event[0] === 'enter' &&\n          event[1].type === 'listItemPrefix') ||\n        (containerBalance === -1 &&\n          event[0] === 'exit' &&\n          (event[1].type === 'listUnordered' ||\n            event[1].type === 'listOrdered'))\n      ) {\n        if (listItem) {\n          let tailIndex = index\n          lineIndex = undefined\n          while (tailIndex--) {\n            const tailEvent = events[tailIndex]\n            if (\n              tailEvent[1].type === 'lineEnding' ||\n              tailEvent[1].type === 'lineEndingBlank'\n            ) {\n              if (tailEvent[0] === 'exit') continue\n              if (lineIndex) {\n                events[lineIndex][1].type = 'lineEndingBlank'\n                listSpread = true\n              }\n              tailEvent[1].type = 'lineEnding'\n              lineIndex = tailIndex\n            } else if (\n              tailEvent[1].type === 'linePrefix' ||\n              tailEvent[1].type === 'blockQuotePrefix' ||\n              tailEvent[1].type === 'blockQuotePrefixWhitespace' ||\n              tailEvent[1].type === 'blockQuoteMarker' ||\n              tailEvent[1].type === 'listItemIndent'\n            ) {\n              // Empty\n            } else {\n              break\n            }\n          }\n          if (\n            firstBlankLineIndex &&\n            (!lineIndex || firstBlankLineIndex < lineIndex)\n          ) {\n            listItem._spread = true\n          }\n\n          // Fix position.\n          listItem.end = Object.assign(\n            {},\n            lineIndex ? events[lineIndex][1].start : event[1].end\n          )\n          events.splice(lineIndex || index, 0, ['exit', listItem, event[2]])\n          index++\n          length++\n        }\n\n        // Create a new list item.\n        if (event[1].type === 'listItemPrefix') {\n          /** @type {Token} */\n          const item = {\n            type: 'listItem',\n            _spread: false,\n            start: Object.assign({}, event[1].start),\n            // @ts-expect-error: we’ll add `end` in a second.\n            end: undefined\n          }\n          listItem = item\n          events.splice(index, 0, ['enter', item, event[2]])\n          index++\n          length++\n          firstBlankLineIndex = undefined\n          atMarker = true\n        }\n      }\n    }\n    events[start][1]._spread = listSpread\n    return length\n  }\n\n  /**\n   * Create an opener handle.\n   *\n   * @param {(token: Token) => Nodes} create\n   *   Create a node.\n   * @param {Handle | undefined} [and]\n   *   Optional function to also run.\n   * @returns {Handle}\n   *   Handle.\n   */\n  function opener(create, and) {\n    return open\n\n    /**\n     * @this {CompileContext}\n     * @param {Token} token\n     * @returns {undefined}\n     */\n    function open(token) {\n      enter.call(this, create(token), token)\n      if (and) and.call(this, token)\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @returns {undefined}\n   */\n  function buffer() {\n    this.stack.push({\n      type: 'fragment',\n      children: []\n    })\n  }\n\n  /**\n   * @this {CompileContext}\n   *   Context.\n   * @param {Nodes} node\n   *   Node to enter.\n   * @param {Token} token\n   *   Corresponding token.\n   * @param {OnEnterError | undefined} [errorHandler]\n   *   Handle the case where this token is open, but it is closed by something else.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  function enter(node, token, errorHandler) {\n    const parent = this.stack[this.stack.length - 1]\n    /** @type {Array<Nodes>} */\n    const siblings = parent.children\n    siblings.push(node)\n    this.stack.push(node)\n    this.tokenStack.push([token, errorHandler])\n    node.position = {\n      start: point(token.start),\n      // @ts-expect-error: `end` will be patched later.\n      end: undefined\n    }\n  }\n\n  /**\n   * Create a closer handle.\n   *\n   * @param {Handle | undefined} [and]\n   *   Optional function to also run.\n   * @returns {Handle}\n   *   Handle.\n   */\n  function closer(and) {\n    return close\n\n    /**\n     * @this {CompileContext}\n     * @param {Token} token\n     * @returns {undefined}\n     */\n    function close(token) {\n      if (and) and.call(this, token)\n      exit.call(this, token)\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   *   Context.\n   * @param {Token} token\n   *   Corresponding token.\n   * @param {OnExitError | undefined} [onExitError]\n   *   Handle the case where another token is open.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  function exit(token, onExitError) {\n    const node = this.stack.pop()\n    const open = this.tokenStack.pop()\n    if (!open) {\n      throw new Error(\n        'Cannot close `' +\n          token.type +\n          '` (' +\n          stringifyPosition({\n            start: token.start,\n            end: token.end\n          }) +\n          '): it’s not open'\n      )\n    } else if (open[0].type !== token.type) {\n      if (onExitError) {\n        onExitError.call(this, token, open[0])\n      } else {\n        const handler = open[1] || defaultOnError\n        handler.call(this, token, open[0])\n      }\n    }\n    node.position.end = point(token.end)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @returns {string}\n   */\n  function resume() {\n    return toString(this.stack.pop())\n  }\n\n  //\n  // Handlers.\n  //\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onenterlistordered() {\n    this.data.expectingFirstListItemValue = true\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onenterlistitemvalue(token) {\n    if (this.data.expectingFirstListItemValue) {\n      const ancestor = this.stack[this.stack.length - 2]\n      ancestor.start = Number.parseInt(this.sliceSerialize(token), 10)\n      this.data.expectingFirstListItemValue = undefined\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodefencedfenceinfo() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.lang = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodefencedfencemeta() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.meta = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodefencedfence() {\n    // Exit if this is the closing fence.\n    if (this.data.flowCodeInside) return\n    this.buffer()\n    this.data.flowCodeInside = true\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodefenced() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.value = data.replace(/^(\\r?\\n|\\r)|(\\r?\\n|\\r)$/g, '')\n    this.data.flowCodeInside = undefined\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodeindented() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.value = data.replace(/(\\r?\\n|\\r)$/g, '')\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitdefinitionlabelstring(token) {\n    const label = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.label = label\n    node.identifier = normalizeIdentifier(\n      this.sliceSerialize(token)\n    ).toLowerCase()\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitdefinitiontitlestring() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.title = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitdefinitiondestinationstring() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.url = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitatxheadingsequence(token) {\n    const node = this.stack[this.stack.length - 1]\n    if (!node.depth) {\n      const depth = this.sliceSerialize(token).length\n      node.depth = depth\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitsetextheadingtext() {\n    this.data.setextHeadingSlurpLineEnding = true\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitsetextheadinglinesequence(token) {\n    const node = this.stack[this.stack.length - 1]\n    node.depth = this.sliceSerialize(token).codePointAt(0) === 61 ? 1 : 2\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitsetextheading() {\n    this.data.setextHeadingSlurpLineEnding = undefined\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onenterdata(token) {\n    const node = this.stack[this.stack.length - 1]\n    /** @type {Array<Nodes>} */\n    const siblings = node.children\n    let tail = siblings[siblings.length - 1]\n    if (!tail || tail.type !== 'text') {\n      // Add a new text node.\n      tail = text()\n      tail.position = {\n        start: point(token.start),\n        // @ts-expect-error: we’ll add `end` later.\n        end: undefined\n      }\n      siblings.push(tail)\n    }\n    this.stack.push(tail)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitdata(token) {\n    const tail = this.stack.pop()\n    tail.value += this.sliceSerialize(token)\n    tail.position.end = point(token.end)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitlineending(token) {\n    const context = this.stack[this.stack.length - 1]\n    // If we’re at a hard break, include the line ending in there.\n    if (this.data.atHardBreak) {\n      const tail = context.children[context.children.length - 1]\n      tail.position.end = point(token.end)\n      this.data.atHardBreak = undefined\n      return\n    }\n    if (\n      !this.data.setextHeadingSlurpLineEnding &&\n      config.canContainEols.includes(context.type)\n    ) {\n      onenterdata.call(this, token)\n      onexitdata.call(this, token)\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexithardbreak() {\n    this.data.atHardBreak = true\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexithtmlflow() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.value = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexithtmltext() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.value = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitcodetext() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.value = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitlink() {\n    const node = this.stack[this.stack.length - 1]\n    // Note: there are also `identifier` and `label` fields on this link node!\n    // These are used / cleaned here.\n    // To do: clean.\n    if (this.data.inReference) {\n      /** @type {ReferenceType} */\n      const referenceType = this.data.referenceType || 'shortcut'\n      node.type += 'Reference'\n      // @ts-expect-error: mutate.\n      node.referenceType = referenceType\n      // @ts-expect-error: mutate.\n      delete node.url\n      delete node.title\n    } else {\n      // @ts-expect-error: mutate.\n      delete node.identifier\n      // @ts-expect-error: mutate.\n      delete node.label\n    }\n    this.data.referenceType = undefined\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitimage() {\n    const node = this.stack[this.stack.length - 1]\n    // Note: there are also `identifier` and `label` fields on this link node!\n    // These are used / cleaned here.\n    // To do: clean.\n    if (this.data.inReference) {\n      /** @type {ReferenceType} */\n      const referenceType = this.data.referenceType || 'shortcut'\n      node.type += 'Reference'\n      // @ts-expect-error: mutate.\n      node.referenceType = referenceType\n      // @ts-expect-error: mutate.\n      delete node.url\n      delete node.title\n    } else {\n      // @ts-expect-error: mutate.\n      delete node.identifier\n      // @ts-expect-error: mutate.\n      delete node.label\n    }\n    this.data.referenceType = undefined\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitlabeltext(token) {\n    const string = this.sliceSerialize(token)\n    const ancestor = this.stack[this.stack.length - 2]\n    // @ts-expect-error: stash this on the node, as it might become a reference\n    // later.\n    ancestor.label = decodeString(string)\n    // @ts-expect-error: same as above.\n    ancestor.identifier = normalizeIdentifier(string).toLowerCase()\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitlabel() {\n    const fragment = this.stack[this.stack.length - 1]\n    const value = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    // Assume a reference.\n    this.data.inReference = true\n    if (node.type === 'link') {\n      /** @type {Array<PhrasingContent>} */\n      const children = fragment.children\n      node.children = children\n    } else {\n      node.alt = value\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitresourcedestinationstring() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.url = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitresourcetitlestring() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.title = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitresource() {\n    this.data.inReference = undefined\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onenterreference() {\n    this.data.referenceType = 'collapsed'\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitreferencestring(token) {\n    const label = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    // @ts-expect-error: stash this on the node, as it might become a reference\n    // later.\n    node.label = label\n    // @ts-expect-error: same as above.\n    node.identifier = normalizeIdentifier(\n      this.sliceSerialize(token)\n    ).toLowerCase()\n    this.data.referenceType = 'full'\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitcharacterreferencemarker(token) {\n    this.data.characterReferenceType = token.type\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcharacterreferencevalue(token) {\n    const data = this.sliceSerialize(token)\n    const type = this.data.characterReferenceType\n    /** @type {string} */\n    let value\n    if (type) {\n      value = decodeNumericCharacterReference(\n        data,\n        type === 'characterReferenceMarkerNumeric' ? 10 : 16\n      )\n      this.data.characterReferenceType = undefined\n    } else {\n      const result = decodeNamedCharacterReference(data)\n      value = result\n    }\n    const tail = this.stack.pop()\n    tail.value += value\n    tail.position.end = point(token.end)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitautolinkprotocol(token) {\n    onexitdata.call(this, token)\n    const node = this.stack[this.stack.length - 1]\n    node.url = this.sliceSerialize(token)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitautolinkemail(token) {\n    onexitdata.call(this, token)\n    const node = this.stack[this.stack.length - 1]\n    node.url = 'mailto:' + this.sliceSerialize(token)\n  }\n\n  //\n  // Creaters.\n  //\n\n  /** @returns {Blockquote} */\n  function blockQuote() {\n    return {\n      type: 'blockquote',\n      children: []\n    }\n  }\n\n  /** @returns {Code} */\n  function codeFlow() {\n    return {\n      type: 'code',\n      lang: null,\n      meta: null,\n      value: ''\n    }\n  }\n\n  /** @returns {InlineCode} */\n  function codeText() {\n    return {\n      type: 'inlineCode',\n      value: ''\n    }\n  }\n\n  /** @returns {Definition} */\n  function definition() {\n    return {\n      type: 'definition',\n      identifier: '',\n      label: null,\n      title: null,\n      url: ''\n    }\n  }\n\n  /** @returns {Emphasis} */\n  function emphasis() {\n    return {\n      type: 'emphasis',\n      children: []\n    }\n  }\n\n  /** @returns {Heading} */\n  function heading() {\n    return {\n      type: 'heading',\n      // @ts-expect-error `depth` will be set later.\n      depth: 0,\n      children: []\n    }\n  }\n\n  /** @returns {Break} */\n  function hardBreak() {\n    return {\n      type: 'break'\n    }\n  }\n\n  /** @returns {Html} */\n  function html() {\n    return {\n      type: 'html',\n      value: ''\n    }\n  }\n\n  /** @returns {Image} */\n  function image() {\n    return {\n      type: 'image',\n      title: null,\n      url: '',\n      alt: null\n    }\n  }\n\n  /** @returns {Link} */\n  function link() {\n    return {\n      type: 'link',\n      title: null,\n      url: '',\n      children: []\n    }\n  }\n\n  /**\n   * @param {Token} token\n   * @returns {List}\n   */\n  function list(token) {\n    return {\n      type: 'list',\n      ordered: token.type === 'listOrdered',\n      start: null,\n      spread: token._spread,\n      children: []\n    }\n  }\n\n  /**\n   * @param {Token} token\n   * @returns {ListItem}\n   */\n  function listItem(token) {\n    return {\n      type: 'listItem',\n      spread: token._spread,\n      checked: null,\n      children: []\n    }\n  }\n\n  /** @returns {Paragraph} */\n  function paragraph() {\n    return {\n      type: 'paragraph',\n      children: []\n    }\n  }\n\n  /** @returns {Strong} */\n  function strong() {\n    return {\n      type: 'strong',\n      children: []\n    }\n  }\n\n  /** @returns {Text} */\n  function text() {\n    return {\n      type: 'text',\n      value: ''\n    }\n  }\n\n  /** @returns {ThematicBreak} */\n  function thematicBreak() {\n    return {\n      type: 'thematicBreak'\n    }\n  }\n}\n\n/**\n * Copy a point-like value.\n *\n * @param {Point} d\n *   Point-like value.\n * @returns {Point}\n *   unist point.\n */\nfunction point(d) {\n  return {\n    line: d.line,\n    column: d.column,\n    offset: d.offset\n  }\n}\n\n/**\n * @param {Config} combined\n * @param {Array<Array<Extension> | Extension>} extensions\n * @returns {undefined}\n */\nfunction configure(combined, extensions) {\n  let index = -1\n  while (++index < extensions.length) {\n    const value = extensions[index]\n    if (Array.isArray(value)) {\n      configure(combined, value)\n    } else {\n      extension(combined, value)\n    }\n  }\n}\n\n/**\n * @param {Config} combined\n * @param {Extension} extension\n * @returns {undefined}\n */\nfunction extension(combined, extension) {\n  /** @type {keyof Extension} */\n  let key\n  for (key in extension) {\n    if (own.call(extension, key)) {\n      switch (key) {\n        case 'canContainEols': {\n          const right = extension[key]\n          if (right) {\n            combined[key].push(...right)\n          }\n          break\n        }\n        case 'transforms': {\n          const right = extension[key]\n          if (right) {\n            combined[key].push(...right)\n          }\n          break\n        }\n        case 'enter':\n        case 'exit': {\n          const right = extension[key]\n          if (right) {\n            Object.assign(combined[key], right)\n          }\n          break\n        }\n        // No default\n      }\n    }\n  }\n}\n\n/** @type {OnEnterError} */\nfunction defaultOnError(left, right) {\n  if (left) {\n    throw new Error(\n      'Cannot close `' +\n        left.type +\n        '` (' +\n        stringifyPosition({\n          start: left.start,\n          end: left.end\n        }) +\n        '): a different token (`' +\n        right.type +\n        '`, ' +\n        stringifyPosition({\n          start: right.start,\n          end: right.end\n        }) +\n        ') is open'\n    )\n  } else {\n    throw new Error(\n      'Cannot close document, a token (`' +\n        right.type +\n        '`, ' +\n        stringifyPosition({\n          start: right.start,\n          end: right.end\n        }) +\n        ') is still open'\n    )\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Event} Event\n */\n\nimport {subtokenize} from 'micromark-util-subtokenize'\n\n/**\n * @param {Array<Event>} events\n * @returns {Array<Event>}\n */\nexport function postprocess(events) {\n  while (!subtokenize(events)) {\n    // Empty\n  }\n  return events\n}\n","/**\n * @typedef {import('mdast').Root} Root\n * @typedef {import('mdast-util-from-markdown').Options} FromMarkdownOptions\n * @typedef {import('unified').Parser<Root>} Parser\n * @typedef {import('unified').Processor<Root>} Processor\n */\n\n/**\n * @typedef {Omit<FromMarkdownOptions, 'extensions' | 'mdastExtensions'>} Options\n */\n\nimport {fromMarkdown} from 'mdast-util-from-markdown'\n\n/**\n * Aadd support for parsing from markdown.\n *\n * @param {Readonly<Options> | null | undefined} [options]\n *   Configuration (optional).\n * @returns {undefined}\n *   Nothing.\n */\nexport default function remarkParse(options) {\n  /** @type {Processor} */\n  // @ts-expect-error: TS in JSDoc generates wrong types if `this` is typed regularly.\n  const self = this\n\n  self.parser = parser\n\n  /**\n   * @type {Parser}\n   */\n  function parser(doc) {\n    return fromMarkdown(doc, {\n      ...self.data('settings'),\n      ...options,\n      // Note: these options are not in the readme.\n      // The goal is for them to be set by plugins on `data` instead of being\n      // passed by users.\n      extensions: self.data('micromarkExtensions') || [],\n      mdastExtensions: self.data('fromMarkdownExtensions') || []\n    })\n  }\n}\n","export const VOID       = -1;\nexport const PRIMITIVE  = 0;\nexport const ARRAY      = 1;\nexport const OBJECT     = 2;\nexport const DATE       = 3;\nexport const REGEXP     = 4;\nexport const MAP        = 5;\nexport const SET        = 6;\nexport const ERROR      = 7;\nexport const BIGINT     = 8;\n// export const SYMBOL = 9;\n","import {\n  VOID, PRIMITIVE,\n  ARRAY, OBJECT,\n  DATE, REGEXP, MAP, SET,\n  ERROR, BIGINT\n} from './types.js';\n\nconst env = typeof self === 'object' ? self : globalThis;\n\nconst deserializer = ($, _) => {\n  const as = (out, index) => {\n    $.set(index, out);\n    return out;\n  };\n\n  const unpair = index => {\n    if ($.has(index))\n      return $.get(index);\n\n    const [type, value] = _[index];\n    switch (type) {\n      case PRIMITIVE:\n      case VOID:\n        return as(value, index);\n      case ARRAY: {\n        const arr = as([], index);\n        for (const index of value)\n          arr.push(unpair(index));\n        return arr;\n      }\n      case OBJECT: {\n        const object = as({}, index);\n        for (const [key, index] of value)\n          object[unpair(key)] = unpair(index);\n        return object;\n      }\n      case DATE:\n        return as(new Date(value), index);\n      case REGEXP: {\n        const {source, flags} = value;\n        return as(new RegExp(source, flags), index);\n      }\n      case MAP: {\n        const map = as(new Map, index);\n        for (const [key, index] of value)\n          map.set(unpair(key), unpair(index));\n        return map;\n      }\n      case SET: {\n        const set = as(new Set, index);\n        for (const index of value)\n          set.add(unpair(index));\n        return set;\n      }\n      case ERROR: {\n        const {name, message} = value;\n        return as(new env[name](message), index);\n      }\n      case BIGINT:\n        return as(BigInt(value), index);\n      case 'BigInt':\n        return as(Object(BigInt(value)), index);\n    }\n    return as(new env[type](value), index);\n  };\n\n  return unpair;\n};\n\n/**\n * @typedef {Array<string,any>} Record a type representation\n */\n\n/**\n * Returns a deserialized value from a serialized array of Records.\n * @param {Record[]} serialized a previously serialized value.\n * @returns {any}\n */\nexport const deserialize = serialized => deserializer(new Map, serialized)(0);\n","import {\n  VOID, PRIMITIVE,\n  ARRAY, OBJECT,\n  DATE, REGEXP, MAP, SET,\n  ERROR, BIGINT\n} from './types.js';\n\nconst EMPTY = '';\n\nconst {toString} = {};\nconst {keys} = Object;\n\nconst typeOf = value => {\n  const type = typeof value;\n  if (type !== 'object' || !value)\n    return [PRIMITIVE, type];\n\n  const asString = toString.call(value).slice(8, -1);\n  switch (asString) {\n    case 'Array':\n      return [ARRAY, EMPTY];\n    case 'Object':\n      return [OBJECT, EMPTY];\n    case 'Date':\n      return [DATE, EMPTY];\n    case 'RegExp':\n      return [REGEXP, EMPTY];\n    case 'Map':\n      return [MAP, EMPTY];\n    case 'Set':\n      return [SET, EMPTY];\n  }\n\n  if (asString.includes('Array'))\n    return [ARRAY, asString];\n\n  if (asString.includes('Error'))\n    return [ERROR, asString];\n\n  return [OBJECT, asString];\n};\n\nconst shouldSkip = ([TYPE, type]) => (\n  TYPE === PRIMITIVE &&\n  (type === 'function' || type === 'symbol')\n);\n\nconst serializer = (strict, json, $, _) => {\n\n  const as = (out, value) => {\n    const index = _.push(out) - 1;\n    $.set(value, index);\n    return index;\n  };\n\n  const pair = value => {\n    if ($.has(value))\n      return $.get(value);\n\n    let [TYPE, type] = typeOf(value);\n    switch (TYPE) {\n      case PRIMITIVE: {\n        let entry = value;\n        switch (type) {\n          case 'bigint':\n            TYPE = BIGINT;\n            entry = value.toString();\n            break;\n          case 'function':\n          case 'symbol':\n            if (strict)\n              throw new TypeError('unable to serialize ' + type);\n            entry = null;\n            break;\n          case 'undefined':\n            return as([VOID], value);\n        }\n        return as([TYPE, entry], value);\n      }\n      case ARRAY: {\n        if (type)\n          return as([type, [...value]], value);\n  \n        const arr = [];\n        const index = as([TYPE, arr], value);\n        for (const entry of value)\n          arr.push(pair(entry));\n        return index;\n      }\n      case OBJECT: {\n        if (type) {\n          switch (type) {\n            case 'BigInt':\n              return as([type, value.toString()], value);\n            case 'Boolean':\n            case 'Number':\n            case 'String':\n              return as([type, value.valueOf()], value);\n          }\n        }\n\n        if (json && ('toJSON' in value))\n          return pair(value.toJSON());\n\n        const entries = [];\n        const index = as([TYPE, entries], value);\n        for (const key of keys(value)) {\n          if (strict || !shouldSkip(typeOf(value[key])))\n            entries.push([pair(key), pair(value[key])]);\n        }\n        return index;\n      }\n      case DATE:\n        return as([TYPE, value.toISOString()], value);\n      case REGEXP: {\n        const {source, flags} = value;\n        return as([TYPE, {source, flags}], value);\n      }\n      case MAP: {\n        const entries = [];\n        const index = as([TYPE, entries], value);\n        for (const [key, entry] of value) {\n          if (strict || !(shouldSkip(typeOf(key)) || shouldSkip(typeOf(entry))))\n            entries.push([pair(key), pair(entry)]);\n        }\n        return index;\n      }\n      case SET: {\n        const entries = [];\n        const index = as([TYPE, entries], value);\n        for (const entry of value) {\n          if (strict || !shouldSkip(typeOf(entry)))\n            entries.push(pair(entry));\n        }\n        return index;\n      }\n    }\n\n    const {message} = value;\n    return as([TYPE, {name: type, message}], value);\n  };\n\n  return pair;\n};\n\n/**\n * @typedef {Array<string,any>} Record a type representation\n */\n\n/**\n * Returns an array of serialized Records.\n * @param {any} value a serializable value.\n * @param {{json?: boolean, lossy?: boolean}?} options an object with a `lossy` or `json` property that,\n *  if `true`, will not throw errors on incompatible types, and behave more\n *  like JSON stringify would behave. Symbol and Function will be discarded.\n * @returns {Record[]}\n */\n export const serialize = (value, {json, lossy} = {}) => {\n  const _ = [];\n  return serializer(!(json || lossy), !!json, new Map, _)(value), _;\n};\n","import {deserialize} from './deserialize.js';\nimport {serialize} from './serialize.js';\n\n/**\n * @typedef {Array<string,any>} Record a type representation\n */\n\n/**\n * Returns an array of serialized Records.\n * @param {any} any a serializable value.\n * @param {{transfer?: any[], json?: boolean, lossy?: boolean}?} options an object with\n * a transfer option (ignored when polyfilled) and/or non standard fields that\n * fallback to the polyfill if present.\n * @returns {Record[]}\n */\nexport default typeof structuredClone === \"function\" ?\n  /* c8 ignore start */\n  (any, options) => (\n    options && ('json' in options || 'lossy' in options) ?\n      deserialize(serialize(any, options)) : structuredClone(any)\n  ) :\n  (any, options) => deserialize(serialize(any, options));\n  /* c8 ignore stop */\n\nexport {deserialize, serialize};\n","import {asciiAlphanumeric} from 'micromark-util-character'\nimport {encode} from 'micromark-util-encode'\n/**\n * Make a value safe for injection as a URL.\n *\n * This encodes unsafe characters with percent-encoding and skips already\n * encoded sequences (see `normalizeUri`).\n * Further unsafe characters are encoded as character references (see\n * `micromark-util-encode`).\n *\n * A regex of allowed protocols can be given, in which case the URL is\n * sanitized.\n * For example, `/^(https?|ircs?|mailto|xmpp)$/i` can be used for `a[href]`, or\n * `/^https?$/i` for `img[src]` (this is what `github.com` allows).\n * If the URL includes an unknown protocol (one not matched by `protocol`, such\n * as a dangerous example, `javascript:`), the value is ignored.\n *\n * @param {string | null | undefined} url\n *   URI to sanitize.\n * @param {RegExp | null | undefined} [protocol]\n *   Allowed protocols.\n * @returns {string}\n *   Sanitized URI.\n */\nexport function sanitizeUri(url, protocol) {\n  const value = encode(normalizeUri(url || ''))\n  if (!protocol) {\n    return value\n  }\n  const colon = value.indexOf(':')\n  const questionMark = value.indexOf('?')\n  const numberSign = value.indexOf('#')\n  const slash = value.indexOf('/')\n  if (\n    // If there is no protocol, it’s relative.\n    colon < 0 ||\n    // If the first colon is after a `?`, `#`, or `/`, it’s not a protocol.\n    (slash > -1 && colon > slash) ||\n    (questionMark > -1 && colon > questionMark) ||\n    (numberSign > -1 && colon > numberSign) ||\n    // It is a protocol, it should be allowed.\n    protocol.test(value.slice(0, colon))\n  ) {\n    return value\n  }\n  return ''\n}\n\n/**\n * Normalize a URL.\n *\n * Encode unsafe characters with percent-encoding, skipping already encoded\n * sequences.\n *\n * @param {string} value\n *   URI to normalize.\n * @returns {string}\n *   Normalized URI.\n */\nexport function normalizeUri(value) {\n  /** @type {Array<string>} */\n  const result = []\n  let index = -1\n  let start = 0\n  let skip = 0\n  while (++index < value.length) {\n    const code = value.charCodeAt(index)\n    /** @type {string} */\n    let replace = ''\n\n    // A correct percent encoded value.\n    if (\n      code === 37 &&\n      asciiAlphanumeric(value.charCodeAt(index + 1)) &&\n      asciiAlphanumeric(value.charCodeAt(index + 2))\n    ) {\n      skip = 2\n    }\n    // ASCII.\n    else if (code < 128) {\n      if (!/[!#$&-;=?-Z_a-z~]/.test(String.fromCharCode(code))) {\n        replace = String.fromCharCode(code)\n      }\n    }\n    // Astral.\n    else if (code > 55_295 && code < 57_344) {\n      const next = value.charCodeAt(index + 1)\n\n      // A correct surrogate pair.\n      if (code < 56_320 && next > 56_319 && next < 57_344) {\n        replace = String.fromCharCode(code, next)\n        skip = 1\n      }\n      // Lone surrogate.\n      else {\n        replace = '\\uFFFD'\n      }\n    }\n    // Unicode.\n    else {\n      replace = String.fromCharCode(code)\n    }\n    if (replace) {\n      result.push(value.slice(start, index), encodeURIComponent(replace))\n      start = index + skip + 1\n      replace = ''\n    }\n    if (skip) {\n      index += skip\n      skip = 0\n    }\n  }\n  return result.join('') + value.slice(start)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').ElementContent} ElementContent\n *\n * @typedef {import('./state.js').State} State\n */\n\n/**\n * @callback FootnoteBackContentTemplate\n *   Generate content for the backreference dynamically.\n *\n *   For the following markdown:\n *\n *   ```markdown\n *   Alpha[^micromark], bravo[^micromark], and charlie[^remark].\n *\n *   [^remark]: things about remark\n *   [^micromark]: things about micromark\n *   ```\n *\n *   This function will be called with:\n *\n *   *  `0` and `0` for the backreference from `things about micromark` to\n *      `alpha`, as it is the first used definition, and the first call to it\n *   *  `0` and `1` for the backreference from `things about micromark` to\n *      `bravo`, as it is the first used definition, and the second call to it\n *   *  `1` and `0` for the backreference from `things about remark` to\n *      `charlie`, as it is the second used definition\n * @param {number} referenceIndex\n *   Index of the definition in the order that they are first referenced,\n *   0-indexed.\n * @param {number} rereferenceIndex\n *   Index of calls to the same definition, 0-indexed.\n * @returns {Array<ElementContent> | ElementContent | string}\n *   Content for the backreference when linking back from definitions to their\n *   reference.\n *\n * @callback FootnoteBackLabelTemplate\n *   Generate a back label dynamically.\n *\n *   For the following markdown:\n *\n *   ```markdown\n *   Alpha[^micromark], bravo[^micromark], and charlie[^remark].\n *\n *   [^remark]: things about remark\n *   [^micromark]: things about micromark\n *   ```\n *\n *   This function will be called with:\n *\n *   *  `0` and `0` for the backreference from `things about micromark` to\n *      `alpha`, as it is the first used definition, and the first call to it\n *   *  `0` and `1` for the backreference from `things about micromark` to\n *      `bravo`, as it is the first used definition, and the second call to it\n *   *  `1` and `0` for the backreference from `things about remark` to\n *      `charlie`, as it is the second used definition\n * @param {number} referenceIndex\n *   Index of the definition in the order that they are first referenced,\n *   0-indexed.\n * @param {number} rereferenceIndex\n *   Index of calls to the same definition, 0-indexed.\n * @returns {string}\n *   Back label to use when linking back from definitions to their reference.\n */\n\nimport structuredClone from '@ungap/structured-clone'\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\n\n/**\n * Generate the default content that GitHub uses on backreferences.\n *\n * @param {number} _\n *   Index of the definition in the order that they are first referenced,\n *   0-indexed.\n * @param {number} rereferenceIndex\n *   Index of calls to the same definition, 0-indexed.\n * @returns {Array<ElementContent>}\n *   Content.\n */\nexport function defaultFootnoteBackContent(_, rereferenceIndex) {\n  /** @type {Array<ElementContent>} */\n  const result = [{type: 'text', value: '↩'}]\n\n  if (rereferenceIndex > 1) {\n    result.push({\n      type: 'element',\n      tagName: 'sup',\n      properties: {},\n      children: [{type: 'text', value: String(rereferenceIndex)}]\n    })\n  }\n\n  return result\n}\n\n/**\n * Generate the default label that GitHub uses on backreferences.\n *\n * @param {number} referenceIndex\n *   Index of the definition in the order that they are first referenced,\n *   0-indexed.\n * @param {number} rereferenceIndex\n *   Index of calls to the same definition, 0-indexed.\n * @returns {string}\n *   Label.\n */\nexport function defaultFootnoteBackLabel(referenceIndex, rereferenceIndex) {\n  return (\n    'Back to reference ' +\n    (referenceIndex + 1) +\n    (rereferenceIndex > 1 ? '-' + rereferenceIndex : '')\n  )\n}\n\n/**\n * Generate a hast footer for called footnote definitions.\n *\n * @param {State} state\n *   Info passed around.\n * @returns {Element | undefined}\n *   `section` element or `undefined`.\n */\n// eslint-disable-next-line complexity\nexport function footer(state) {\n  const clobberPrefix =\n    typeof state.options.clobberPrefix === 'string'\n      ? state.options.clobberPrefix\n      : 'user-content-'\n  const footnoteBackContent =\n    state.options.footnoteBackContent || defaultFootnoteBackContent\n  const footnoteBackLabel =\n    state.options.footnoteBackLabel || defaultFootnoteBackLabel\n  const footnoteLabel = state.options.footnoteLabel || 'Footnotes'\n  const footnoteLabelTagName = state.options.footnoteLabelTagName || 'h2'\n  const footnoteLabelProperties = state.options.footnoteLabelProperties || {\n    className: ['sr-only']\n  }\n  /** @type {Array<ElementContent>} */\n  const listItems = []\n  let referenceIndex = -1\n\n  while (++referenceIndex < state.footnoteOrder.length) {\n    const def = state.footnoteById.get(state.footnoteOrder[referenceIndex])\n\n    if (!def) {\n      continue\n    }\n\n    const content = state.all(def)\n    const id = String(def.identifier).toUpperCase()\n    const safeId = normalizeUri(id.toLowerCase())\n    let rereferenceIndex = 0\n    /** @type {Array<ElementContent>} */\n    const backReferences = []\n    const counts = state.footnoteCounts.get(id)\n\n    // eslint-disable-next-line no-unmodified-loop-condition\n    while (counts !== undefined && ++rereferenceIndex <= counts) {\n      if (backReferences.length > 0) {\n        backReferences.push({type: 'text', value: ' '})\n      }\n\n      let children =\n        typeof footnoteBackContent === 'string'\n          ? footnoteBackContent\n          : footnoteBackContent(referenceIndex, rereferenceIndex)\n\n      if (typeof children === 'string') {\n        children = {type: 'text', value: children}\n      }\n\n      backReferences.push({\n        type: 'element',\n        tagName: 'a',\n        properties: {\n          href:\n            '#' +\n            clobberPrefix +\n            'fnref-' +\n            safeId +\n            (rereferenceIndex > 1 ? '-' + rereferenceIndex : ''),\n          dataFootnoteBackref: '',\n          ariaLabel:\n            typeof footnoteBackLabel === 'string'\n              ? footnoteBackLabel\n              : footnoteBackLabel(referenceIndex, rereferenceIndex),\n          className: ['data-footnote-backref']\n        },\n        children: Array.isArray(children) ? children : [children]\n      })\n    }\n\n    const tail = content[content.length - 1]\n\n    if (tail && tail.type === 'element' && tail.tagName === 'p') {\n      const tailTail = tail.children[tail.children.length - 1]\n      if (tailTail && tailTail.type === 'text') {\n        tailTail.value += ' '\n      } else {\n        tail.children.push({type: 'text', value: ' '})\n      }\n\n      tail.children.push(...backReferences)\n    } else {\n      content.push(...backReferences)\n    }\n\n    /** @type {Element} */\n    const listItem = {\n      type: 'element',\n      tagName: 'li',\n      properties: {id: clobberPrefix + 'fn-' + safeId},\n      children: state.wrap(content, true)\n    }\n\n    state.patch(def, listItem)\n\n    listItems.push(listItem)\n  }\n\n  if (listItems.length === 0) {\n    return\n  }\n\n  return {\n    type: 'element',\n    tagName: 'section',\n    properties: {dataFootnotes: true, className: ['footnotes']},\n    children: [\n      {\n        type: 'element',\n        tagName: footnoteLabelTagName,\n        properties: {\n          ...structuredClone(footnoteLabelProperties),\n          id: 'footnote-label'\n        },\n        children: [{type: 'text', value: footnoteLabel}]\n      },\n      {type: 'text', value: '\\n'},\n      {\n        type: 'element',\n        tagName: 'ol',\n        properties: {},\n        children: state.wrap(listItems, true)\n      },\n      {type: 'text', value: '\\n'}\n    ]\n  }\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Parent} Parent\n */\n\n/**\n * @template Fn\n * @template Fallback\n * @typedef {Fn extends (value: any) => value is infer Thing ? Thing : Fallback} Predicate\n */\n\n/**\n * @callback Check\n *   Check that an arbitrary value is a node.\n * @param {unknown} this\n *   The given context.\n * @param {unknown} [node]\n *   Anything (typically a node).\n * @param {number | null | undefined} [index]\n *   The node’s position in its parent.\n * @param {Parent | null | undefined} [parent]\n *   The node’s parent.\n * @returns {boolean}\n *   Whether this is a node and passes a test.\n *\n * @typedef {Record<string, unknown> | Node} Props\n *   Object to check for equivalence.\n *\n *   Note: `Node` is included as it is common but is not indexable.\n *\n * @typedef {Array<Props | TestFunction | string> | Props | TestFunction | string | null | undefined} Test\n *   Check for an arbitrary node.\n *\n * @callback TestFunction\n *   Check if a node passes a test.\n * @param {unknown} this\n *   The given context.\n * @param {Node} node\n *   A node.\n * @param {number | undefined} [index]\n *   The node’s position in its parent.\n * @param {Parent | undefined} [parent]\n *   The node’s parent.\n * @returns {boolean | undefined | void}\n *   Whether this node passes the test.\n *\n *   Note: `void` is included until TS sees no return as `undefined`.\n */\n\n/**\n * Check if `node` is a `Node` and whether it passes the given test.\n *\n * @param {unknown} node\n *   Thing to check, typically `Node`.\n * @param {Test} test\n *   A check for a specific node.\n * @param {number | null | undefined} index\n *   The node’s position in its parent.\n * @param {Parent | null | undefined} parent\n *   The node’s parent.\n * @param {unknown} context\n *   Context object (`this`) to pass to `test` functions.\n * @returns {boolean}\n *   Whether `node` is a node and passes a test.\n */\nexport const is =\n  // Note: overloads in JSDoc can’t yet use different `@template`s.\n  /**\n   * @type {(\n   *   (<Condition extends string>(node: unknown, test: Condition, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & {type: Condition}) &\n   *   (<Condition extends Props>(node: unknown, test: Condition, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & Condition) &\n   *   (<Condition extends TestFunction>(node: unknown, test: Condition, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & Predicate<Condition, Node>) &\n   *   ((node?: null | undefined) => false) &\n   *   ((node: unknown, test?: null | undefined, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node) &\n   *   ((node: unknown, test?: Test, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => boolean)\n   * )}\n   */\n  (\n    /**\n     * @param {unknown} [node]\n     * @param {Test} [test]\n     * @param {number | null | undefined} [index]\n     * @param {Parent | null | undefined} [parent]\n     * @param {unknown} [context]\n     * @returns {boolean}\n     */\n    // eslint-disable-next-line max-params\n    function (node, test, index, parent, context) {\n      const check = convert(test)\n\n      if (\n        index !== undefined &&\n        index !== null &&\n        (typeof index !== 'number' ||\n          index < 0 ||\n          index === Number.POSITIVE_INFINITY)\n      ) {\n        throw new Error('Expected positive finite index')\n      }\n\n      if (\n        parent !== undefined &&\n        parent !== null &&\n        (!is(parent) || !parent.children)\n      ) {\n        throw new Error('Expected parent node')\n      }\n\n      if (\n        (parent === undefined || parent === null) !==\n        (index === undefined || index === null)\n      ) {\n        throw new Error('Expected both parent and index')\n      }\n\n      return looksLikeANode(node)\n        ? check.call(context, node, index, parent)\n        : false\n    }\n  )\n\n/**\n * Generate an assertion from a test.\n *\n * Useful if you’re going to test many nodes, for example when creating a\n * utility where something else passes a compatible test.\n *\n * The created function is a bit faster because it expects valid input only:\n * a `node`, `index`, and `parent`.\n *\n * @param {Test} test\n *   *   when nullish, checks if `node` is a `Node`.\n *   *   when `string`, works like passing `(node) => node.type === test`.\n *   *   when `function` checks if function passed the node is true.\n *   *   when `object`, checks that all keys in test are in node, and that they have (strictly) equal values.\n *   *   when `array`, checks if any one of the subtests pass.\n * @returns {Check}\n *   An assertion.\n */\nexport const convert =\n  // Note: overloads in JSDoc can’t yet use different `@template`s.\n  /**\n   * @type {(\n   *   (<Condition extends string>(test: Condition) => (node: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & {type: Condition}) &\n   *   (<Condition extends Props>(test: Condition) => (node: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & Condition) &\n   *   (<Condition extends TestFunction>(test: Condition) => (node: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & Predicate<Condition, Node>) &\n   *   ((test?: null | undefined) => (node?: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node) &\n   *   ((test?: Test) => Check)\n   * )}\n   */\n  (\n    /**\n     * @param {Test} [test]\n     * @returns {Check}\n     */\n    function (test) {\n      if (test === null || test === undefined) {\n        return ok\n      }\n\n      if (typeof test === 'function') {\n        return castFactory(test)\n      }\n\n      if (typeof test === 'object') {\n        return Array.isArray(test) ? anyFactory(test) : propsFactory(test)\n      }\n\n      if (typeof test === 'string') {\n        return typeFactory(test)\n      }\n\n      throw new Error('Expected function, string, or object as test')\n    }\n  )\n\n/**\n * @param {Array<Props | TestFunction | string>} tests\n * @returns {Check}\n */\nfunction anyFactory(tests) {\n  /** @type {Array<Check>} */\n  const checks = []\n  let index = -1\n\n  while (++index < tests.length) {\n    checks[index] = convert(tests[index])\n  }\n\n  return castFactory(any)\n\n  /**\n   * @this {unknown}\n   * @type {TestFunction}\n   */\n  function any(...parameters) {\n    let index = -1\n\n    while (++index < checks.length) {\n      if (checks[index].apply(this, parameters)) return true\n    }\n\n    return false\n  }\n}\n\n/**\n * Turn an object into a test for a node with a certain fields.\n *\n * @param {Props} check\n * @returns {Check}\n */\nfunction propsFactory(check) {\n  const checkAsRecord = /** @type {Record<string, unknown>} */ (check)\n\n  return castFactory(all)\n\n  /**\n   * @param {Node} node\n   * @returns {boolean}\n   */\n  function all(node) {\n    const nodeAsRecord = /** @type {Record<string, unknown>} */ (\n      /** @type {unknown} */ (node)\n    )\n\n    /** @type {string} */\n    let key\n\n    for (key in check) {\n      if (nodeAsRecord[key] !== checkAsRecord[key]) return false\n    }\n\n    return true\n  }\n}\n\n/**\n * Turn a string into a test for a node with a certain type.\n *\n * @param {string} check\n * @returns {Check}\n */\nfunction typeFactory(check) {\n  return castFactory(type)\n\n  /**\n   * @param {Node} node\n   */\n  function type(node) {\n    return node && node.type === check\n  }\n}\n\n/**\n * Turn a custom test into a test for a node that passes that test.\n *\n * @param {TestFunction} testFunction\n * @returns {Check}\n */\nfunction castFactory(testFunction) {\n  return check\n\n  /**\n   * @this {unknown}\n   * @type {Check}\n   */\n  function check(value, index, parent) {\n    return Boolean(\n      looksLikeANode(value) &&\n        testFunction.call(\n          this,\n          value,\n          typeof index === 'number' ? index : undefined,\n          parent || undefined\n        )\n    )\n  }\n}\n\nfunction ok() {\n  return true\n}\n\n/**\n * @param {unknown} value\n * @returns {value is Node}\n */\nfunction looksLikeANode(value) {\n  return value !== null && typeof value === 'object' && 'type' in value\n}\n","/**\n * @typedef {import('unist').Node} UnistNode\n * @typedef {import('unist').Parent} UnistParent\n */\n\n/**\n * @typedef {Exclude<import('unist-util-is').Test, undefined> | undefined} Test\n *   Test from `unist-util-is`.\n *\n *   Note: we have remove and add `undefined`, because otherwise when generating\n *   automatic `.d.ts` files, TS tries to flatten paths from a local perspective,\n *   which doesn’t work when publishing on npm.\n */\n\n/**\n * @typedef {(\n *   Fn extends (value: any) => value is infer Thing\n *   ? Thing\n *   : Fallback\n * )} Predicate\n *   Get the value of a type guard `Fn`.\n * @template Fn\n *   Value; typically function that is a type guard (such as `(x): x is Y`).\n * @template Fallback\n *   Value to yield if `Fn` is not a type guard.\n */\n\n/**\n * @typedef {(\n *   Check extends null | undefined // No test.\n *   ? Value\n *   : Value extends {type: Check} // String (type) test.\n *   ? Value\n *   : Value extends Check // Partial test.\n *   ? Value\n *   : Check extends Function // Function test.\n *   ? Predicate<Check, Value> extends Value\n *     ? Predicate<Check, Value>\n *     : never\n *   : never // Some other test?\n * )} MatchesOne\n *   Check whether a node matches a primitive check in the type system.\n * @template Value\n *   Value; typically unist `Node`.\n * @template Check\n *   Value; typically `unist-util-is`-compatible test, but not arrays.\n */\n\n/**\n * @typedef {(\n *   Check extends Array<any>\n *   ? MatchesOne<Value, Check[keyof Check]>\n *   : MatchesOne<Value, Check>\n * )} Matches\n *   Check whether a node matches a check in the type system.\n * @template Value\n *   Value; typically unist `Node`.\n * @template Check\n *   Value; typically `unist-util-is`-compatible test.\n */\n\n/**\n * @typedef {0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10} Uint\n *   Number; capped reasonably.\n */\n\n/**\n * @typedef {I extends 0 ? 1 : I extends 1 ? 2 : I extends 2 ? 3 : I extends 3 ? 4 : I extends 4 ? 5 : I extends 5 ? 6 : I extends 6 ? 7 : I extends 7 ? 8 : I extends 8 ? 9 : 10} Increment\n *   Increment a number in the type system.\n * @template {Uint} [I=0]\n *   Index.\n */\n\n/**\n * @typedef {(\n *   Node extends UnistParent\n *   ? Node extends {children: Array<infer Children>}\n *     ? Child extends Children ? Node : never\n *     : never\n *   : never\n * )} InternalParent\n *   Collect nodes that can be parents of `Child`.\n * @template {UnistNode} Node\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n */\n\n/**\n * @typedef {InternalParent<InclusiveDescendant<Tree>, Child>} Parent\n *   Collect nodes in `Tree` that can be parents of `Child`.\n * @template {UnistNode} Tree\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n */\n\n/**\n * @typedef {(\n *   Depth extends Max\n *   ? never\n *   :\n *     | InternalParent<Node, Child>\n *     | InternalAncestor<Node, InternalParent<Node, Child>, Max, Increment<Depth>>\n * )} InternalAncestor\n *   Collect nodes in `Tree` that can be ancestors of `Child`.\n * @template {UnistNode} Node\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n * @template {Uint} [Max=10]\n *   Max; searches up to this depth.\n * @template {Uint} [Depth=0]\n *   Current depth.\n */\n\n/**\n * @typedef {InternalAncestor<InclusiveDescendant<Tree>, Child>} Ancestor\n *   Collect nodes in `Tree` that can be ancestors of `Child`.\n * @template {UnistNode} Tree\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n */\n\n/**\n * @typedef {(\n *   Tree extends UnistParent\n *     ? Depth extends Max\n *       ? Tree\n *       : Tree | InclusiveDescendant<Tree['children'][number], Max, Increment<Depth>>\n *     : Tree\n * )} InclusiveDescendant\n *   Collect all (inclusive) descendants of `Tree`.\n *\n *   > 👉 **Note**: for performance reasons, this seems to be the fastest way to\n *   > recurse without actually running into an infinite loop, which the\n *   > previous version did.\n *   >\n *   > Practically, a max of `2` is typically enough assuming a `Root` is\n *   > passed, but it doesn’t improve performance.\n *   > It gets higher with `List > ListItem > Table > TableRow > TableCell`.\n *   > Using up to `10` doesn’t hurt or help either.\n * @template {UnistNode} Tree\n *   Tree type.\n * @template {Uint} [Max=10]\n *   Max; searches up to this depth.\n * @template {Uint} [Depth=0]\n *   Current depth.\n */\n\n/**\n * @typedef {'skip' | boolean} Action\n *   Union of the action types.\n *\n * @typedef {number} Index\n *   Move to the sibling at `index` next (after node itself is completely\n *   traversed).\n *\n *   Useful if mutating the tree, such as removing the node the visitor is\n *   currently on, or any of its previous siblings.\n *   Results less than 0 or greater than or equal to `children.length` stop\n *   traversing the parent.\n *\n * @typedef {[(Action | null | undefined | void)?, (Index | null | undefined)?]} ActionTuple\n *   List with one or two values, the first an action, the second an index.\n *\n * @typedef {Action | ActionTuple | Index | null | undefined | void} VisitorResult\n *   Any value that can be returned from a visitor.\n */\n\n/**\n * @callback Visitor\n *   Handle a node (matching `test`, if given).\n *\n *   Visitors are free to transform `node`.\n *   They can also transform the parent of node (the last of `ancestors`).\n *\n *   Replacing `node` itself, if `SKIP` is not returned, still causes its\n *   descendants to be walked (which is a bug).\n *\n *   When adding or removing previous siblings of `node` (or next siblings, in\n *   case of reverse), the `Visitor` should return a new `Index` to specify the\n *   sibling to traverse after `node` is traversed.\n *   Adding or removing next siblings of `node` (or previous siblings, in case\n *   of reverse) is handled as expected without needing to return a new `Index`.\n *\n *   Removing the children property of an ancestor still results in them being\n *   traversed.\n * @param {Visited} node\n *   Found node.\n * @param {Array<VisitedParents>} ancestors\n *   Ancestors of `node`.\n * @returns {VisitorResult}\n *   What to do next.\n *\n *   An `Index` is treated as a tuple of `[CONTINUE, Index]`.\n *   An `Action` is treated as a tuple of `[Action]`.\n *\n *   Passing a tuple back only makes sense if the `Action` is `SKIP`.\n *   When the `Action` is `EXIT`, that action can be returned.\n *   When the `Action` is `CONTINUE`, `Index` can be returned.\n * @template {UnistNode} [Visited=UnistNode]\n *   Visited node type.\n * @template {UnistParent} [VisitedParents=UnistParent]\n *   Ancestor type.\n */\n\n/**\n * @typedef {Visitor<Matches<InclusiveDescendant<Tree>, Check>, Ancestor<Tree, Matches<InclusiveDescendant<Tree>, Check>>>} BuildVisitor\n *   Build a typed `Visitor` function from a tree and a test.\n *\n *   It will infer which values are passed as `node` and which as `parents`.\n * @template {UnistNode} [Tree=UnistNode]\n *   Tree type.\n * @template {Test} [Check=Test]\n *   Test type.\n */\n\nimport {convert} from 'unist-util-is'\nimport {color} from 'unist-util-visit-parents/do-not-use-color'\n\n/** @type {Readonly<ActionTuple>} */\nconst empty = []\n\n/**\n * Continue traversing as normal.\n */\nexport const CONTINUE = true\n\n/**\n * Stop traversing immediately.\n */\nexport const EXIT = false\n\n/**\n * Do not traverse this node’s children.\n */\nexport const SKIP = 'skip'\n\n/**\n * Visit nodes, with ancestral information.\n *\n * This algorithm performs *depth-first* *tree traversal* in *preorder*\n * (**NLR**) or if `reverse` is given, in *reverse preorder* (**NRL**).\n *\n * You can choose for which nodes `visitor` is called by passing a `test`.\n * For complex tests, you should test yourself in `visitor`, as it will be\n * faster and will have improved type information.\n *\n * Walking the tree is an intensive task.\n * Make use of the return values of the visitor when possible.\n * Instead of walking a tree multiple times, walk it once, use `unist-util-is`\n * to check if a node matches, and then perform different operations.\n *\n * You can change the tree.\n * See `Visitor` for more info.\n *\n * @overload\n * @param {Tree} tree\n * @param {Check} check\n * @param {BuildVisitor<Tree, Check>} visitor\n * @param {boolean | null | undefined} [reverse]\n * @returns {undefined}\n *\n * @overload\n * @param {Tree} tree\n * @param {BuildVisitor<Tree>} visitor\n * @param {boolean | null | undefined} [reverse]\n * @returns {undefined}\n *\n * @param {UnistNode} tree\n *   Tree to traverse.\n * @param {Visitor | Test} test\n *   `unist-util-is`-compatible test\n * @param {Visitor | boolean | null | undefined} [visitor]\n *   Handle each node.\n * @param {boolean | null | undefined} [reverse]\n *   Traverse in reverse preorder (NRL) instead of the default preorder (NLR).\n * @returns {undefined}\n *   Nothing.\n *\n * @template {UnistNode} Tree\n *   Node type.\n * @template {Test} Check\n *   `unist-util-is`-compatible test.\n */\nexport function visitParents(tree, test, visitor, reverse) {\n  /** @type {Test} */\n  let check\n\n  if (typeof test === 'function' && typeof visitor !== 'function') {\n    reverse = visitor\n    // @ts-expect-error no visitor given, so `visitor` is test.\n    visitor = test\n  } else {\n    // @ts-expect-error visitor given, so `test` isn’t a visitor.\n    check = test\n  }\n\n  const is = convert(check)\n  const step = reverse ? -1 : 1\n\n  factory(tree, undefined, [])()\n\n  /**\n   * @param {UnistNode} node\n   * @param {number | undefined} index\n   * @param {Array<UnistParent>} parents\n   */\n  function factory(node, index, parents) {\n    const value = /** @type {Record<string, unknown>} */ (\n      node && typeof node === 'object' ? node : {}\n    )\n\n    if (typeof value.type === 'string') {\n      const name =\n        // `hast`\n        typeof value.tagName === 'string'\n          ? value.tagName\n          : // `xast`\n          typeof value.name === 'string'\n          ? value.name\n          : undefined\n\n      Object.defineProperty(visit, 'name', {\n        value:\n          'node (' + color(node.type + (name ? '<' + name + '>' : '')) + ')'\n      })\n    }\n\n    return visit\n\n    function visit() {\n      /** @type {Readonly<ActionTuple>} */\n      let result = empty\n      /** @type {Readonly<ActionTuple>} */\n      let subresult\n      /** @type {number} */\n      let offset\n      /** @type {Array<UnistParent>} */\n      let grandparents\n\n      if (!test || is(node, index, parents[parents.length - 1] || undefined)) {\n        // @ts-expect-error: `visitor` is now a visitor.\n        result = toResult(visitor(node, parents))\n\n        if (result[0] === EXIT) {\n          return result\n        }\n      }\n\n      if ('children' in node && node.children) {\n        const nodeAsParent = /** @type {UnistParent} */ (node)\n\n        if (nodeAsParent.children && result[0] !== SKIP) {\n          offset = (reverse ? nodeAsParent.children.length : -1) + step\n          grandparents = parents.concat(nodeAsParent)\n\n          while (offset > -1 && offset < nodeAsParent.children.length) {\n            const child = nodeAsParent.children[offset]\n\n            subresult = factory(child, offset, grandparents)()\n\n            if (subresult[0] === EXIT) {\n              return subresult\n            }\n\n            offset =\n              typeof subresult[1] === 'number' ? subresult[1] : offset + step\n          }\n        }\n      }\n\n      return result\n    }\n  }\n}\n\n/**\n * Turn a return value into a clean result.\n *\n * @param {VisitorResult} value\n *   Valid return values from visitors.\n * @returns {Readonly<ActionTuple>}\n *   Clean result.\n */\nfunction toResult(value) {\n  if (Array.isArray(value)) {\n    return value\n  }\n\n  if (typeof value === 'number') {\n    return [CONTINUE, value]\n  }\n\n  return value === null || value === undefined ? empty : [value]\n}\n","/**\n * @typedef {import('unist').Node} UnistNode\n * @typedef {import('unist').Parent} UnistParent\n * @typedef {import('unist-util-visit-parents').VisitorResult} VisitorResult\n */\n\n/**\n * @typedef {Exclude<import('unist-util-is').Test, undefined> | undefined} Test\n *   Test from `unist-util-is`.\n *\n *   Note: we have remove and add `undefined`, because otherwise when generating\n *   automatic `.d.ts` files, TS tries to flatten paths from a local perspective,\n *   which doesn’t work when publishing on npm.\n */\n\n// To do: use types from `unist-util-visit-parents` when it’s released.\n\n/**\n * @typedef {(\n *   Fn extends (value: any) => value is infer Thing\n *   ? Thing\n *   : Fallback\n * )} Predicate\n *   Get the value of a type guard `Fn`.\n * @template Fn\n *   Value; typically function that is a type guard (such as `(x): x is Y`).\n * @template Fallback\n *   Value to yield if `Fn` is not a type guard.\n */\n\n/**\n * @typedef {(\n *   Check extends null | undefined // No test.\n *   ? Value\n *   : Value extends {type: Check} // String (type) test.\n *   ? Value\n *   : Value extends Check // Partial test.\n *   ? Value\n *   : Check extends Function // Function test.\n *   ? Predicate<Check, Value> extends Value\n *     ? Predicate<Check, Value>\n *     : never\n *   : never // Some other test?\n * )} MatchesOne\n *   Check whether a node matches a primitive check in the type system.\n * @template Value\n *   Value; typically unist `Node`.\n * @template Check\n *   Value; typically `unist-util-is`-compatible test, but not arrays.\n */\n\n/**\n * @typedef {(\n *   Check extends Array<any>\n *   ? MatchesOne<Value, Check[keyof Check]>\n *   : MatchesOne<Value, Check>\n * )} Matches\n *   Check whether a node matches a check in the type system.\n * @template Value\n *   Value; typically unist `Node`.\n * @template Check\n *   Value; typically `unist-util-is`-compatible test.\n */\n\n/**\n * @typedef {0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10} Uint\n *   Number; capped reasonably.\n */\n\n/**\n * @typedef {I extends 0 ? 1 : I extends 1 ? 2 : I extends 2 ? 3 : I extends 3 ? 4 : I extends 4 ? 5 : I extends 5 ? 6 : I extends 6 ? 7 : I extends 7 ? 8 : I extends 8 ? 9 : 10} Increment\n *   Increment a number in the type system.\n * @template {Uint} [I=0]\n *   Index.\n */\n\n/**\n * @typedef {(\n *   Node extends UnistParent\n *   ? Node extends {children: Array<infer Children>}\n *     ? Child extends Children ? Node : never\n *     : never\n *   : never\n * )} InternalParent\n *   Collect nodes that can be parents of `Child`.\n * @template {UnistNode} Node\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n */\n\n/**\n * @typedef {InternalParent<InclusiveDescendant<Tree>, Child>} Parent\n *   Collect nodes in `Tree` that can be parents of `Child`.\n * @template {UnistNode} Tree\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n */\n\n/**\n * @typedef {(\n *   Depth extends Max\n *   ? never\n *   :\n *     | InternalParent<Node, Child>\n *     | InternalAncestor<Node, InternalParent<Node, Child>, Max, Increment<Depth>>\n * )} InternalAncestor\n *   Collect nodes in `Tree` that can be ancestors of `Child`.\n * @template {UnistNode} Node\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n * @template {Uint} [Max=10]\n *   Max; searches up to this depth.\n * @template {Uint} [Depth=0]\n *   Current depth.\n */\n\n/**\n * @typedef {(\n *   Tree extends UnistParent\n *     ? Depth extends Max\n *       ? Tree\n *       : Tree | InclusiveDescendant<Tree['children'][number], Max, Increment<Depth>>\n *     : Tree\n * )} InclusiveDescendant\n *   Collect all (inclusive) descendants of `Tree`.\n *\n *   > 👉 **Note**: for performance reasons, this seems to be the fastest way to\n *   > recurse without actually running into an infinite loop, which the\n *   > previous version did.\n *   >\n *   > Practically, a max of `2` is typically enough assuming a `Root` is\n *   > passed, but it doesn’t improve performance.\n *   > It gets higher with `List > ListItem > Table > TableRow > TableCell`.\n *   > Using up to `10` doesn’t hurt or help either.\n * @template {UnistNode} Tree\n *   Tree type.\n * @template {Uint} [Max=10]\n *   Max; searches up to this depth.\n * @template {Uint} [Depth=0]\n *   Current depth.\n */\n\n/**\n * @callback Visitor\n *   Handle a node (matching `test`, if given).\n *\n *   Visitors are free to transform `node`.\n *   They can also transform `parent`.\n *\n *   Replacing `node` itself, if `SKIP` is not returned, still causes its\n *   descendants to be walked (which is a bug).\n *\n *   When adding or removing previous siblings of `node` (or next siblings, in\n *   case of reverse), the `Visitor` should return a new `Index` to specify the\n *   sibling to traverse after `node` is traversed.\n *   Adding or removing next siblings of `node` (or previous siblings, in case\n *   of reverse) is handled as expected without needing to return a new `Index`.\n *\n *   Removing the children property of `parent` still results in them being\n *   traversed.\n * @param {Visited} node\n *   Found node.\n * @param {Visited extends UnistNode ? number | undefined : never} index\n *   Index of `node` in `parent`.\n * @param {Ancestor extends UnistParent ? Ancestor | undefined : never} parent\n *   Parent of `node`.\n * @returns {VisitorResult}\n *   What to do next.\n *\n *   An `Index` is treated as a tuple of `[CONTINUE, Index]`.\n *   An `Action` is treated as a tuple of `[Action]`.\n *\n *   Passing a tuple back only makes sense if the `Action` is `SKIP`.\n *   When the `Action` is `EXIT`, that action can be returned.\n *   When the `Action` is `CONTINUE`, `Index` can be returned.\n * @template {UnistNode} [Visited=UnistNode]\n *   Visited node type.\n * @template {UnistParent} [Ancestor=UnistParent]\n *   Ancestor type.\n */\n\n/**\n * @typedef {Visitor<Visited, Parent<Ancestor, Visited>>} BuildVisitorFromMatch\n *   Build a typed `Visitor` function from a node and all possible parents.\n *\n *   It will infer which values are passed as `node` and which as `parent`.\n * @template {UnistNode} Visited\n *   Node type.\n * @template {UnistParent} Ancestor\n *   Parent type.\n */\n\n/**\n * @typedef {(\n *   BuildVisitorFromMatch<\n *     Matches<Descendant, Check>,\n *     Extract<Descendant, UnistParent>\n *   >\n * )} BuildVisitorFromDescendants\n *   Build a typed `Visitor` function from a list of descendants and a test.\n *\n *   It will infer which values are passed as `node` and which as `parent`.\n * @template {UnistNode} Descendant\n *   Node type.\n * @template {Test} Check\n *   Test type.\n */\n\n/**\n * @typedef {(\n *   BuildVisitorFromDescendants<\n *     InclusiveDescendant<Tree>,\n *     Check\n *   >\n * )} BuildVisitor\n *   Build a typed `Visitor` function from a tree and a test.\n *\n *   It will infer which values are passed as `node` and which as `parent`.\n * @template {UnistNode} [Tree=UnistNode]\n *   Node type.\n * @template {Test} [Check=Test]\n *   Test type.\n */\n\nimport {visitParents} from 'unist-util-visit-parents'\n\nexport {CONTINUE, EXIT, SKIP} from 'unist-util-visit-parents'\n\n/**\n * Visit nodes.\n *\n * This algorithm performs *depth-first* *tree traversal* in *preorder*\n * (**NLR**) or if `reverse` is given, in *reverse preorder* (**NRL**).\n *\n * You can choose for which nodes `visitor` is called by passing a `test`.\n * For complex tests, you should test yourself in `visitor`, as it will be\n * faster and will have improved type information.\n *\n * Walking the tree is an intensive task.\n * Make use of the return values of the visitor when possible.\n * Instead of walking a tree multiple times, walk it once, use `unist-util-is`\n * to check if a node matches, and then perform different operations.\n *\n * You can change the tree.\n * See `Visitor` for more info.\n *\n * @overload\n * @param {Tree} tree\n * @param {Check} check\n * @param {BuildVisitor<Tree, Check>} visitor\n * @param {boolean | null | undefined} [reverse]\n * @returns {undefined}\n *\n * @overload\n * @param {Tree} tree\n * @param {BuildVisitor<Tree>} visitor\n * @param {boolean | null | undefined} [reverse]\n * @returns {undefined}\n *\n * @param {UnistNode} tree\n *   Tree to traverse.\n * @param {Visitor | Test} testOrVisitor\n *   `unist-util-is`-compatible test (optional, omit to pass a visitor).\n * @param {Visitor | boolean | null | undefined} [visitorOrReverse]\n *   Handle each node (when test is omitted, pass `reverse`).\n * @param {boolean | null | undefined} [maybeReverse=false]\n *   Traverse in reverse preorder (NRL) instead of the default preorder (NLR).\n * @returns {undefined}\n *   Nothing.\n *\n * @template {UnistNode} Tree\n *   Node type.\n * @template {Test} Check\n *   `unist-util-is`-compatible test.\n */\nexport function visit(tree, testOrVisitor, visitorOrReverse, maybeReverse) {\n  /** @type {boolean | null | undefined} */\n  let reverse\n  /** @type {Test} */\n  let test\n  /** @type {Visitor} */\n  let visitor\n\n  if (\n    typeof testOrVisitor === 'function' &&\n    typeof visitorOrReverse !== 'function'\n  ) {\n    test = undefined\n    visitor = testOrVisitor\n    reverse = visitorOrReverse\n  } else {\n    // @ts-expect-error: assume the overload with test was given.\n    test = testOrVisitor\n    // @ts-expect-error: assume the overload with test was given.\n    visitor = visitorOrReverse\n    reverse = maybeReverse\n  }\n\n  visitParents(tree, test, overload, reverse)\n\n  /**\n   * @param {UnistNode} node\n   * @param {Array<UnistParent>} parents\n   */\n  function overload(node, parents) {\n    const parent = parents[parents.length - 1]\n    const index = parent ? parent.children.indexOf(node) : undefined\n    return visitor(node, index, parent)\n  }\n}\n","/**\n * @typedef {import('hast').ElementContent} ElementContent\n *\n * @typedef {import('mdast').Nodes} Nodes\n * @typedef {import('mdast').Reference} Reference\n *\n * @typedef {import('./state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Return the content of a reference without definition as plain text.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Extract<Nodes, Reference>} node\n *   Reference node (image, link).\n * @returns {Array<ElementContent>}\n *   hast content.\n */\nexport function revert(state, node) {\n  const subtype = node.referenceType\n  let suffix = ']'\n\n  if (subtype === 'collapsed') {\n    suffix += '[]'\n  } else if (subtype === 'full') {\n    suffix += '[' + (node.label || node.identifier) + ']'\n  }\n\n  if (node.type === 'imageReference') {\n    return [{type: 'text', value: '![' + node.alt + suffix}]\n  }\n\n  const contents = state.all(node)\n  const head = contents[0]\n\n  if (head && head.type === 'text') {\n    head.value = '[' + head.value\n  } else {\n    contents.unshift({type: 'text', value: '['})\n  }\n\n  const tail = contents[contents.length - 1]\n\n  if (tail && tail.type === 'text') {\n    tail.value += suffix\n  } else {\n    contents.push({type: 'text', value: suffix})\n  }\n\n  return contents\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').ElementContent} ElementContent\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').ListItem} ListItem\n * @typedef {import('mdast').Parents} Parents\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `listItem` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {ListItem} node\n *   mdast node.\n * @param {Parents | undefined} parent\n *   Parent of `node`.\n * @returns {Element}\n *   hast node.\n */\nexport function listItem(state, node, parent) {\n  const results = state.all(node)\n  const loose = parent ? listLoose(parent) : listItemLoose(node)\n  /** @type {Properties} */\n  const properties = {}\n  /** @type {Array<ElementContent>} */\n  const children = []\n\n  if (typeof node.checked === 'boolean') {\n    const head = results[0]\n    /** @type {Element} */\n    let paragraph\n\n    if (head && head.type === 'element' && head.tagName === 'p') {\n      paragraph = head\n    } else {\n      paragraph = {type: 'element', tagName: 'p', properties: {}, children: []}\n      results.unshift(paragraph)\n    }\n\n    if (paragraph.children.length > 0) {\n      paragraph.children.unshift({type: 'text', value: ' '})\n    }\n\n    paragraph.children.unshift({\n      type: 'element',\n      tagName: 'input',\n      properties: {type: 'checkbox', checked: node.checked, disabled: true},\n      children: []\n    })\n\n    // According to github-markdown-css, this class hides bullet.\n    // See: <https://github.com/sindresorhus/github-markdown-css>.\n    properties.className = ['task-list-item']\n  }\n\n  let index = -1\n\n  while (++index < results.length) {\n    const child = results[index]\n\n    // Add eols before nodes, except if this is a loose, first paragraph.\n    if (\n      loose ||\n      index !== 0 ||\n      child.type !== 'element' ||\n      child.tagName !== 'p'\n    ) {\n      children.push({type: 'text', value: '\\n'})\n    }\n\n    if (child.type === 'element' && child.tagName === 'p' && !loose) {\n      children.push(...child.children)\n    } else {\n      children.push(child)\n    }\n  }\n\n  const tail = results[results.length - 1]\n\n  // Add a final eol.\n  if (tail && (loose || tail.type !== 'element' || tail.tagName !== 'p')) {\n    children.push({type: 'text', value: '\\n'})\n  }\n\n  /** @type {Element} */\n  const result = {type: 'element', tagName: 'li', properties, children}\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n\n/**\n * @param {Parents} node\n * @return {Boolean}\n */\nfunction listLoose(node) {\n  let loose = false\n  if (node.type === 'list') {\n    loose = node.spread || false\n    const children = node.children\n    let index = -1\n\n    while (!loose && ++index < children.length) {\n      loose = listItemLoose(children[index])\n    }\n  }\n\n  return loose\n}\n\n/**\n * @param {ListItem} node\n * @return {Boolean}\n */\nfunction listItemLoose(node) {\n  const spread = node.spread\n\n  return spread === null || spread === undefined\n    ? node.children.length > 1\n    : spread\n}\n","const tab = 9 /* `\\t` */\nconst space = 32 /* ` ` */\n\n/**\n * Remove initial and final spaces and tabs at the line breaks in `value`.\n * Does not trim initial and final spaces and tabs of the value itself.\n *\n * @param {string} value\n *   Value to trim.\n * @returns {string}\n *   Trimmed value.\n */\nexport function trimLines(value) {\n  const source = String(value)\n  const search = /\\r?\\n|\\r/g\n  let match = search.exec(source)\n  let last = 0\n  /** @type {Array<string>} */\n  const lines = []\n\n  while (match) {\n    lines.push(\n      trimLine(source.slice(last, match.index), last > 0, true),\n      match[0]\n    )\n\n    last = match.index + match[0].length\n    match = search.exec(source)\n  }\n\n  lines.push(trimLine(source.slice(last), last > 0, false))\n\n  return lines.join('')\n}\n\n/**\n * @param {string} value\n *   Line to trim.\n * @param {boolean} start\n *   Whether to trim the start of the line.\n * @param {boolean} end\n *   Whether to trim the end of the line.\n * @returns {string}\n *   Trimmed line.\n */\nfunction trimLine(value, start, end) {\n  let startIndex = 0\n  let endIndex = value.length\n\n  if (start) {\n    let code = value.codePointAt(startIndex)\n\n    while (code === tab || code === space) {\n      startIndex++\n      code = value.codePointAt(startIndex)\n    }\n  }\n\n  if (end) {\n    let code = value.codePointAt(endIndex - 1)\n\n    while (code === tab || code === space) {\n      endIndex--\n      code = value.codePointAt(endIndex - 1)\n    }\n  }\n\n  return endIndex > startIndex ? value.slice(startIndex, endIndex) : ''\n}\n","import {blockquote} from './blockquote.js'\nimport {hardBreak} from './break.js'\nimport {code} from './code.js'\nimport {strikethrough} from './delete.js'\nimport {emphasis} from './emphasis.js'\nimport {footnoteReference} from './footnote-reference.js'\nimport {heading} from './heading.js'\nimport {html} from './html.js'\nimport {imageReference} from './image-reference.js'\nimport {image} from './image.js'\nimport {inlineCode} from './inline-code.js'\nimport {linkReference} from './link-reference.js'\nimport {link} from './link.js'\nimport {listItem} from './list-item.js'\nimport {list} from './list.js'\nimport {paragraph} from './paragraph.js'\nimport {root} from './root.js'\nimport {strong} from './strong.js'\nimport {table} from './table.js'\nimport {tableRow} from './table-row.js'\nimport {tableCell} from './table-cell.js'\nimport {text} from './text.js'\nimport {thematicBreak} from './thematic-break.js'\n\n/**\n * Default handlers for nodes.\n *\n * @satisfies {import('../state.js').Handlers}\n */\nexport const handlers = {\n  blockquote,\n  break: hardBreak,\n  code,\n  delete: strikethrough,\n  emphasis,\n  footnoteReference,\n  heading,\n  html,\n  imageReference,\n  image,\n  inlineCode,\n  linkReference,\n  link,\n  listItem,\n  list,\n  paragraph,\n  // @ts-expect-error: root is different, but hard to type.\n  root,\n  strong,\n  table,\n  tableCell,\n  tableRow,\n  text,\n  thematicBreak,\n  toml: ignore,\n  yaml: ignore,\n  definition: ignore,\n  footnoteDefinition: ignore\n}\n\n// Return nothing for nodes that are ignored.\nfunction ignore() {\n  return undefined\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Blockquote} Blockquote\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `blockquote` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Blockquote} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function blockquote(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'blockquote',\n    properties: {},\n    children: state.wrap(state.all(node), true)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Text} Text\n * @typedef {import('mdast').Break} Break\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `break` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Break} node\n *   mdast node.\n * @returns {Array<Element | Text>}\n *   hast element content.\n */\nexport function hardBreak(state, node) {\n  /** @type {Element} */\n  const result = {type: 'element', tagName: 'br', properties: {}, children: []}\n  state.patch(node, result)\n  return [state.applyData(node, result), {type: 'text', value: '\\n'}]\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').Code} Code\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `code` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Code} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function code(state, node) {\n  const value = node.value ? node.value + '\\n' : ''\n  /** @type {Properties} */\n  const properties = {}\n\n  if (node.lang) {\n    properties.className = ['language-' + node.lang]\n  }\n\n  // Create `<code>`.\n  /** @type {Element} */\n  let result = {\n    type: 'element',\n    tagName: 'code',\n    properties,\n    children: [{type: 'text', value}]\n  }\n\n  if (node.meta) {\n    result.data = {meta: node.meta}\n  }\n\n  state.patch(node, result)\n  result = state.applyData(node, result)\n\n  // Create `<pre>`.\n  result = {type: 'element', tagName: 'pre', properties: {}, children: [result]}\n  state.patch(node, result)\n  return result\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Delete} Delete\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `delete` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Delete} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function strikethrough(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'del',\n    properties: {},\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Emphasis} Emphasis\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `emphasis` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Emphasis} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function emphasis(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'em',\n    properties: {},\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').FootnoteReference} FootnoteReference\n * @typedef {import('../state.js').State} State\n */\n\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\n\n/**\n * Turn an mdast `footnoteReference` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {FootnoteReference} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function footnoteReference(state, node) {\n  const clobberPrefix =\n    typeof state.options.clobberPrefix === 'string'\n      ? state.options.clobberPrefix\n      : 'user-content-'\n  const id = String(node.identifier).toUpperCase()\n  const safeId = normalizeUri(id.toLowerCase())\n  const index = state.footnoteOrder.indexOf(id)\n  /** @type {number} */\n  let counter\n\n  let reuseCounter = state.footnoteCounts.get(id)\n\n  if (reuseCounter === undefined) {\n    reuseCounter = 0\n    state.footnoteOrder.push(id)\n    counter = state.footnoteOrder.length\n  } else {\n    counter = index + 1\n  }\n\n  reuseCounter += 1\n  state.footnoteCounts.set(id, reuseCounter)\n\n  /** @type {Element} */\n  const link = {\n    type: 'element',\n    tagName: 'a',\n    properties: {\n      href: '#' + clobberPrefix + 'fn-' + safeId,\n      id:\n        clobberPrefix +\n        'fnref-' +\n        safeId +\n        (reuseCounter > 1 ? '-' + reuseCounter : ''),\n      dataFootnoteRef: true,\n      ariaDescribedBy: ['footnote-label']\n    },\n    children: [{type: 'text', value: String(counter)}]\n  }\n  state.patch(node, link)\n\n  /** @type {Element} */\n  const sup = {\n    type: 'element',\n    tagName: 'sup',\n    properties: {},\n    children: [link]\n  }\n  state.patch(node, sup)\n  return state.applyData(node, sup)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Heading} Heading\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `heading` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Heading} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function heading(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'h' + node.depth,\n    properties: {},\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Html} Html\n * @typedef {import('../state.js').State} State\n * @typedef {import('../../index.js').Raw} Raw\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `html` node into hast (`raw` node in dangerous mode, otherwise\n * nothing).\n *\n * @param {State} state\n *   Info passed around.\n * @param {Html} node\n *   mdast node.\n * @returns {Element | Raw | undefined}\n *   hast node.\n */\nexport function html(state, node) {\n  if (state.options.allowDangerousHtml) {\n    /** @type {Raw} */\n    const result = {type: 'raw', value: node.value}\n    state.patch(node, result)\n    return state.applyData(node, result)\n  }\n\n  return undefined\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').ElementContent} ElementContent\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').ImageReference} ImageReference\n * @typedef {import('../state.js').State} State\n */\n\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\nimport {revert} from '../revert.js'\n\n/**\n * Turn an mdast `imageReference` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {ImageReference} node\n *   mdast node.\n * @returns {Array<ElementContent> | ElementContent}\n *   hast node.\n */\nexport function imageReference(state, node) {\n  const id = String(node.identifier).toUpperCase()\n  const def = state.definitionById.get(id)\n\n  if (!def) {\n    return revert(state, node)\n  }\n\n  /** @type {Properties} */\n  const properties = {src: normalizeUri(def.url || ''), alt: node.alt}\n\n  if (def.title !== null && def.title !== undefined) {\n    properties.title = def.title\n  }\n\n  /** @type {Element} */\n  const result = {type: 'element', tagName: 'img', properties, children: []}\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').Image} Image\n * @typedef {import('../state.js').State} State\n */\n\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\n\n/**\n * Turn an mdast `image` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Image} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function image(state, node) {\n  /** @type {Properties} */\n  const properties = {src: normalizeUri(node.url)}\n\n  if (node.alt !== null && node.alt !== undefined) {\n    properties.alt = node.alt\n  }\n\n  if (node.title !== null && node.title !== undefined) {\n    properties.title = node.title\n  }\n\n  /** @type {Element} */\n  const result = {type: 'element', tagName: 'img', properties, children: []}\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Text} Text\n * @typedef {import('mdast').InlineCode} InlineCode\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `inlineCode` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {InlineCode} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function inlineCode(state, node) {\n  /** @type {Text} */\n  const text = {type: 'text', value: node.value.replace(/\\r?\\n|\\r/g, ' ')}\n  state.patch(node, text)\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'code',\n    properties: {},\n    children: [text]\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').ElementContent} ElementContent\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').LinkReference} LinkReference\n * @typedef {import('../state.js').State} State\n */\n\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\nimport {revert} from '../revert.js'\n\n/**\n * Turn an mdast `linkReference` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {LinkReference} node\n *   mdast node.\n * @returns {Array<ElementContent> | ElementContent}\n *   hast node.\n */\nexport function linkReference(state, node) {\n  const id = String(node.identifier).toUpperCase()\n  const def = state.definitionById.get(id)\n\n  if (!def) {\n    return revert(state, node)\n  }\n\n  /** @type {Properties} */\n  const properties = {href: normalizeUri(def.url || '')}\n\n  if (def.title !== null && def.title !== undefined) {\n    properties.title = def.title\n  }\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'a',\n    properties,\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').Link} Link\n * @typedef {import('../state.js').State} State\n */\n\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\n\n/**\n * Turn an mdast `link` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Link} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function link(state, node) {\n  /** @type {Properties} */\n  const properties = {href: normalizeUri(node.url)}\n\n  if (node.title !== null && node.title !== undefined) {\n    properties.title = node.title\n  }\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'a',\n    properties,\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').List} List\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `list` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {List} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function list(state, node) {\n  /** @type {Properties} */\n  const properties = {}\n  const results = state.all(node)\n  let index = -1\n\n  if (typeof node.start === 'number' && node.start !== 1) {\n    properties.start = node.start\n  }\n\n  // Like GitHub, add a class for custom styling.\n  while (++index < results.length) {\n    const child = results[index]\n\n    if (\n      child.type === 'element' &&\n      child.tagName === 'li' &&\n      child.properties &&\n      Array.isArray(child.properties.className) &&\n      child.properties.className.includes('task-list-item')\n    ) {\n      properties.className = ['contains-task-list']\n      break\n    }\n  }\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: node.ordered ? 'ol' : 'ul',\n    properties,\n    children: state.wrap(results, true)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Paragraph} Paragraph\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `paragraph` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Paragraph} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function paragraph(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'p',\n    properties: {},\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Parents} HastParents\n * @typedef {import('hast').Root} HastRoot\n * @typedef {import('mdast').Root} MdastRoot\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `root` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {MdastRoot} node\n *   mdast node.\n * @returns {HastParents}\n *   hast node.\n */\nexport function root(state, node) {\n  /** @type {HastRoot} */\n  const result = {type: 'root', children: state.wrap(state.all(node))}\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Strong} Strong\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `strong` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Strong} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function strong(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'strong',\n    properties: {},\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Table} Table\n * @typedef {import('../state.js').State} State\n */\n\nimport {pointEnd, pointStart} from 'unist-util-position'\n\n/**\n * Turn an mdast `table` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Table} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function table(state, node) {\n  const rows = state.all(node)\n  const firstRow = rows.shift()\n  /** @type {Array<Element>} */\n  const tableContent = []\n\n  if (firstRow) {\n    /** @type {Element} */\n    const head = {\n      type: 'element',\n      tagName: 'thead',\n      properties: {},\n      children: state.wrap([firstRow], true)\n    }\n    state.patch(node.children[0], head)\n    tableContent.push(head)\n  }\n\n  if (rows.length > 0) {\n    /** @type {Element} */\n    const body = {\n      type: 'element',\n      tagName: 'tbody',\n      properties: {},\n      children: state.wrap(rows, true)\n    }\n\n    const start = pointStart(node.children[1])\n    const end = pointEnd(node.children[node.children.length - 1])\n    if (start && end) body.position = {start, end}\n    tableContent.push(body)\n  }\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'table',\n    properties: {},\n    children: state.wrap(tableContent, true)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').TableCell} TableCell\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `tableCell` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {TableCell} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function tableCell(state, node) {\n  // Note: this function is normally not called: see `table-row` for how rows\n  // and their cells are compiled.\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'td', // Assume body cell.\n    properties: {},\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').ElementContent} ElementContent\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').Parents} Parents\n * @typedef {import('mdast').TableRow} TableRow\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `tableRow` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {TableRow} node\n *   mdast node.\n * @param {Parents | undefined} parent\n *   Parent of `node`.\n * @returns {Element}\n *   hast node.\n */\nexport function tableRow(state, node, parent) {\n  const siblings = parent ? parent.children : undefined\n  // Generate a body row when without parent.\n  const rowIndex = siblings ? siblings.indexOf(node) : 1\n  const tagName = rowIndex === 0 ? 'th' : 'td'\n  // To do: option to use `style`?\n  const align = parent && parent.type === 'table' ? parent.align : undefined\n  const length = align ? align.length : node.children.length\n  let cellIndex = -1\n  /** @type {Array<ElementContent>} */\n  const cells = []\n\n  while (++cellIndex < length) {\n    // Note: can also be undefined.\n    const cell = node.children[cellIndex]\n    /** @type {Properties} */\n    const properties = {}\n    const alignValue = align ? align[cellIndex] : undefined\n\n    if (alignValue) {\n      properties.align = alignValue\n    }\n\n    /** @type {Element} */\n    let result = {type: 'element', tagName, properties, children: []}\n\n    if (cell) {\n      result.children = state.all(cell)\n      state.patch(cell, result)\n      result = state.applyData(cell, result)\n    }\n\n    cells.push(result)\n  }\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'tr',\n    properties: {},\n    children: state.wrap(cells, true)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} HastElement\n * @typedef {import('hast').Text} HastText\n * @typedef {import('mdast').Text} MdastText\n * @typedef {import('../state.js').State} State\n */\n\nimport {trimLines} from 'trim-lines'\n\n/**\n * Turn an mdast `text` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {MdastText} node\n *   mdast node.\n * @returns {HastElement | HastText}\n *   hast node.\n */\nexport function text(state, node) {\n  /** @type {HastText} */\n  const result = {type: 'text', value: trimLines(String(node.value))}\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').ThematicBreak} ThematicBreak\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `thematicBreak` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {ThematicBreak} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function thematicBreak(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'hr',\n    properties: {},\n    children: []\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} HastElement\n * @typedef {import('hast').ElementContent} HastElementContent\n * @typedef {import('hast').Nodes} HastNodes\n * @typedef {import('hast').Properties} HastProperties\n * @typedef {import('hast').RootContent} HastRootContent\n * @typedef {import('hast').Text} HastText\n *\n * @typedef {import('mdast').Definition} MdastDefinition\n * @typedef {import('mdast').FootnoteDefinition} MdastFootnoteDefinition\n * @typedef {import('mdast').Nodes} MdastNodes\n * @typedef {import('mdast').Parents} MdastParents\n *\n * @typedef {import('vfile').VFile} VFile\n *\n * @typedef {import('./footer.js').FootnoteBackContentTemplate} FootnoteBackContentTemplate\n * @typedef {import('./footer.js').FootnoteBackLabelTemplate} FootnoteBackLabelTemplate\n */\n\n/**\n * @callback Handler\n *   Handle a node.\n * @param {State} state\n *   Info passed around.\n * @param {any} node\n *   mdast node to handle.\n * @param {MdastParents | undefined} parent\n *   Parent of `node`.\n * @returns {Array<HastElementContent> | HastElementContent | undefined}\n *   hast node.\n *\n * @typedef {Partial<Record<MdastNodes['type'], Handler>>} Handlers\n *   Handle nodes.\n *\n * @typedef Options\n *   Configuration (optional).\n * @property {boolean | null | undefined} [allowDangerousHtml=false]\n *   Whether to persist raw HTML in markdown in the hast tree (default:\n *   `false`).\n * @property {string | null | undefined} [clobberPrefix='user-content-']\n *   Prefix to use before the `id` property on footnotes to prevent them from\n *   *clobbering* (default: `'user-content-'`).\n *\n *   Pass `''` for trusted markdown and when you are careful with\n *   polyfilling.\n *   You could pass a different prefix.\n *\n *   DOM clobbering is this:\n *\n *   ```html\n *   <p id=\"x\"></p>\n *   <script>alert(x) // `x` now refers to the `p#x` DOM element</script>\n *   ```\n *\n *   The above example shows that elements are made available by browsers, by\n *   their ID, on the `window` object.\n *   This is a security risk because you might be expecting some other variable\n *   at that place.\n *   It can also break polyfills.\n *   Using a prefix solves these problems.\n * @property {VFile | null | undefined} [file]\n *   Corresponding virtual file representing the input document (optional).\n * @property {FootnoteBackContentTemplate | string | null | undefined} [footnoteBackContent]\n *   Content of the backreference back to references (default: `defaultFootnoteBackContent`).\n *\n *   The default value is:\n *\n *   ```js\n *   function defaultFootnoteBackContent(_, rereferenceIndex) {\n *     const result = [{type: 'text', value: '↩'}]\n *\n *     if (rereferenceIndex > 1) {\n *       result.push({\n *         type: 'element',\n *         tagName: 'sup',\n *         properties: {},\n *         children: [{type: 'text', value: String(rereferenceIndex)}]\n *       })\n *     }\n *\n *     return result\n *   }\n *   ```\n *\n *   This content is used in the `a` element of each backreference (the `↩`\n *   links).\n * @property {FootnoteBackLabelTemplate | string | null | undefined} [footnoteBackLabel]\n *   Label to describe the backreference back to references (default:\n *   `defaultFootnoteBackLabel`).\n *\n *   The default value is:\n *\n *   ```js\n *   function defaultFootnoteBackLabel(referenceIndex, rereferenceIndex) {\n *    return (\n *      'Back to reference ' +\n *      (referenceIndex + 1) +\n *      (rereferenceIndex > 1 ? '-' + rereferenceIndex : '')\n *    )\n *   }\n *   ```\n *\n *   Change it when the markdown is not in English.\n *\n *   This label is used in the `ariaLabel` property on each backreference\n *   (the `↩` links).\n *   It affects users of assistive technology.\n * @property {string | null | undefined} [footnoteLabel='Footnotes']\n *   Textual label to use for the footnotes section (default: `'Footnotes'`).\n *\n *   Change it when the markdown is not in English.\n *\n *   This label is typically hidden visually (assuming a `sr-only` CSS class\n *   is defined that does that) and so affects screen readers only.\n *   If you do have such a class, but want to show this section to everyone,\n *   pass different properties with the `footnoteLabelProperties` option.\n * @property {HastProperties | null | undefined} [footnoteLabelProperties={className: ['sr-only']}]\n *   Properties to use on the footnote label (default: `{className:\n *   ['sr-only']}`).\n *\n *   Change it to show the label and add other properties.\n *\n *   This label is typically hidden visually (assuming an `sr-only` CSS class\n *   is defined that does that) and so affects screen readers only.\n *   If you do have such a class, but want to show this section to everyone,\n *   pass an empty string.\n *   You can also add different properties.\n *\n *   > 👉 **Note**: `id: 'footnote-label'` is always added, because footnote\n *   > calls use it with `aria-describedby` to provide an accessible label.\n * @property {string | null | undefined} [footnoteLabelTagName='h2']\n *   HTML tag name to use for the footnote label element (default: `'h2'`).\n *\n *   Change it to match your document structure.\n *\n *   This label is typically hidden visually (assuming a `sr-only` CSS class\n *   is defined that does that) and so affects screen readers only.\n *   If you do have such a class, but want to show this section to everyone,\n *   pass different properties with the `footnoteLabelProperties` option.\n * @property {Handlers | null | undefined} [handlers]\n *   Extra handlers for nodes (optional).\n * @property {Array<MdastNodes['type']> | null | undefined} [passThrough]\n *   List of custom mdast node types to pass through (keep) in hast (note that\n *   the node itself is passed, but eventual children are transformed)\n *   (optional).\n * @property {Handler | null | undefined} [unknownHandler]\n *   Handler for all unknown nodes (optional).\n *\n * @typedef State\n *   Info passed around.\n * @property {(node: MdastNodes) => Array<HastElementContent>} all\n *   Transform the children of an mdast parent to hast.\n * @property {<Type extends HastNodes>(from: MdastNodes, to: Type) => HastElement | Type} applyData\n *   Honor the `data` of `from`, and generate an element instead of `node`.\n * @property {Map<string, MdastDefinition>} definitionById\n *   Definitions by their identifier.\n * @property {Map<string, MdastFootnoteDefinition>} footnoteById\n *   Footnote definitions by their identifier.\n * @property {Map<string, number>} footnoteCounts\n *   Counts for how often the same footnote was called.\n * @property {Array<string>} footnoteOrder\n *   Identifiers of order when footnote calls first appear in tree order.\n * @property {Handlers} handlers\n *   Applied handlers.\n * @property {(node: MdastNodes, parent: MdastParents | undefined) => Array<HastElementContent> | HastElementContent | undefined} one\n *   Transform an mdast node to hast.\n * @property {Options} options\n *   Configuration.\n * @property {(from: MdastNodes, node: HastNodes) => undefined} patch\n *   Copy a node’s positional info.\n * @property {<Type extends HastRootContent>(nodes: Array<Type>, loose?: boolean | undefined) => Array<HastText | Type>} wrap\n *   Wrap `nodes` with line endings between each node, adds initial/final line endings when `loose`.\n */\n\nimport structuredClone from '@ungap/structured-clone'\nimport {visit} from 'unist-util-visit'\nimport {position} from 'unist-util-position'\nimport {handlers as defaultHandlers} from './handlers/index.js'\n\nconst own = {}.hasOwnProperty\n\n/** @type {Options} */\nconst emptyOptions = {}\n\n/**\n * Create `state` from an mdast tree.\n *\n * @param {MdastNodes} tree\n *   mdast node to transform.\n * @param {Options | null | undefined} [options]\n *   Configuration (optional).\n * @returns {State}\n *   `state` function.\n */\nexport function createState(tree, options) {\n  const settings = options || emptyOptions\n  /** @type {Map<string, MdastDefinition>} */\n  const definitionById = new Map()\n  /** @type {Map<string, MdastFootnoteDefinition>} */\n  const footnoteById = new Map()\n  /** @type {Map<string, number>} */\n  const footnoteCounts = new Map()\n  /** @type {Handlers} */\n  // @ts-expect-error: the root handler returns a root.\n  // Hard to type.\n  const handlers = {...defaultHandlers, ...settings.handlers}\n\n  /** @type {State} */\n  const state = {\n    all,\n    applyData,\n    definitionById,\n    footnoteById,\n    footnoteCounts,\n    footnoteOrder: [],\n    handlers,\n    one,\n    options: settings,\n    patch,\n    wrap\n  }\n\n  visit(tree, function (node) {\n    if (node.type === 'definition' || node.type === 'footnoteDefinition') {\n      const map = node.type === 'definition' ? definitionById : footnoteById\n      const id = String(node.identifier).toUpperCase()\n\n      // Mimick CM behavior of link definitions.\n      // See: <https://github.com/syntax-tree/mdast-util-definitions/blob/9032189/lib/index.js#L20-L21>.\n      if (!map.has(id)) {\n        // @ts-expect-error: node type matches map.\n        map.set(id, node)\n      }\n    }\n  })\n\n  return state\n\n  /**\n   * Transform an mdast node into a hast node.\n   *\n   * @param {MdastNodes} node\n   *   mdast node.\n   * @param {MdastParents | undefined} [parent]\n   *   Parent of `node`.\n   * @returns {Array<HastElementContent> | HastElementContent | undefined}\n   *   Resulting hast node.\n   */\n  function one(node, parent) {\n    const type = node.type\n    const handle = state.handlers[type]\n\n    if (own.call(state.handlers, type) && handle) {\n      return handle(state, node, parent)\n    }\n\n    if (state.options.passThrough && state.options.passThrough.includes(type)) {\n      if ('children' in node) {\n        const {children, ...shallow} = node\n        const result = structuredClone(shallow)\n        // @ts-expect-error: TS doesn’t understand…\n        result.children = state.all(node)\n        // @ts-expect-error: TS doesn’t understand…\n        return result\n      }\n\n      // @ts-expect-error: it’s custom.\n      return structuredClone(node)\n    }\n\n    const unknown = state.options.unknownHandler || defaultUnknownHandler\n\n    return unknown(state, node, parent)\n  }\n\n  /**\n   * Transform the children of an mdast node into hast nodes.\n   *\n   * @param {MdastNodes} parent\n   *   mdast node to compile\n   * @returns {Array<HastElementContent>}\n   *   Resulting hast nodes.\n   */\n  function all(parent) {\n    /** @type {Array<HastElementContent>} */\n    const values = []\n\n    if ('children' in parent) {\n      const nodes = parent.children\n      let index = -1\n      while (++index < nodes.length) {\n        const result = state.one(nodes[index], parent)\n\n        // To do: see if we van clean this? Can we merge texts?\n        if (result) {\n          if (index && nodes[index - 1].type === 'break') {\n            if (!Array.isArray(result) && result.type === 'text') {\n              result.value = trimMarkdownSpaceStart(result.value)\n            }\n\n            if (!Array.isArray(result) && result.type === 'element') {\n              const head = result.children[0]\n\n              if (head && head.type === 'text') {\n                head.value = trimMarkdownSpaceStart(head.value)\n              }\n            }\n          }\n\n          if (Array.isArray(result)) {\n            values.push(...result)\n          } else {\n            values.push(result)\n          }\n        }\n      }\n    }\n\n    return values\n  }\n}\n\n/**\n * Copy a node’s positional info.\n *\n * @param {MdastNodes} from\n *   mdast node to copy from.\n * @param {HastNodes} to\n *   hast node to copy into.\n * @returns {undefined}\n *   Nothing.\n */\nfunction patch(from, to) {\n  if (from.position) to.position = position(from)\n}\n\n/**\n * Honor the `data` of `from` and maybe generate an element instead of `to`.\n *\n * @template {HastNodes} Type\n *   Node type.\n * @param {MdastNodes} from\n *   mdast node to use data from.\n * @param {Type} to\n *   hast node to change.\n * @returns {HastElement | Type}\n *   Nothing.\n */\nfunction applyData(from, to) {\n  /** @type {HastElement | Type} */\n  let result = to\n\n  // Handle `data.hName`, `data.hProperties, `data.hChildren`.\n  if (from && from.data) {\n    const hName = from.data.hName\n    const hChildren = from.data.hChildren\n    const hProperties = from.data.hProperties\n\n    if (typeof hName === 'string') {\n      // Transforming the node resulted in an element with a different name\n      // than wanted:\n      if (result.type === 'element') {\n        result.tagName = hName\n      }\n      // Transforming the node resulted in a non-element, which happens for\n      // raw, text, and root nodes (unless custom handlers are passed).\n      // The intent of `hName` is to create an element, but likely also to keep\n      // the content around (otherwise: pass `hChildren`).\n      else {\n        /** @type {Array<HastElementContent>} */\n        // @ts-expect-error: assume no doctypes in `root`.\n        const children = 'children' in result ? result.children : [result]\n        result = {type: 'element', tagName: hName, properties: {}, children}\n      }\n    }\n\n    if (result.type === 'element' && hProperties) {\n      Object.assign(result.properties, structuredClone(hProperties))\n    }\n\n    if (\n      'children' in result &&\n      result.children &&\n      hChildren !== null &&\n      hChildren !== undefined\n    ) {\n      result.children = hChildren\n    }\n  }\n\n  return result\n}\n\n/**\n * Transform an unknown node.\n *\n * @param {State} state\n *   Info passed around.\n * @param {MdastNodes} node\n *   Unknown mdast node.\n * @returns {HastElement | HastText}\n *   Resulting hast node.\n */\nfunction defaultUnknownHandler(state, node) {\n  const data = node.data || {}\n  /** @type {HastElement | HastText} */\n  const result =\n    'value' in node &&\n    !(own.call(data, 'hProperties') || own.call(data, 'hChildren'))\n      ? {type: 'text', value: node.value}\n      : {\n          type: 'element',\n          tagName: 'div',\n          properties: {},\n          children: state.all(node)\n        }\n\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n\n/**\n * Wrap `nodes` with line endings between each node.\n *\n * @template {HastRootContent} Type\n *   Node type.\n * @param {Array<Type>} nodes\n *   List of nodes to wrap.\n * @param {boolean | undefined} [loose=false]\n *   Whether to add line endings at start and end (default: `false`).\n * @returns {Array<HastText | Type>}\n *   Wrapped nodes.\n */\nexport function wrap(nodes, loose) {\n  /** @type {Array<HastText | Type>} */\n  const result = []\n  let index = -1\n\n  if (loose) {\n    result.push({type: 'text', value: '\\n'})\n  }\n\n  while (++index < nodes.length) {\n    if (index) result.push({type: 'text', value: '\\n'})\n    result.push(nodes[index])\n  }\n\n  if (loose && nodes.length > 0) {\n    result.push({type: 'text', value: '\\n'})\n  }\n\n  return result\n}\n\n/**\n * Trim spaces and tabs at the start of `value`.\n *\n * @param {string} value\n *   Value to trim.\n * @returns {string}\n *   Result.\n */\nfunction trimMarkdownSpaceStart(value) {\n  let index = 0\n  let code = value.charCodeAt(index)\n\n  while (code === 9 || code === 32) {\n    index++\n    code = value.charCodeAt(index)\n  }\n\n  return value.slice(index)\n}\n","/**\n * @typedef {import('hast').Nodes} HastNodes\n * @typedef {import('mdast').Nodes} MdastNodes\n * @typedef {import('./state.js').Options} Options\n */\n\nimport {ok as assert} from 'devlop'\nimport {footer} from './footer.js'\nimport {createState} from './state.js'\n\n/**\n * Transform mdast to hast.\n *\n * ##### Notes\n *\n * ###### HTML\n *\n * Raw HTML is available in mdast as `html` nodes and can be embedded in hast\n * as semistandard `raw` nodes.\n * Most utilities ignore `raw` nodes but two notable ones don’t:\n *\n * *   `hast-util-to-html` also has an option `allowDangerousHtml` which will\n *     output the raw HTML.\n *     This is typically discouraged as noted by the option name but is useful\n *     if you completely trust authors\n * *   `hast-util-raw` can handle the raw embedded HTML strings by parsing them\n *     into standard hast nodes (`element`, `text`, etc).\n *     This is a heavy task as it needs a full HTML parser, but it is the only\n *     way to support untrusted content\n *\n * ###### Footnotes\n *\n * Many options supported here relate to footnotes.\n * Footnotes are not specified by CommonMark, which we follow by default.\n * They are supported by GitHub, so footnotes can be enabled in markdown with\n * `mdast-util-gfm`.\n *\n * The options `footnoteBackLabel` and `footnoteLabel` define natural language\n * that explains footnotes, which is hidden for sighted users but shown to\n * assistive technology.\n * When your page is not in English, you must define translated values.\n *\n * Back references use ARIA attributes, but the section label itself uses a\n * heading that is hidden with an `sr-only` class.\n * To show it to sighted users, define different attributes in\n * `footnoteLabelProperties`.\n *\n * ###### Clobbering\n *\n * Footnotes introduces a problem, as it links footnote calls to footnote\n * definitions on the page through `id` attributes generated from user content,\n * which results in DOM clobbering.\n *\n * DOM clobbering is this:\n *\n * ```html\n * <p id=x></p>\n * <script>alert(x) // `x` now refers to the DOM `p#x` element</script>\n * ```\n *\n * Elements by their ID are made available by browsers on the `window` object,\n * which is a security risk.\n * Using a prefix solves this problem.\n *\n * More information on how to handle clobbering and the prefix is explained in\n * Example: headings (DOM clobbering) in `rehype-sanitize`.\n *\n * ###### Unknown nodes\n *\n * Unknown nodes are nodes with a type that isn’t in `handlers` or `passThrough`.\n * The default behavior for unknown nodes is:\n *\n * *   when the node has a `value` (and doesn’t have `data.hName`,\n *     `data.hProperties`, or `data.hChildren`, see later), create a hast `text`\n *     node\n * *   otherwise, create a `<div>` element (which could be changed with\n *     `data.hName`), with its children mapped from mdast to hast as well\n *\n * This behavior can be changed by passing an `unknownHandler`.\n *\n * @param {MdastNodes} tree\n *   mdast tree.\n * @param {Options | null | undefined} [options]\n *   Configuration (optional).\n * @returns {HastNodes}\n *   hast tree.\n */\nexport function toHast(tree, options) {\n  const state = createState(tree, options)\n  const node = state.one(tree, undefined)\n  const foot = footer(state)\n  /** @type {HastNodes} */\n  const result = Array.isArray(node)\n    ? {type: 'root', children: node}\n    : node || {type: 'root', children: []}\n\n  if (foot) {\n    // If there’s a footer, there were definitions, meaning block\n    // content.\n    // So `result` is a parent node.\n    assert('children' in result)\n    result.children.push({type: 'text', value: '\\n'}, foot)\n  }\n\n  return result\n}\n","// Include `data` fields in mdast and `raw` nodes in hast.\n/// <reference types=\"mdast-util-to-hast\" />\n\n/**\n * @typedef {import('hast').Root} HastRoot\n * @typedef {import('mdast').Root} MdastRoot\n * @typedef {import('mdast-util-to-hast').Options} ToHastOptions\n * @typedef {import('unified').Processor} Processor\n * @typedef {import('vfile').VFile} VFile\n */\n\n/**\n * @typedef {Omit<ToHastOptions, 'file'>} Options\n *\n * @callback TransformBridge\n *   Bridge-mode.\n *\n *   Runs the destination with the new hast tree.\n *   Discards result.\n * @param {MdastRoot} tree\n *   Tree.\n * @param {VFile} file\n *   File.\n * @returns {Promise<undefined>}\n *   Nothing.\n *\n * @callback TransformMutate\n *  Mutate-mode.\n *\n *  Further transformers run on the hast tree.\n * @param {MdastRoot} tree\n *   Tree.\n * @param {VFile} file\n *   File.\n * @returns {HastRoot}\n *   Tree (hast).\n */\n\nimport {toHast} from 'mdast-util-to-hast'\n\n/**\n * Turn markdown into HTML.\n *\n * ##### Notes\n *\n * ###### Signature\n *\n * *   if a processor is given, runs the (rehype) plugins used on it with a\n *     hast tree, then discards the result (*bridge mode*)\n * *   otherwise, returns a hast tree, the plugins used after `remarkRehype`\n *     are rehype plugins (*mutate mode*)\n *\n * > 👉 **Note**: It’s highly unlikely that you want to pass a `processor`.\n *\n * ###### HTML\n *\n * Raw HTML is available in mdast as `html` nodes and can be embedded in hast\n * as semistandard `raw` nodes.\n * Most plugins ignore `raw` nodes but two notable ones don’t:\n *\n * *   `rehype-stringify` also has an option `allowDangerousHtml` which will\n *     output the raw HTML.\n *     This is typically discouraged as noted by the option name but is useful if\n *     you completely trust authors\n * *   `rehype-raw` can handle the raw embedded HTML strings by parsing them\n *     into standard hast nodes (`element`, `text`, etc).\n *     This is a heavy task as it needs a full HTML parser, but it is the only way\n *     to support untrusted content\n *\n * ###### Footnotes\n *\n * Many options supported here relate to footnotes.\n * Footnotes are not specified by CommonMark, which we follow by default.\n * They are supported by GitHub, so footnotes can be enabled in markdown with\n * `remark-gfm`.\n *\n * The options `footnoteBackLabel` and `footnoteLabel` define natural language\n * that explains footnotes, which is hidden for sighted users but shown to\n * assistive technology.\n * When your page is not in English, you must define translated values.\n *\n * Back references use ARIA attributes, but the section label itself uses a\n * heading that is hidden with an `sr-only` class.\n * To show it to sighted users, define different attributes in\n * `footnoteLabelProperties`.\n *\n * ###### Clobbering\n *\n * Footnotes introduces a problem, as it links footnote calls to footnote\n * definitions on the page through `id` attributes generated from user content,\n * which results in DOM clobbering.\n *\n * DOM clobbering is this:\n *\n * ```html\n * <p id=x></p>\n * <script>alert(x) // `x` now refers to the DOM `p#x` element</script>\n * ```\n *\n * Elements by their ID are made available by browsers on the `window` object,\n * which is a security risk.\n * Using a prefix solves this problem.\n *\n * More information on how to handle clobbering and the prefix is explained in\n * *Example: headings (DOM clobbering)* in `rehype-sanitize`.\n *\n * ###### Unknown nodes\n *\n * Unknown nodes are nodes with a type that isn’t in `handlers` or `passThrough`.\n * The default behavior for unknown nodes is:\n *\n * *   when the node has a `value` (and doesn’t have `data.hName`,\n *     `data.hProperties`, or `data.hChildren`, see later), create a hast `text`\n *     node\n * *   otherwise, create a `<div>` element (which could be changed with\n *     `data.hName`), with its children mapped from mdast to hast as well\n *\n * This behavior can be changed by passing an `unknownHandler`.\n *\n * @overload\n * @param {Processor} processor\n * @param {Readonly<Options> | null | undefined} [options]\n * @returns {TransformBridge}\n *\n * @overload\n * @param {Readonly<Options> | null | undefined} [options]\n * @returns {TransformMutate}\n *\n * @param {Readonly<Options> | Processor | null | undefined} [destination]\n *   Processor or configuration (optional).\n * @param {Readonly<Options> | null | undefined} [options]\n *   When a processor was given, configuration (optional).\n * @returns {TransformBridge | TransformMutate}\n *   Transform.\n */\nexport default function remarkRehype(destination, options) {\n  if (destination && 'run' in destination) {\n    /**\n     * @type {TransformBridge}\n     */\n    return async function (tree, file) {\n      // Cast because root in -> root out.\n      const hastTree = /** @type {HastRoot} */ (\n        toHast(tree, {file, ...options})\n      )\n      await destination.run(hastTree, file)\n    }\n  }\n\n  /**\n   * @type {TransformMutate}\n   */\n  return function (tree, file) {\n    // Cast because root in -> root out.\n    return /** @type {HastRoot} */ (\n      toHast(tree, {file, ...(options || destination)})\n    )\n  }\n}\n","/**\n * Throw a given error.\n *\n * @param {Error|null|undefined} [error]\n *   Maybe error.\n * @returns {asserts error is null|undefined}\n */\nexport function bail(error) {\n  if (error) {\n    throw error\n  }\n}\n","export default function isPlainObject(value) {\n\tif (typeof value !== 'object' || value === null) {\n\t\treturn false;\n\t}\n\n\tconst prototype = Object.getPrototypeOf(value);\n\treturn (prototype === null || prototype === Object.prototype || Object.getPrototypeOf(prototype) === null) && !(Symbol.toStringTag in value) && !(Symbol.iterator in value);\n}\n","// To do: remove `void`s\n// To do: remove `null` from output of our APIs, allow it as user APIs.\n\n/**\n * @typedef {(error?: Error | null | undefined, ...output: Array<any>) => void} Callback\n *   Callback.\n *\n * @typedef {(...input: Array<any>) => any} Middleware\n *   Ware.\n *\n * @typedef Pipeline\n *   Pipeline.\n * @property {Run} run\n *   Run the pipeline.\n * @property {Use} use\n *   Add middleware.\n *\n * @typedef {(...input: Array<any>) => void} Run\n *   Call all middleware.\n *\n *   Calls `done` on completion with either an error or the output of the\n *   last middleware.\n *\n *   > 👉 **Note**: as the length of input defines whether async functions get a\n *   > `next` function,\n *   > it’s recommended to keep `input` at one value normally.\n\n *\n * @typedef {(fn: Middleware) => Pipeline} Use\n *   Add middleware.\n */\n\n/**\n * Create new middleware.\n *\n * @returns {Pipeline}\n *   Pipeline.\n */\nexport function trough() {\n  /** @type {Array<Middleware>} */\n  const fns = []\n  /** @type {Pipeline} */\n  const pipeline = {run, use}\n\n  return pipeline\n\n  /** @type {Run} */\n  function run(...values) {\n    let middlewareIndex = -1\n    /** @type {Callback} */\n    const callback = values.pop()\n\n    if (typeof callback !== 'function') {\n      throw new TypeError('Expected function as last argument, not ' + callback)\n    }\n\n    next(null, ...values)\n\n    /**\n     * Run the next `fn`, or we’re done.\n     *\n     * @param {Error | null | undefined} error\n     * @param {Array<any>} output\n     */\n    function next(error, ...output) {\n      const fn = fns[++middlewareIndex]\n      let index = -1\n\n      if (error) {\n        callback(error)\n        return\n      }\n\n      // Copy non-nullish input into values.\n      while (++index < values.length) {\n        if (output[index] === null || output[index] === undefined) {\n          output[index] = values[index]\n        }\n      }\n\n      // Save the newly created `output` for the next call.\n      values = output\n\n      // Next or done.\n      if (fn) {\n        wrap(fn, next)(...output)\n      } else {\n        callback(null, ...output)\n      }\n    }\n  }\n\n  /** @type {Use} */\n  function use(middelware) {\n    if (typeof middelware !== 'function') {\n      throw new TypeError(\n        'Expected `middelware` to be a function, not ' + middelware\n      )\n    }\n\n    fns.push(middelware)\n    return pipeline\n  }\n}\n\n/**\n * Wrap `middleware` into a uniform interface.\n *\n * You can pass all input to the resulting function.\n * `callback` is then called with the output of `middleware`.\n *\n * If `middleware` accepts more arguments than the later given in input,\n * an extra `done` function is passed to it after that input,\n * which must be called by `middleware`.\n *\n * The first value in `input` is the main input value.\n * All other input values are the rest input values.\n * The values given to `callback` are the input values,\n * merged with every non-nullish output value.\n *\n * * if `middleware` throws an error,\n *   returns a promise that is rejected,\n *   or calls the given `done` function with an error,\n *   `callback` is called with that error\n * * if `middleware` returns a value or returns a promise that is resolved,\n *   that value is the main output value\n * * if `middleware` calls `done`,\n *   all non-nullish values except for the first one (the error) overwrite the\n *   output values\n *\n * @param {Middleware} middleware\n *   Function to wrap.\n * @param {Callback} callback\n *   Callback called with the output of `middleware`.\n * @returns {Run}\n *   Wrapped middleware.\n */\nexport function wrap(middleware, callback) {\n  /** @type {boolean} */\n  let called\n\n  return wrapped\n\n  /**\n   * Call `middleware`.\n   * @this {any}\n   * @param {Array<any>} parameters\n   * @returns {void}\n   */\n  function wrapped(...parameters) {\n    const fnExpectsCallback = middleware.length > parameters.length\n    /** @type {any} */\n    let result\n\n    if (fnExpectsCallback) {\n      parameters.push(done)\n    }\n\n    try {\n      result = middleware.apply(this, parameters)\n    } catch (error) {\n      const exception = /** @type {Error} */ (error)\n\n      // Well, this is quite the pickle.\n      // `middleware` received a callback and called it synchronously, but that\n      // threw an error.\n      // The only thing left to do is to throw the thing instead.\n      if (fnExpectsCallback && called) {\n        throw exception\n      }\n\n      return done(exception)\n    }\n\n    if (!fnExpectsCallback) {\n      if (result && result.then && typeof result.then === 'function') {\n        result.then(then, done)\n      } else if (result instanceof Error) {\n        done(result)\n      } else {\n        then(result)\n      }\n    }\n  }\n\n  /**\n   * Call `callback`, only once.\n   *\n   * @type {Callback}\n   */\n  function done(error, ...output) {\n    if (!called) {\n      called = true\n      callback(error, ...output)\n    }\n  }\n\n  /**\n   * Call `done` with one value.\n   *\n   * @param {any} [value]\n   */\n  function then(value) {\n    done(null, value)\n  }\n}\n","// A derivative work based on:\n// <https://github.com/browserify/path-browserify>.\n// Which is licensed:\n//\n// MIT License\n//\n// Copyright (c) 2013 James Halliday\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy of\n// this software and associated documentation files (the \"Software\"), to deal in\n// the Software without restriction, including without limitation the rights to\n// use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\n// the Software, and to permit persons to whom the Software is furnished to do so,\n// subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in all\n// copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\n// FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\n// COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\n// IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\n// CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n// A derivative work based on:\n//\n// Parts of that are extracted from Node’s internal `path` module:\n// <https://github.com/nodejs/node/blob/master/lib/path.js>.\n// Which is licensed:\n//\n// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nexport const path = {basename, dirname, extname, join, sep: '/'}\n\n/* eslint-disable max-depth, complexity */\n\n/**\n * Get the basename from a path.\n *\n * @param {string} path\n *   File path.\n * @param {string | null | undefined} [ext]\n *   Extension to strip.\n * @returns {string}\n *   Stem or basename.\n */\nfunction basename(path, ext) {\n  if (ext !== undefined && typeof ext !== 'string') {\n    throw new TypeError('\"ext\" argument must be a string')\n  }\n\n  assertPath(path)\n  let start = 0\n  let end = -1\n  let index = path.length\n  /** @type {boolean | undefined} */\n  let seenNonSlash\n\n  if (ext === undefined || ext.length === 0 || ext.length > path.length) {\n    while (index--) {\n      if (path.codePointAt(index) === 47 /* `/` */) {\n        // If we reached a path separator that was not part of a set of path\n        // separators at the end of the string, stop now.\n        if (seenNonSlash) {\n          start = index + 1\n          break\n        }\n      } else if (end < 0) {\n        // We saw the first non-path separator, mark this as the end of our\n        // path component.\n        seenNonSlash = true\n        end = index + 1\n      }\n    }\n\n    return end < 0 ? '' : path.slice(start, end)\n  }\n\n  if (ext === path) {\n    return ''\n  }\n\n  let firstNonSlashEnd = -1\n  let extIndex = ext.length - 1\n\n  while (index--) {\n    if (path.codePointAt(index) === 47 /* `/` */) {\n      // If we reached a path separator that was not part of a set of path\n      // separators at the end of the string, stop now.\n      if (seenNonSlash) {\n        start = index + 1\n        break\n      }\n    } else {\n      if (firstNonSlashEnd < 0) {\n        // We saw the first non-path separator, remember this index in case\n        // we need it if the extension ends up not matching.\n        seenNonSlash = true\n        firstNonSlashEnd = index + 1\n      }\n\n      if (extIndex > -1) {\n        // Try to match the explicit extension.\n        if (path.codePointAt(index) === ext.codePointAt(extIndex--)) {\n          if (extIndex < 0) {\n            // We matched the extension, so mark this as the end of our path\n            // component\n            end = index\n          }\n        } else {\n          // Extension does not match, so our result is the entire path\n          // component\n          extIndex = -1\n          end = firstNonSlashEnd\n        }\n      }\n    }\n  }\n\n  if (start === end) {\n    end = firstNonSlashEnd\n  } else if (end < 0) {\n    end = path.length\n  }\n\n  return path.slice(start, end)\n}\n\n/**\n * Get the dirname from a path.\n *\n * @param {string} path\n *   File path.\n * @returns {string}\n *   File path.\n */\nfunction dirname(path) {\n  assertPath(path)\n\n  if (path.length === 0) {\n    return '.'\n  }\n\n  let end = -1\n  let index = path.length\n  /** @type {boolean | undefined} */\n  let unmatchedSlash\n\n  // Prefix `--` is important to not run on `0`.\n  while (--index) {\n    if (path.codePointAt(index) === 47 /* `/` */) {\n      if (unmatchedSlash) {\n        end = index\n        break\n      }\n    } else if (!unmatchedSlash) {\n      // We saw the first non-path separator\n      unmatchedSlash = true\n    }\n  }\n\n  return end < 0\n    ? path.codePointAt(0) === 47 /* `/` */\n      ? '/'\n      : '.'\n    : end === 1 && path.codePointAt(0) === 47 /* `/` */\n    ? '//'\n    : path.slice(0, end)\n}\n\n/**\n * Get an extname from a path.\n *\n * @param {string} path\n *   File path.\n * @returns {string}\n *   Extname.\n */\nfunction extname(path) {\n  assertPath(path)\n\n  let index = path.length\n\n  let end = -1\n  let startPart = 0\n  let startDot = -1\n  // Track the state of characters (if any) we see before our first dot and\n  // after any path separator we find.\n  let preDotState = 0\n  /** @type {boolean | undefined} */\n  let unmatchedSlash\n\n  while (index--) {\n    const code = path.codePointAt(index)\n\n    if (code === 47 /* `/` */) {\n      // If we reached a path separator that was not part of a set of path\n      // separators at the end of the string, stop now.\n      if (unmatchedSlash) {\n        startPart = index + 1\n        break\n      }\n\n      continue\n    }\n\n    if (end < 0) {\n      // We saw the first non-path separator, mark this as the end of our\n      // extension.\n      unmatchedSlash = true\n      end = index + 1\n    }\n\n    if (code === 46 /* `.` */) {\n      // If this is our first dot, mark it as the start of our extension.\n      if (startDot < 0) {\n        startDot = index\n      } else if (preDotState !== 1) {\n        preDotState = 1\n      }\n    } else if (startDot > -1) {\n      // We saw a non-dot and non-path separator before our dot, so we should\n      // have a good chance at having a non-empty extension.\n      preDotState = -1\n    }\n  }\n\n  if (\n    startDot < 0 ||\n    end < 0 ||\n    // We saw a non-dot character immediately before the dot.\n    preDotState === 0 ||\n    // The (right-most) trimmed path component is exactly `..`.\n    (preDotState === 1 && startDot === end - 1 && startDot === startPart + 1)\n  ) {\n    return ''\n  }\n\n  return path.slice(startDot, end)\n}\n\n/**\n * Join segments from a path.\n *\n * @param {Array<string>} segments\n *   Path segments.\n * @returns {string}\n *   File path.\n */\nfunction join(...segments) {\n  let index = -1\n  /** @type {string | undefined} */\n  let joined\n\n  while (++index < segments.length) {\n    assertPath(segments[index])\n\n    if (segments[index]) {\n      joined =\n        joined === undefined ? segments[index] : joined + '/' + segments[index]\n    }\n  }\n\n  return joined === undefined ? '.' : normalize(joined)\n}\n\n/**\n * Normalize a basic file path.\n *\n * @param {string} path\n *   File path.\n * @returns {string}\n *   File path.\n */\n// Note: `normalize` is not exposed as `path.normalize`, so some code is\n// manually removed from it.\nfunction normalize(path) {\n  assertPath(path)\n\n  const absolute = path.codePointAt(0) === 47 /* `/` */\n\n  // Normalize the path according to POSIX rules.\n  let value = normalizeString(path, !absolute)\n\n  if (value.length === 0 && !absolute) {\n    value = '.'\n  }\n\n  if (value.length > 0 && path.codePointAt(path.length - 1) === 47 /* / */) {\n    value += '/'\n  }\n\n  return absolute ? '/' + value : value\n}\n\n/**\n * Resolve `.` and `..` elements in a path with directory names.\n *\n * @param {string} path\n *   File path.\n * @param {boolean} allowAboveRoot\n *   Whether `..` can move above root.\n * @returns {string}\n *   File path.\n */\nfunction normalizeString(path, allowAboveRoot) {\n  let result = ''\n  let lastSegmentLength = 0\n  let lastSlash = -1\n  let dots = 0\n  let index = -1\n  /** @type {number | undefined} */\n  let code\n  /** @type {number} */\n  let lastSlashIndex\n\n  while (++index <= path.length) {\n    if (index < path.length) {\n      code = path.codePointAt(index)\n    } else if (code === 47 /* `/` */) {\n      break\n    } else {\n      code = 47 /* `/` */\n    }\n\n    if (code === 47 /* `/` */) {\n      if (lastSlash === index - 1 || dots === 1) {\n        // Empty.\n      } else if (lastSlash !== index - 1 && dots === 2) {\n        if (\n          result.length < 2 ||\n          lastSegmentLength !== 2 ||\n          result.codePointAt(result.length - 1) !== 46 /* `.` */ ||\n          result.codePointAt(result.length - 2) !== 46 /* `.` */\n        ) {\n          if (result.length > 2) {\n            lastSlashIndex = result.lastIndexOf('/')\n\n            if (lastSlashIndex !== result.length - 1) {\n              if (lastSlashIndex < 0) {\n                result = ''\n                lastSegmentLength = 0\n              } else {\n                result = result.slice(0, lastSlashIndex)\n                lastSegmentLength = result.length - 1 - result.lastIndexOf('/')\n              }\n\n              lastSlash = index\n              dots = 0\n              continue\n            }\n          } else if (result.length > 0) {\n            result = ''\n            lastSegmentLength = 0\n            lastSlash = index\n            dots = 0\n            continue\n          }\n        }\n\n        if (allowAboveRoot) {\n          result = result.length > 0 ? result + '/..' : '..'\n          lastSegmentLength = 2\n        }\n      } else {\n        if (result.length > 0) {\n          result += '/' + path.slice(lastSlash + 1, index)\n        } else {\n          result = path.slice(lastSlash + 1, index)\n        }\n\n        lastSegmentLength = index - lastSlash - 1\n      }\n\n      lastSlash = index\n      dots = 0\n    } else if (code === 46 /* `.` */ && dots > -1) {\n      dots++\n    } else {\n      dots = -1\n    }\n  }\n\n  return result\n}\n\n/**\n * Make sure `path` is a string.\n *\n * @param {string} path\n *   File path.\n * @returns {asserts path is string}\n *   Nothing.\n */\nfunction assertPath(path) {\n  if (typeof path !== 'string') {\n    throw new TypeError(\n      'Path must be a string. Received ' + JSON.stringify(path)\n    )\n  }\n}\n\n/* eslint-enable max-depth, complexity */\n","// Somewhat based on:\n// <https://github.com/defunctzombie/node-process/blob/master/browser.js>.\n// But I don’t think one tiny line of code can be copyrighted. 😅\nexport const proc = {cwd}\n\nfunction cwd() {\n  return '/'\n}\n","/**\n * Checks if a value has the shape of a WHATWG URL object.\n *\n * Using a symbol or instanceof would not be able to recognize URL objects\n * coming from other implementations (e.g. in Electron), so instead we are\n * checking some well known properties for a lack of a better test.\n *\n * We use `href` and `protocol` as they are the only properties that are\n * easy to retrieve and calculate due to the lazy nature of the getters.\n *\n * We check for auth attribute to distinguish legacy url instance with\n * WHATWG URL instance.\n *\n * @param {unknown} fileUrlOrPath\n *   File path or URL.\n * @returns {fileUrlOrPath is URL}\n *   Whether it’s a URL.\n */\n// From: <https://github.com/nodejs/node/blob/6a3403c/lib/internal/url.js#L720>\nexport function isUrl(fileUrlOrPath) {\n  return Boolean(\n    fileUrlOrPath !== null &&\n      typeof fileUrlOrPath === 'object' &&\n      'href' in fileUrlOrPath &&\n      fileUrlOrPath.href &&\n      'protocol' in fileUrlOrPath &&\n      fileUrlOrPath.protocol &&\n      // @ts-expect-error: indexing is fine.\n      fileUrlOrPath.auth === undefined\n  )\n}\n","import {isUrl} from './minurl.shared.js'\n\nexport {isUrl} from './minurl.shared.js'\n\n// See: <https://github.com/nodejs/node/blob/6a3403c/lib/internal/url.js>\n\n/**\n * @param {URL | string} path\n *   File URL.\n * @returns {string}\n *   File URL.\n */\nexport function urlToPath(path) {\n  if (typeof path === 'string') {\n    path = new URL(path)\n  } else if (!isUrl(path)) {\n    /** @type {NodeJS.ErrnoException} */\n    const error = new TypeError(\n      'The \"path\" argument must be of type string or an instance of URL. Received `' +\n        path +\n        '`'\n    )\n    error.code = 'ERR_INVALID_ARG_TYPE'\n    throw error\n  }\n\n  if (path.protocol !== 'file:') {\n    /** @type {NodeJS.ErrnoException} */\n    const error = new TypeError('The URL must be of scheme file')\n    error.code = 'ERR_INVALID_URL_SCHEME'\n    throw error\n  }\n\n  return getPathFromURLPosix(path)\n}\n\n/**\n * Get a path from a POSIX URL.\n *\n * @param {URL} url\n *   URL.\n * @returns {string}\n *   File path.\n */\nfunction getPathFromURLPosix(url) {\n  if (url.hostname !== '') {\n    /** @type {NodeJS.ErrnoException} */\n    const error = new TypeError(\n      'File URL host must be \"localhost\" or empty on darwin'\n    )\n    error.code = 'ERR_INVALID_FILE_URL_HOST'\n    throw error\n  }\n\n  const pathname = url.pathname\n  let index = -1\n\n  while (++index < pathname.length) {\n    if (\n      pathname.codePointAt(index) === 37 /* `%` */ &&\n      pathname.codePointAt(index + 1) === 50 /* `2` */\n    ) {\n      const third = pathname.codePointAt(index + 2)\n      if (third === 70 /* `F` */ || third === 102 /* `f` */) {\n        /** @type {NodeJS.ErrnoException} */\n        const error = new TypeError(\n          'File URL path must not include encoded / characters'\n        )\n        error.code = 'ERR_INVALID_FILE_URL_PATH'\n        throw error\n      }\n    }\n  }\n\n  return decodeURIComponent(pathname)\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Point} Point\n * @typedef {import('unist').Position} Position\n * @typedef {import('vfile-message').Options} MessageOptions\n * @typedef {import('../index.js').Data} Data\n * @typedef {import('../index.js').Value} Value\n */\n\n/**\n * @typedef {object & {type: string, position?: Position | undefined}} NodeLike\n *\n * @typedef {Options | URL | VFile | Value} Compatible\n *   Things that can be passed to the constructor.\n *\n * @typedef VFileCoreOptions\n *   Set multiple values.\n * @property {string | null | undefined} [basename]\n *   Set `basename` (name).\n * @property {string | null | undefined} [cwd]\n *   Set `cwd` (working directory).\n * @property {Data | null | undefined} [data]\n *   Set `data` (associated info).\n * @property {string | null | undefined} [dirname]\n *   Set `dirname` (path w/o basename).\n * @property {string | null | undefined} [extname]\n *   Set `extname` (extension with dot).\n * @property {Array<string> | null | undefined} [history]\n *   Set `history` (paths the file moved between).\n * @property {URL | string | null | undefined} [path]\n *   Set `path` (current path).\n * @property {string | null | undefined} [stem]\n *   Set `stem` (name without extension).\n * @property {Value | null | undefined} [value]\n *   Set `value` (the contents of the file).\n *\n * @typedef Map\n *   Raw source map.\n *\n *   See:\n *   <https://github.com/mozilla/source-map/blob/60adcb0/source-map.d.ts#L15-L23>.\n * @property {number} version\n *   Which version of the source map spec this map is following.\n * @property {Array<string>} sources\n *   An array of URLs to the original source files.\n * @property {Array<string>} names\n *   An array of identifiers which can be referenced by individual mappings.\n * @property {string | undefined} [sourceRoot]\n *   The URL root from which all sources are relative.\n * @property {Array<string> | undefined} [sourcesContent]\n *   An array of contents of the original source files.\n * @property {string} mappings\n *   A string of base64 VLQs which contain the actual mappings.\n * @property {string} file\n *   The generated file this source map is associated with.\n *\n * @typedef {Record<string, unknown> & VFileCoreOptions} Options\n *   Configuration.\n *\n *   A bunch of keys that will be shallow copied over to the new file.\n *\n * @typedef {Record<string, unknown>} ReporterSettings\n *   Configuration for reporters.\n */\n\n/**\n * @template [Settings=ReporterSettings]\n *   Options type.\n * @callback Reporter\n *   Type for a reporter.\n * @param {Array<VFile>} files\n *   Files to report.\n * @param {Settings} options\n *   Configuration.\n * @returns {string}\n *   Report.\n */\n\nimport {VFileMessage} from 'vfile-message'\nimport {path} from 'vfile/do-not-use-conditional-minpath'\nimport {proc} from 'vfile/do-not-use-conditional-minproc'\nimport {urlToPath, isUrl} from 'vfile/do-not-use-conditional-minurl'\n\n/**\n * Order of setting (least specific to most), we need this because otherwise\n * `{stem: 'a', path: '~/b.js'}` would throw, as a path is needed before a\n * stem can be set.\n */\nconst order = /** @type {const} */ ([\n  'history',\n  'path',\n  'basename',\n  'stem',\n  'extname',\n  'dirname'\n])\n\nexport class VFile {\n  /**\n   * Create a new virtual file.\n   *\n   * `options` is treated as:\n   *\n   * *   `string` or `Uint8Array` — `{value: options}`\n   * *   `URL` — `{path: options}`\n   * *   `VFile` — shallow copies its data over to the new file\n   * *   `object` — all fields are shallow copied over to the new file\n   *\n   * Path related fields are set in the following order (least specific to\n   * most specific): `history`, `path`, `basename`, `stem`, `extname`,\n   * `dirname`.\n   *\n   * You cannot set `dirname` or `extname` without setting either `history`,\n   * `path`, `basename`, or `stem` too.\n   *\n   * @param {Compatible | null | undefined} [value]\n   *   File value.\n   * @returns\n   *   New instance.\n   */\n  constructor(value) {\n    /** @type {Options | VFile} */\n    let options\n\n    if (!value) {\n      options = {}\n    } else if (isUrl(value)) {\n      options = {path: value}\n    } else if (typeof value === 'string' || isUint8Array(value)) {\n      options = {value}\n    } else {\n      options = value\n    }\n\n    /* eslint-disable no-unused-expressions */\n\n    /**\n     * Base of `path` (default: `process.cwd()` or `'/'` in browsers).\n     *\n     * @type {string}\n     */\n    this.cwd = proc.cwd()\n\n    /**\n     * Place to store custom info (default: `{}`).\n     *\n     * It’s OK to store custom data directly on the file but moving it to\n     * `data` is recommended.\n     *\n     * @type {Data}\n     */\n    this.data = {}\n\n    /**\n     * List of file paths the file moved between.\n     *\n     * The first is the original path and the last is the current path.\n     *\n     * @type {Array<string>}\n     */\n    this.history = []\n\n    /**\n     * List of messages associated with the file.\n     *\n     * @type {Array<VFileMessage>}\n     */\n    this.messages = []\n\n    /**\n     * Raw value.\n     *\n     * @type {Value}\n     */\n    this.value\n\n    // The below are non-standard, they are “well-known”.\n    // As in, used in several tools.\n    /**\n     * Source map.\n     *\n     * This type is equivalent to the `RawSourceMap` type from the `source-map`\n     * module.\n     *\n     * @type {Map | null | undefined}\n     */\n    this.map\n\n    /**\n     * Custom, non-string, compiled, representation.\n     *\n     * This is used by unified to store non-string results.\n     * One example is when turning markdown into React nodes.\n     *\n     * @type {unknown}\n     */\n    this.result\n\n    /**\n     * Whether a file was saved to disk.\n     *\n     * This is used by vfile reporters.\n     *\n     * @type {boolean}\n     */\n    this.stored\n    /* eslint-enable no-unused-expressions */\n\n    // Set path related properties in the correct order.\n    let index = -1\n\n    while (++index < order.length) {\n      const prop = order[index]\n\n      // Note: we specifically use `in` instead of `hasOwnProperty` to accept\n      // `vfile`s too.\n      if (\n        prop in options &&\n        options[prop] !== undefined &&\n        options[prop] !== null\n      ) {\n        // @ts-expect-error: TS doesn’t understand basic reality.\n        this[prop] = prop === 'history' ? [...options[prop]] : options[prop]\n      }\n    }\n\n    /** @type {string} */\n    let prop\n\n    // Set non-path related properties.\n    for (prop in options) {\n      // @ts-expect-error: fine to set other things.\n      if (!order.includes(prop)) {\n        // @ts-expect-error: fine to set other things.\n        this[prop] = options[prop]\n      }\n    }\n  }\n\n  /**\n   * Get the basename (including extname) (example: `'index.min.js'`).\n   *\n   * @returns {string | undefined}\n   *   Basename.\n   */\n  get basename() {\n    return typeof this.path === 'string' ? path.basename(this.path) : undefined\n  }\n\n  /**\n   * Set basename (including extname) (`'index.min.js'`).\n   *\n   * Cannot contain path separators (`'/'` on unix, macOS, and browsers, `'\\'`\n   * on windows).\n   * Cannot be nullified (use `file.path = file.dirname` instead).\n   *\n   * @param {string} basename\n   *   Basename.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  set basename(basename) {\n    assertNonEmpty(basename, 'basename')\n    assertPart(basename, 'basename')\n    this.path = path.join(this.dirname || '', basename)\n  }\n\n  /**\n   * Get the parent path (example: `'~'`).\n   *\n   * @returns {string | undefined}\n   *   Dirname.\n   */\n  get dirname() {\n    return typeof this.path === 'string' ? path.dirname(this.path) : undefined\n  }\n\n  /**\n   * Set the parent path (example: `'~'`).\n   *\n   * Cannot be set if there’s no `path` yet.\n   *\n   * @param {string | undefined} dirname\n   *   Dirname.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  set dirname(dirname) {\n    assertPath(this.basename, 'dirname')\n    this.path = path.join(dirname || '', this.basename)\n  }\n\n  /**\n   * Get the extname (including dot) (example: `'.js'`).\n   *\n   * @returns {string | undefined}\n   *   Extname.\n   */\n  get extname() {\n    return typeof this.path === 'string' ? path.extname(this.path) : undefined\n  }\n\n  /**\n   * Set the extname (including dot) (example: `'.js'`).\n   *\n   * Cannot contain path separators (`'/'` on unix, macOS, and browsers, `'\\'`\n   * on windows).\n   * Cannot be set if there’s no `path` yet.\n   *\n   * @param {string | undefined} extname\n   *   Extname.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  set extname(extname) {\n    assertPart(extname, 'extname')\n    assertPath(this.dirname, 'extname')\n\n    if (extname) {\n      if (extname.codePointAt(0) !== 46 /* `.` */) {\n        throw new Error('`extname` must start with `.`')\n      }\n\n      if (extname.includes('.', 1)) {\n        throw new Error('`extname` cannot contain multiple dots')\n      }\n    }\n\n    this.path = path.join(this.dirname, this.stem + (extname || ''))\n  }\n\n  /**\n   * Get the full path (example: `'~/index.min.js'`).\n   *\n   * @returns {string}\n   *   Path.\n   */\n  get path() {\n    return this.history[this.history.length - 1]\n  }\n\n  /**\n   * Set the full path (example: `'~/index.min.js'`).\n   *\n   * Cannot be nullified.\n   * You can set a file URL (a `URL` object with a `file:` protocol) which will\n   * be turned into a path with `url.fileURLToPath`.\n   *\n   * @param {URL | string} path\n   *   Path.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  set path(path) {\n    if (isUrl(path)) {\n      path = urlToPath(path)\n    }\n\n    assertNonEmpty(path, 'path')\n\n    if (this.path !== path) {\n      this.history.push(path)\n    }\n  }\n\n  /**\n   * Get the stem (basename w/o extname) (example: `'index.min'`).\n   *\n   * @returns {string | undefined}\n   *   Stem.\n   */\n  get stem() {\n    return typeof this.path === 'string'\n      ? path.basename(this.path, this.extname)\n      : undefined\n  }\n\n  /**\n   * Set the stem (basename w/o extname) (example: `'index.min'`).\n   *\n   * Cannot contain path separators (`'/'` on unix, macOS, and browsers, `'\\'`\n   * on windows).\n   * Cannot be nullified (use `file.path = file.dirname` instead).\n   *\n   * @param {string} stem\n   *   Stem.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  set stem(stem) {\n    assertNonEmpty(stem, 'stem')\n    assertPart(stem, 'stem')\n    this.path = path.join(this.dirname || '', stem + (this.extname || ''))\n  }\n\n  // Normal prototypal methods.\n  /**\n   * Create a fatal message for `reason` associated with the file.\n   *\n   * The `fatal` field of the message is set to `true` (error; file not usable)\n   * and the `file` field is set to the current file path.\n   * The message is added to the `messages` field on `file`.\n   *\n   * > 🪦 **Note**: also has obsolete signatures.\n   *\n   * @overload\n   * @param {string} reason\n   * @param {MessageOptions | null | undefined} [options]\n   * @returns {never}\n   *\n   * @overload\n   * @param {string} reason\n   * @param {Node | NodeLike | null | undefined} parent\n   * @param {string | null | undefined} [origin]\n   * @returns {never}\n   *\n   * @overload\n   * @param {string} reason\n   * @param {Point | Position | null | undefined} place\n   * @param {string | null | undefined} [origin]\n   * @returns {never}\n   *\n   * @overload\n   * @param {string} reason\n   * @param {string | null | undefined} [origin]\n   * @returns {never}\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {Node | NodeLike | null | undefined} parent\n   * @param {string | null | undefined} [origin]\n   * @returns {never}\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {Point | Position | null | undefined} place\n   * @param {string | null | undefined} [origin]\n   * @returns {never}\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {string | null | undefined} [origin]\n   * @returns {never}\n   *\n   * @param {Error | VFileMessage | string} causeOrReason\n   *   Reason for message, should use markdown.\n   * @param {Node | NodeLike | MessageOptions | Point | Position | string | null | undefined} [optionsOrParentOrPlace]\n   *   Configuration (optional).\n   * @param {string | null | undefined} [origin]\n   *   Place in code where the message originates (example:\n   *   `'my-package:my-rule'` or `'my-rule'`).\n   * @returns {never}\n   *   Never.\n   * @throws {VFileMessage}\n   *   Message.\n   */\n  fail(causeOrReason, optionsOrParentOrPlace, origin) {\n    // @ts-expect-error: the overloads are fine.\n    const message = this.message(causeOrReason, optionsOrParentOrPlace, origin)\n\n    message.fatal = true\n\n    throw message\n  }\n\n  /**\n   * Create an info message for `reason` associated with the file.\n   *\n   * The `fatal` field of the message is set to `undefined` (info; change\n   * likely not needed) and the `file` field is set to the current file path.\n   * The message is added to the `messages` field on `file`.\n   *\n   * > 🪦 **Note**: also has obsolete signatures.\n   *\n   * @overload\n   * @param {string} reason\n   * @param {MessageOptions | null | undefined} [options]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {string} reason\n   * @param {Node | NodeLike | null | undefined} parent\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {string} reason\n   * @param {Point | Position | null | undefined} place\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {string} reason\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {Node | NodeLike | null | undefined} parent\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {Point | Position | null | undefined} place\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @param {Error | VFileMessage | string} causeOrReason\n   *   Reason for message, should use markdown.\n   * @param {Node | NodeLike | MessageOptions | Point | Position | string | null | undefined} [optionsOrParentOrPlace]\n   *   Configuration (optional).\n   * @param {string | null | undefined} [origin]\n   *   Place in code where the message originates (example:\n   *   `'my-package:my-rule'` or `'my-rule'`).\n   * @returns {VFileMessage}\n   *   Message.\n   */\n  info(causeOrReason, optionsOrParentOrPlace, origin) {\n    // @ts-expect-error: the overloads are fine.\n    const message = this.message(causeOrReason, optionsOrParentOrPlace, origin)\n\n    message.fatal = undefined\n\n    return message\n  }\n\n  /**\n   * Create a message for `reason` associated with the file.\n   *\n   * The `fatal` field of the message is set to `false` (warning; change may be\n   * needed) and the `file` field is set to the current file path.\n   * The message is added to the `messages` field on `file`.\n   *\n   * > 🪦 **Note**: also has obsolete signatures.\n   *\n   * @overload\n   * @param {string} reason\n   * @param {MessageOptions | null | undefined} [options]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {string} reason\n   * @param {Node | NodeLike | null | undefined} parent\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {string} reason\n   * @param {Point | Position | null | undefined} place\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {string} reason\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {Node | NodeLike | null | undefined} parent\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {Point | Position | null | undefined} place\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @param {Error | VFileMessage | string} causeOrReason\n   *   Reason for message, should use markdown.\n   * @param {Node | NodeLike | MessageOptions | Point | Position | string | null | undefined} [optionsOrParentOrPlace]\n   *   Configuration (optional).\n   * @param {string | null | undefined} [origin]\n   *   Place in code where the message originates (example:\n   *   `'my-package:my-rule'` or `'my-rule'`).\n   * @returns {VFileMessage}\n   *   Message.\n   */\n  message(causeOrReason, optionsOrParentOrPlace, origin) {\n    const message = new VFileMessage(\n      // @ts-expect-error: the overloads are fine.\n      causeOrReason,\n      optionsOrParentOrPlace,\n      origin\n    )\n\n    if (this.path) {\n      message.name = this.path + ':' + message.name\n      message.file = this.path\n    }\n\n    message.fatal = false\n\n    this.messages.push(message)\n\n    return message\n  }\n\n  /**\n   * Serialize the file.\n   *\n   * > **Note**: which encodings are supported depends on the engine.\n   * > For info on Node.js, see:\n   * > <https://nodejs.org/api/util.html#whatwg-supported-encodings>.\n   *\n   * @param {string | null | undefined} [encoding='utf8']\n   *   Character encoding to understand `value` as when it’s a `Uint8Array`\n   *   (default: `'utf-8'`).\n   * @returns {string}\n   *   Serialized file.\n   */\n  toString(encoding) {\n    if (this.value === undefined) {\n      return ''\n    }\n\n    if (typeof this.value === 'string') {\n      return this.value\n    }\n\n    const decoder = new TextDecoder(encoding || undefined)\n    return decoder.decode(this.value)\n  }\n}\n\n/**\n * Assert that `part` is not a path (as in, does not contain `path.sep`).\n *\n * @param {string | null | undefined} part\n *   File path part.\n * @param {string} name\n *   Part name.\n * @returns {undefined}\n *   Nothing.\n */\nfunction assertPart(part, name) {\n  if (part && part.includes(path.sep)) {\n    throw new Error(\n      '`' + name + '` cannot be a path: did not expect `' + path.sep + '`'\n    )\n  }\n}\n\n/**\n * Assert that `part` is not empty.\n *\n * @param {string | undefined} part\n *   Thing.\n * @param {string} name\n *   Part name.\n * @returns {asserts part is string}\n *   Nothing.\n */\nfunction assertNonEmpty(part, name) {\n  if (!part) {\n    throw new Error('`' + name + '` cannot be empty')\n  }\n}\n\n/**\n * Assert `path` exists.\n *\n * @param {string | undefined} path\n *   Path.\n * @param {string} name\n *   Dependency name.\n * @returns {asserts path is string}\n *   Nothing.\n */\nfunction assertPath(path, name) {\n  if (!path) {\n    throw new Error('Setting `' + name + '` requires `path` to be set too')\n  }\n}\n\n/**\n * Assert `value` is an `Uint8Array`.\n *\n * @param {unknown} value\n *   thing.\n * @returns {value is Uint8Array}\n *   Whether `value` is an `Uint8Array`.\n */\nfunction isUint8Array(value) {\n  return Boolean(\n    value &&\n      typeof value === 'object' &&\n      'byteLength' in value &&\n      'byteOffset' in value\n  )\n}\n","export const CallableInstance =\n  /**\n   * @type {new <Parameters extends Array<unknown>, Result>(property: string | symbol) => (...parameters: Parameters) => Result}\n   */\n  (\n    /** @type {unknown} */\n    (\n      /**\n       * @this {Function}\n       * @param {string | symbol} property\n       * @returns {(...parameters: Array<unknown>) => unknown}\n       */\n      function (property) {\n        const self = this\n        const constr = self.constructor\n        const proto = /** @type {Record<string | symbol, Function>} */ (\n          // Prototypes do exist.\n          // type-coverage:ignore-next-line\n          constr.prototype\n        )\n        const func = proto[property]\n        /** @type {(...parameters: Array<unknown>) => unknown} */\n        const apply = function () {\n          return func.apply(apply, arguments)\n        }\n\n        Object.setPrototypeOf(apply, proto)\n\n        const names = Object.getOwnPropertyNames(func)\n\n        for (const p of names) {\n          const descriptor = Object.getOwnPropertyDescriptor(func, p)\n          if (descriptor) Object.defineProperty(apply, p, descriptor)\n        }\n\n        return apply\n      }\n    )\n  )\n","/**\n * @typedef {import('trough').Pipeline} Pipeline\n *\n * @typedef {import('unist').Node} Node\n *\n * @typedef {import('vfile').Compatible} Compatible\n * @typedef {import('vfile').Value} Value\n *\n * @typedef {import('../index.js').CompileResultMap} CompileResultMap\n * @typedef {import('../index.js').Data} Data\n * @typedef {import('../index.js').Settings} Settings\n */\n\n/**\n * @typedef {CompileResultMap[keyof CompileResultMap]} CompileResults\n *   Acceptable results from compilers.\n *\n *   To register custom results, add them to\n *   {@link CompileResultMap `CompileResultMap`}.\n */\n\n/**\n * @template {Node} [Tree=Node]\n *   The node that the compiler receives (default: `Node`).\n * @template {CompileResults} [Result=CompileResults]\n *   The thing that the compiler yields (default: `CompileResults`).\n * @callback Compiler\n *   A **compiler** handles the compiling of a syntax tree to something else\n *   (in most cases, text) (TypeScript type).\n *\n *   It is used in the stringify phase and called with a {@link Node `Node`}\n *   and {@link VFile `VFile`} representation of the document to compile.\n *   It should return the textual representation of the given tree (typically\n *   `string`).\n *\n *   > 👉 **Note**: unified typically compiles by serializing: most compilers\n *   > return `string` (or `Uint8Array`).\n *   > Some compilers, such as the one configured with\n *   > [`rehype-react`][rehype-react], return other values (in this case, a\n *   > React tree).\n *   > If you’re using a compiler that doesn’t serialize, expect different\n *   > result values.\n *   >\n *   > To register custom results in TypeScript, add them to\n *   > {@link CompileResultMap `CompileResultMap`}.\n *\n *   [rehype-react]: https://github.com/rehypejs/rehype-react\n * @param {Tree} tree\n *   Tree to compile.\n * @param {VFile} file\n *   File associated with `tree`.\n * @returns {Result}\n *   New content: compiled text (`string` or `Uint8Array`, for `file.value`) or\n *   something else (for `file.result`).\n */\n\n/**\n * @template {Node} [Tree=Node]\n *   The node that the parser yields (default: `Node`)\n * @callback Parser\n *   A **parser** handles the parsing of text to a syntax tree.\n *\n *   It is used in the parse phase and is called with a `string` and\n *   {@link VFile `VFile`} of the document to parse.\n *   It must return the syntax tree representation of the given file\n *   ({@link Node `Node`}).\n * @param {string} document\n *   Document to parse.\n * @param {VFile} file\n *   File associated with `document`.\n * @returns {Tree}\n *   Node representing the given file.\n */\n\n/**\n * @typedef {(\n *   Plugin<Array<any>, any, any> |\n *   PluginTuple<Array<any>, any, any> |\n *   Preset\n * )} Pluggable\n *   Union of the different ways to add plugins and settings.\n */\n\n/**\n * @typedef {Array<Pluggable>} PluggableList\n *   List of plugins and presets.\n */\n\n// Note: we can’t use `callback` yet as it messes up `this`:\n//  <https://github.com/microsoft/TypeScript/issues/55197>.\n/**\n * @template {Array<unknown>} [PluginParameters=[]]\n *   Arguments passed to the plugin (default: `[]`, the empty tuple).\n * @template {Node | string | undefined} [Input=Node]\n *   Value that is expected as input (default: `Node`).\n *\n *   *   If the plugin returns a {@link Transformer `Transformer`}, this\n *       should be the node it expects.\n *   *   If the plugin sets a {@link Parser `Parser`}, this should be\n *       `string`.\n *   *   If the plugin sets a {@link Compiler `Compiler`}, this should be the\n *       node it expects.\n * @template [Output=Input]\n *   Value that is yielded as output (default: `Input`).\n *\n *   *   If the plugin returns a {@link Transformer `Transformer`}, this\n *       should be the node that that yields.\n *   *   If the plugin sets a {@link Parser `Parser`}, this should be the\n *       node that it yields.\n *   *   If the plugin sets a {@link Compiler `Compiler`}, this should be\n *       result it yields.\n * @typedef {(\n *   (this: Processor, ...parameters: PluginParameters) =>\n *     Input extends string ? // Parser.\n *        Output extends Node | undefined ? undefined | void : never :\n *     Output extends CompileResults ? // Compiler.\n *        Input extends Node | undefined ? undefined | void : never :\n *     Transformer<\n *       Input extends Node ? Input : Node,\n *       Output extends Node ? Output : Node\n *     > | undefined | void\n * )} Plugin\n *   Single plugin.\n *\n *   Plugins configure the processors they are applied on in the following\n *   ways:\n *\n *   *   they change the processor, such as the parser, the compiler, or by\n *       configuring data\n *   *   they specify how to handle trees and files\n *\n *   In practice, they are functions that can receive options and configure the\n *   processor (`this`).\n *\n *   > 👉 **Note**: plugins are called when the processor is *frozen*, not when\n *   > they are applied.\n */\n\n/**\n * Tuple of a plugin and its configuration.\n *\n * The first item is a plugin, the rest are its parameters.\n *\n * @template {Array<unknown>} [TupleParameters=[]]\n *   Arguments passed to the plugin (default: `[]`, the empty tuple).\n * @template {Node | string | undefined} [Input=undefined]\n *   Value that is expected as input (optional).\n *\n *   *   If the plugin returns a {@link Transformer `Transformer`}, this\n *       should be the node it expects.\n *   *   If the plugin sets a {@link Parser `Parser`}, this should be\n *       `string`.\n *   *   If the plugin sets a {@link Compiler `Compiler`}, this should be the\n *       node it expects.\n * @template [Output=undefined] (optional).\n *   Value that is yielded as output.\n *\n *   *   If the plugin returns a {@link Transformer `Transformer`}, this\n *       should be the node that that yields.\n *   *   If the plugin sets a {@link Parser `Parser`}, this should be the\n *       node that it yields.\n *   *   If the plugin sets a {@link Compiler `Compiler`}, this should be\n *       result it yields.\n * @typedef {(\n *   [\n *     plugin: Plugin<TupleParameters, Input, Output>,\n *     ...parameters: TupleParameters\n *   ]\n * )} PluginTuple\n */\n\n/**\n * @typedef Preset\n *   Sharable configuration.\n *\n *   They can contain plugins and settings.\n * @property {PluggableList | undefined} [plugins]\n *   List of plugins and presets (optional).\n * @property {Settings | undefined} [settings]\n *   Shared settings for parsers and compilers (optional).\n */\n\n/**\n * @template {VFile} [File=VFile]\n *   The file that the callback receives (default: `VFile`).\n * @callback ProcessCallback\n *   Callback called when the process is done.\n *\n *   Called with either an error or a result.\n * @param {Error | undefined} [error]\n *   Fatal error (optional).\n * @param {File | undefined} [file]\n *   Processed file (optional).\n * @returns {undefined}\n *   Nothing.\n */\n\n/**\n * @template {Node} [Tree=Node]\n *   The tree that the callback receives (default: `Node`).\n * @callback RunCallback\n *   Callback called when transformers are done.\n *\n *   Called with either an error or results.\n * @param {Error | undefined} [error]\n *   Fatal error (optional).\n * @param {Tree | undefined} [tree]\n *   Transformed tree (optional).\n * @param {VFile | undefined} [file]\n *   File (optional).\n * @returns {undefined}\n *   Nothing.\n */\n\n/**\n * @template {Node} [Output=Node]\n *   Node type that the transformer yields (default: `Node`).\n * @callback TransformCallback\n *   Callback passed to transforms.\n *\n *   If the signature of a `transformer` accepts a third argument, the\n *   transformer may perform asynchronous operations, and must call it.\n * @param {Error | undefined} [error]\n *   Fatal error to stop the process (optional).\n * @param {Output | undefined} [tree]\n *   New, changed, tree (optional).\n * @param {VFile | undefined} [file]\n *   New, changed, file (optional).\n * @returns {undefined}\n *   Nothing.\n */\n\n/**\n * @template {Node} [Input=Node]\n *   Node type that the transformer expects (default: `Node`).\n * @template {Node} [Output=Input]\n *   Node type that the transformer yields (default: `Input`).\n * @callback Transformer\n *   Transformers handle syntax trees and files.\n *\n *   They are functions that are called each time a syntax tree and file are\n *   passed through the run phase.\n *   When an error occurs in them (either because it’s thrown, returned,\n *   rejected, or passed to `next`), the process stops.\n *\n *   The run phase is handled by [`trough`][trough], see its documentation for\n *   the exact semantics of these functions.\n *\n *   > 👉 **Note**: you should likely ignore `next`: don’t accept it.\n *   > it supports callback-style async work.\n *   > But promises are likely easier to reason about.\n *\n *   [trough]: https://github.com/wooorm/trough#function-fninput-next\n * @param {Input} tree\n *   Tree to handle.\n * @param {VFile} file\n *   File to handle.\n * @param {TransformCallback<Output>} next\n *   Callback.\n * @returns {(\n *   Promise<Output | undefined | void> |\n *   Promise<never> | // For some reason this is needed separately.\n *   Output |\n *   Error |\n *   undefined |\n *   void\n * )}\n *   If you accept `next`, nothing.\n *   Otherwise:\n *\n *   *   `Error` — fatal error to stop the process\n *   *   `Promise<undefined>` or `undefined` — the next transformer keeps using\n *       same tree\n *   *   `Promise<Node>` or `Node` — new, changed, tree\n */\n\n/**\n * @template {Node | undefined} ParseTree\n *   Output of `parse`.\n * @template {Node | undefined} HeadTree\n *   Input for `run`.\n * @template {Node | undefined} TailTree\n *   Output for `run`.\n * @template {Node | undefined} CompileTree\n *   Input of `stringify`.\n * @template {CompileResults | undefined} CompileResult\n *   Output of `stringify`.\n * @template {Node | string | undefined} Input\n *   Input of plugin.\n * @template Output\n *   Output of plugin (optional).\n * @typedef {(\n *   Input extends string\n *     ? Output extends Node | undefined\n *       ? // Parser.\n *         Processor<\n *           Output extends undefined ? ParseTree : Output,\n *           HeadTree,\n *           TailTree,\n *           CompileTree,\n *           CompileResult\n *         >\n *       : // Unknown.\n *         Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>\n *     : Output extends CompileResults\n *     ? Input extends Node | undefined\n *       ? // Compiler.\n *         Processor<\n *           ParseTree,\n *           HeadTree,\n *           TailTree,\n *           Input extends undefined ? CompileTree : Input,\n *           Output extends undefined ? CompileResult : Output\n *         >\n *       : // Unknown.\n *         Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>\n *     : Input extends Node | undefined\n *     ? Output extends Node | undefined\n *       ? // Transform.\n *         Processor<\n *           ParseTree,\n *           HeadTree extends undefined ? Input : HeadTree,\n *           Output extends undefined ? TailTree : Output,\n *           CompileTree,\n *           CompileResult\n *         >\n *       : // Unknown.\n *         Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>\n *     : // Unknown.\n *       Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>\n * )} UsePlugin\n *   Create a processor based on the input/output of a {@link Plugin plugin}.\n */\n\n/**\n * @template {CompileResults | undefined} Result\n *   Node type that the transformer yields.\n * @typedef {(\n *   Result extends Value | undefined ?\n *     VFile :\n *     VFile & {result: Result}\n *   )} VFileWithOutput\n *   Type to generate a {@link VFile `VFile`} corresponding to a compiler result.\n *\n *   If a result that is not acceptable on a `VFile` is used, that will\n *   be stored on the `result` field of {@link VFile `VFile`}.\n */\n\nimport {bail} from 'bail'\nimport extend from 'extend'\nimport {ok as assert} from 'devlop'\nimport isPlainObj from 'is-plain-obj'\nimport {trough} from 'trough'\nimport {VFile} from 'vfile'\nimport {CallableInstance} from './callable-instance.js'\n\n// To do: next major: drop `Compiler`, `Parser`: prefer lowercase.\n\n// To do: we could start yielding `never` in TS when a parser is missing and\n// `parse` is called.\n// Currently, we allow directly setting `processor.parser`, which is untyped.\n\nconst own = {}.hasOwnProperty\n\n/**\n * @template {Node | undefined} [ParseTree=undefined]\n *   Output of `parse` (optional).\n * @template {Node | undefined} [HeadTree=undefined]\n *   Input for `run` (optional).\n * @template {Node | undefined} [TailTree=undefined]\n *   Output for `run` (optional).\n * @template {Node | undefined} [CompileTree=undefined]\n *   Input of `stringify` (optional).\n * @template {CompileResults | undefined} [CompileResult=undefined]\n *   Output of `stringify` (optional).\n * @extends {CallableInstance<[], Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>>}\n */\nexport class Processor extends CallableInstance {\n  /**\n   * Create a processor.\n   */\n  constructor() {\n    // If `Processor()` is called (w/o new), `copy` is called instead.\n    super('copy')\n\n    /**\n     * Compiler to use (deprecated).\n     *\n     * @deprecated\n     *   Use `compiler` instead.\n     * @type {(\n     *   Compiler<\n     *     CompileTree extends undefined ? Node : CompileTree,\n     *     CompileResult extends undefined ? CompileResults : CompileResult\n     *   > |\n     *   undefined\n     * )}\n     */\n    this.Compiler = undefined\n\n    /**\n     * Parser to use (deprecated).\n     *\n     * @deprecated\n     *   Use `parser` instead.\n     * @type {(\n     *   Parser<ParseTree extends undefined ? Node : ParseTree> |\n     *   undefined\n     * )}\n     */\n    this.Parser = undefined\n\n    // Note: the following fields are considered private.\n    // However, they are needed for tests, and TSC generates an untyped\n    // `private freezeIndex` field for, which trips `type-coverage` up.\n    // Instead, we use `@deprecated` to visualize that they shouldn’t be used.\n    /**\n     * Internal list of configured plugins.\n     *\n     * @deprecated\n     *   This is a private internal property and should not be used.\n     * @type {Array<PluginTuple<Array<unknown>>>}\n     */\n    this.attachers = []\n\n    /**\n     * Compiler to use.\n     *\n     * @type {(\n     *   Compiler<\n     *     CompileTree extends undefined ? Node : CompileTree,\n     *     CompileResult extends undefined ? CompileResults : CompileResult\n     *   > |\n     *   undefined\n     * )}\n     */\n    this.compiler = undefined\n\n    /**\n     * Internal state to track where we are while freezing.\n     *\n     * @deprecated\n     *   This is a private internal property and should not be used.\n     * @type {number}\n     */\n    this.freezeIndex = -1\n\n    /**\n     * Internal state to track whether we’re frozen.\n     *\n     * @deprecated\n     *   This is a private internal property and should not be used.\n     * @type {boolean | undefined}\n     */\n    this.frozen = undefined\n\n    /**\n     * Internal state.\n     *\n     * @deprecated\n     *   This is a private internal property and should not be used.\n     * @type {Data}\n     */\n    this.namespace = {}\n\n    /**\n     * Parser to use.\n     *\n     * @type {(\n     *   Parser<ParseTree extends undefined ? Node : ParseTree> |\n     *   undefined\n     * )}\n     */\n    this.parser = undefined\n\n    /**\n     * Internal list of configured transformers.\n     *\n     * @deprecated\n     *   This is a private internal property and should not be used.\n     * @type {Pipeline}\n     */\n    this.transformers = trough()\n  }\n\n  /**\n   * Copy a processor.\n   *\n   * @deprecated\n   *   This is a private internal method and should not be used.\n   * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}\n   *   New *unfrozen* processor ({@link Processor `Processor`}) that is\n   *   configured to work the same as its ancestor.\n   *   When the descendant processor is configured in the future it does not\n   *   affect the ancestral processor.\n   */\n  copy() {\n    // Cast as the type parameters will be the same after attaching.\n    const destination =\n      /** @type {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>} */ (\n        new Processor()\n      )\n    let index = -1\n\n    while (++index < this.attachers.length) {\n      const attacher = this.attachers[index]\n      destination.use(...attacher)\n    }\n\n    destination.data(extend(true, {}, this.namespace))\n\n    return destination\n  }\n\n  /**\n   * Configure the processor with info available to all plugins.\n   * Information is stored in an object.\n   *\n   * Typically, options can be given to a specific plugin, but sometimes it\n   * makes sense to have information shared with several plugins.\n   * For example, a list of HTML elements that are self-closing, which is\n   * needed during all phases.\n   *\n   * > 👉 **Note**: setting information cannot occur on *frozen* processors.\n   * > Call the processor first to create a new unfrozen processor.\n   *\n   * > 👉 **Note**: to register custom data in TypeScript, augment the\n   * > {@link Data `Data`} interface.\n   *\n   * @example\n   *   This example show how to get and set info:\n   *\n   *   ```js\n   *   import {unified} from 'unified'\n   *\n   *   const processor = unified().data('alpha', 'bravo')\n   *\n   *   processor.data('alpha') // => 'bravo'\n   *\n   *   processor.data() // => {alpha: 'bravo'}\n   *\n   *   processor.data({charlie: 'delta'})\n   *\n   *   processor.data() // => {charlie: 'delta'}\n   *   ```\n   *\n   * @template {keyof Data} Key\n   *\n   * @overload\n   * @returns {Data}\n   *\n   * @overload\n   * @param {Data} dataset\n   * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}\n   *\n   * @overload\n   * @param {Key} key\n   * @returns {Data[Key]}\n   *\n   * @overload\n   * @param {Key} key\n   * @param {Data[Key]} value\n   * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}\n   *\n   * @param {Data | Key} [key]\n   *   Key to get or set, or entire dataset to set, or nothing to get the\n   *   entire dataset (optional).\n   * @param {Data[Key]} [value]\n   *   Value to set (optional).\n   * @returns {unknown}\n   *   The current processor when setting, the value at `key` when getting, or\n   *   the entire dataset when getting without key.\n   */\n  data(key, value) {\n    if (typeof key === 'string') {\n      // Set `key`.\n      if (arguments.length === 2) {\n        assertUnfrozen('data', this.frozen)\n        this.namespace[key] = value\n        return this\n      }\n\n      // Get `key`.\n      return (own.call(this.namespace, key) && this.namespace[key]) || undefined\n    }\n\n    // Set space.\n    if (key) {\n      assertUnfrozen('data', this.frozen)\n      this.namespace = key\n      return this\n    }\n\n    // Get space.\n    return this.namespace\n  }\n\n  /**\n   * Freeze a processor.\n   *\n   * Frozen processors are meant to be extended and not to be configured\n   * directly.\n   *\n   * When a processor is frozen it cannot be unfrozen.\n   * New processors working the same way can be created by calling the\n   * processor.\n   *\n   * It’s possible to freeze processors explicitly by calling `.freeze()`.\n   * Processors freeze automatically when `.parse()`, `.run()`, `.runSync()`,\n   * `.stringify()`, `.process()`, or `.processSync()` are called.\n   *\n   * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}\n   *   The current processor.\n   */\n  freeze() {\n    if (this.frozen) {\n      return this\n    }\n\n    // Cast so that we can type plugins easier.\n    // Plugins are supposed to be usable on different processors, not just on\n    // this exact processor.\n    const self = /** @type {Processor} */ (/** @type {unknown} */ (this))\n\n    while (++this.freezeIndex < this.attachers.length) {\n      const [attacher, ...options] = this.attachers[this.freezeIndex]\n\n      if (options[0] === false) {\n        continue\n      }\n\n      if (options[0] === true) {\n        options[0] = undefined\n      }\n\n      const transformer = attacher.call(self, ...options)\n\n      if (typeof transformer === 'function') {\n        this.transformers.use(transformer)\n      }\n    }\n\n    this.frozen = true\n    this.freezeIndex = Number.POSITIVE_INFINITY\n\n    return this\n  }\n\n  /**\n   * Parse text to a syntax tree.\n   *\n   * > 👉 **Note**: `parse` freezes the processor if not already *frozen*.\n   *\n   * > 👉 **Note**: `parse` performs the parse phase, not the run phase or other\n   * > phases.\n   *\n   * @param {Compatible | undefined} [file]\n   *   file to parse (optional); typically `string` or `VFile`; any value\n   *   accepted as `x` in `new VFile(x)`.\n   * @returns {ParseTree extends undefined ? Node : ParseTree}\n   *   Syntax tree representing `file`.\n   */\n  parse(file) {\n    this.freeze()\n    const realFile = vfile(file)\n    const parser = this.parser || this.Parser\n    assertParser('parse', parser)\n    return parser(String(realFile), realFile)\n  }\n\n  /**\n   * Process the given file as configured on the processor.\n   *\n   * > 👉 **Note**: `process` freezes the processor if not already *frozen*.\n   *\n   * > 👉 **Note**: `process` performs the parse, run, and stringify phases.\n   *\n   * @overload\n   * @param {Compatible | undefined} file\n   * @param {ProcessCallback<VFileWithOutput<CompileResult>>} done\n   * @returns {undefined}\n   *\n   * @overload\n   * @param {Compatible | undefined} [file]\n   * @returns {Promise<VFileWithOutput<CompileResult>>}\n   *\n   * @param {Compatible | undefined} [file]\n   *   File (optional); typically `string` or `VFile`]; any value accepted as\n   *   `x` in `new VFile(x)`.\n   * @param {ProcessCallback<VFileWithOutput<CompileResult>> | undefined} [done]\n   *   Callback (optional).\n   * @returns {Promise<VFile> | undefined}\n   *   Nothing if `done` is given.\n   *   Otherwise a promise, rejected with a fatal error or resolved with the\n   *   processed file.\n   *\n   *   The parsed, transformed, and compiled value is available at\n   *   `file.value` (see note).\n   *\n   *   > 👉 **Note**: unified typically compiles by serializing: most\n   *   > compilers return `string` (or `Uint8Array`).\n   *   > Some compilers, such as the one configured with\n   *   > [`rehype-react`][rehype-react], return other values (in this case, a\n   *   > React tree).\n   *   > If you’re using a compiler that doesn’t serialize, expect different\n   *   > result values.\n   *   >\n   *   > To register custom results in TypeScript, add them to\n   *   > {@link CompileResultMap `CompileResultMap`}.\n   *\n   *   [rehype-react]: https://github.com/rehypejs/rehype-react\n   */\n  process(file, done) {\n    const self = this\n\n    this.freeze()\n    assertParser('process', this.parser || this.Parser)\n    assertCompiler('process', this.compiler || this.Compiler)\n\n    return done ? executor(undefined, done) : new Promise(executor)\n\n    // Note: `void`s needed for TS.\n    /**\n     * @param {((file: VFileWithOutput<CompileResult>) => undefined | void) | undefined} resolve\n     * @param {(error: Error | undefined) => undefined | void} reject\n     * @returns {undefined}\n     */\n    function executor(resolve, reject) {\n      const realFile = vfile(file)\n      // Assume `ParseTree` (the result of the parser) matches `HeadTree` (the\n      // input of the first transform).\n      const parseTree =\n        /** @type {HeadTree extends undefined ? Node : HeadTree} */ (\n          /** @type {unknown} */ (self.parse(realFile))\n        )\n\n      self.run(parseTree, realFile, function (error, tree, file) {\n        if (error || !tree || !file) {\n          return realDone(error)\n        }\n\n        // Assume `TailTree` (the output of the last transform) matches\n        // `CompileTree` (the input of the compiler).\n        const compileTree =\n          /** @type {CompileTree extends undefined ? Node : CompileTree} */ (\n            /** @type {unknown} */ (tree)\n          )\n\n        const compileResult = self.stringify(compileTree, file)\n\n        if (looksLikeAValue(compileResult)) {\n          file.value = compileResult\n        } else {\n          file.result = compileResult\n        }\n\n        realDone(error, /** @type {VFileWithOutput<CompileResult>} */ (file))\n      })\n\n      /**\n       * @param {Error | undefined} error\n       * @param {VFileWithOutput<CompileResult> | undefined} [file]\n       * @returns {undefined}\n       */\n      function realDone(error, file) {\n        if (error || !file) {\n          reject(error)\n        } else if (resolve) {\n          resolve(file)\n        } else {\n          assert(done, '`done` is defined if `resolve` is not')\n          done(undefined, file)\n        }\n      }\n    }\n  }\n\n  /**\n   * Process the given file as configured on the processor.\n   *\n   * An error is thrown if asynchronous transforms are configured.\n   *\n   * > 👉 **Note**: `processSync` freezes the processor if not already *frozen*.\n   *\n   * > 👉 **Note**: `processSync` performs the parse, run, and stringify phases.\n   *\n   * @param {Compatible | undefined} [file]\n   *   File (optional); typically `string` or `VFile`; any value accepted as\n   *   `x` in `new VFile(x)`.\n   * @returns {VFileWithOutput<CompileResult>}\n   *   The processed file.\n   *\n   *   The parsed, transformed, and compiled value is available at\n   *   `file.value` (see note).\n   *\n   *   > 👉 **Note**: unified typically compiles by serializing: most\n   *   > compilers return `string` (or `Uint8Array`).\n   *   > Some compilers, such as the one configured with\n   *   > [`rehype-react`][rehype-react], return other values (in this case, a\n   *   > React tree).\n   *   > If you’re using a compiler that doesn’t serialize, expect different\n   *   > result values.\n   *   >\n   *   > To register custom results in TypeScript, add them to\n   *   > {@link CompileResultMap `CompileResultMap`}.\n   *\n   *   [rehype-react]: https://github.com/rehypejs/rehype-react\n   */\n  processSync(file) {\n    /** @type {boolean} */\n    let complete = false\n    /** @type {VFileWithOutput<CompileResult> | undefined} */\n    let result\n\n    this.freeze()\n    assertParser('processSync', this.parser || this.Parser)\n    assertCompiler('processSync', this.compiler || this.Compiler)\n\n    this.process(file, realDone)\n    assertDone('processSync', 'process', complete)\n    assert(result, 'we either bailed on an error or have a tree')\n\n    return result\n\n    /**\n     * @type {ProcessCallback<VFileWithOutput<CompileResult>>}\n     */\n    function realDone(error, file) {\n      complete = true\n      bail(error)\n      result = file\n    }\n  }\n\n  /**\n   * Run *transformers* on a syntax tree.\n   *\n   * > 👉 **Note**: `run` freezes the processor if not already *frozen*.\n   *\n   * > 👉 **Note**: `run` performs the run phase, not other phases.\n   *\n   * @overload\n   * @param {HeadTree extends undefined ? Node : HeadTree} tree\n   * @param {RunCallback<TailTree extends undefined ? Node : TailTree>} done\n   * @returns {undefined}\n   *\n   * @overload\n   * @param {HeadTree extends undefined ? Node : HeadTree} tree\n   * @param {Compatible | undefined} file\n   * @param {RunCallback<TailTree extends undefined ? Node : TailTree>} done\n   * @returns {undefined}\n   *\n   * @overload\n   * @param {HeadTree extends undefined ? Node : HeadTree} tree\n   * @param {Compatible | undefined} [file]\n   * @returns {Promise<TailTree extends undefined ? Node : TailTree>}\n   *\n   * @param {HeadTree extends undefined ? Node : HeadTree} tree\n   *   Tree to transform and inspect.\n   * @param {(\n   *   RunCallback<TailTree extends undefined ? Node : TailTree> |\n   *   Compatible\n   * )} [file]\n   *   File associated with `node` (optional); any value accepted as `x` in\n   *   `new VFile(x)`.\n   * @param {RunCallback<TailTree extends undefined ? Node : TailTree>} [done]\n   *   Callback (optional).\n   * @returns {Promise<TailTree extends undefined ? Node : TailTree> | undefined}\n   *   Nothing if `done` is given.\n   *   Otherwise, a promise rejected with a fatal error or resolved with the\n   *   transformed tree.\n   */\n  run(tree, file, done) {\n    assertNode(tree)\n    this.freeze()\n\n    const transformers = this.transformers\n\n    if (!done && typeof file === 'function') {\n      done = file\n      file = undefined\n    }\n\n    return done ? executor(undefined, done) : new Promise(executor)\n\n    // Note: `void`s needed for TS.\n    /**\n     * @param {(\n     *   ((tree: TailTree extends undefined ? Node : TailTree) => undefined | void) |\n     *   undefined\n     * )} resolve\n     * @param {(error: Error) => undefined | void} reject\n     * @returns {undefined}\n     */\n    function executor(resolve, reject) {\n      assert(\n        typeof file !== 'function',\n        '`file` can’t be a `done` anymore, we checked'\n      )\n      const realFile = vfile(file)\n      transformers.run(tree, realFile, realDone)\n\n      /**\n       * @param {Error | undefined} error\n       * @param {Node} outputTree\n       * @param {VFile} file\n       * @returns {undefined}\n       */\n      function realDone(error, outputTree, file) {\n        const resultingTree =\n          /** @type {TailTree extends undefined ? Node : TailTree} */ (\n            outputTree || tree\n          )\n\n        if (error) {\n          reject(error)\n        } else if (resolve) {\n          resolve(resultingTree)\n        } else {\n          assert(done, '`done` is defined if `resolve` is not')\n          done(undefined, resultingTree, file)\n        }\n      }\n    }\n  }\n\n  /**\n   * Run *transformers* on a syntax tree.\n   *\n   * An error is thrown if asynchronous transforms are configured.\n   *\n   * > 👉 **Note**: `runSync` freezes the processor if not already *frozen*.\n   *\n   * > 👉 **Note**: `runSync` performs the run phase, not other phases.\n   *\n   * @param {HeadTree extends undefined ? Node : HeadTree} tree\n   *   Tree to transform and inspect.\n   * @param {Compatible | undefined} [file]\n   *   File associated with `node` (optional); any value accepted as `x` in\n   *   `new VFile(x)`.\n   * @returns {TailTree extends undefined ? Node : TailTree}\n   *   Transformed tree.\n   */\n  runSync(tree, file) {\n    /** @type {boolean} */\n    let complete = false\n    /** @type {(TailTree extends undefined ? Node : TailTree) | undefined} */\n    let result\n\n    this.run(tree, file, realDone)\n\n    assertDone('runSync', 'run', complete)\n    assert(result, 'we either bailed on an error or have a tree')\n    return result\n\n    /**\n     * @type {RunCallback<TailTree extends undefined ? Node : TailTree>}\n     */\n    function realDone(error, tree) {\n      bail(error)\n      result = tree\n      complete = true\n    }\n  }\n\n  /**\n   * Compile a syntax tree.\n   *\n   * > 👉 **Note**: `stringify` freezes the processor if not already *frozen*.\n   *\n   * > 👉 **Note**: `stringify` performs the stringify phase, not the run phase\n   * > or other phases.\n   *\n   * @param {CompileTree extends undefined ? Node : CompileTree} tree\n   *   Tree to compile.\n   * @param {Compatible | undefined} [file]\n   *   File associated with `node` (optional); any value accepted as `x` in\n   *   `new VFile(x)`.\n   * @returns {CompileResult extends undefined ? Value : CompileResult}\n   *   Textual representation of the tree (see note).\n   *\n   *   > 👉 **Note**: unified typically compiles by serializing: most compilers\n   *   > return `string` (or `Uint8Array`).\n   *   > Some compilers, such as the one configured with\n   *   > [`rehype-react`][rehype-react], return other values (in this case, a\n   *   > React tree).\n   *   > If you’re using a compiler that doesn’t serialize, expect different\n   *   > result values.\n   *   >\n   *   > To register custom results in TypeScript, add them to\n   *   > {@link CompileResultMap `CompileResultMap`}.\n   *\n   *   [rehype-react]: https://github.com/rehypejs/rehype-react\n   */\n  stringify(tree, file) {\n    this.freeze()\n    const realFile = vfile(file)\n    const compiler = this.compiler || this.Compiler\n    assertCompiler('stringify', compiler)\n    assertNode(tree)\n\n    return compiler(tree, realFile)\n  }\n\n  /**\n   * Configure the processor to use a plugin, a list of usable values, or a\n   * preset.\n   *\n   * If the processor is already using a plugin, the previous plugin\n   * configuration is changed based on the options that are passed in.\n   * In other words, the plugin is not added a second time.\n   *\n   * > 👉 **Note**: `use` cannot be called on *frozen* processors.\n   * > Call the processor first to create a new unfrozen processor.\n   *\n   * @example\n   *   There are many ways to pass plugins to `.use()`.\n   *   This example gives an overview:\n   *\n   *   ```js\n   *   import {unified} from 'unified'\n   *\n   *   unified()\n   *     // Plugin with options:\n   *     .use(pluginA, {x: true, y: true})\n   *     // Passing the same plugin again merges configuration (to `{x: true, y: false, z: true}`):\n   *     .use(pluginA, {y: false, z: true})\n   *     // Plugins:\n   *     .use([pluginB, pluginC])\n   *     // Two plugins, the second with options:\n   *     .use([pluginD, [pluginE, {}]])\n   *     // Preset with plugins and settings:\n   *     .use({plugins: [pluginF, [pluginG, {}]], settings: {position: false}})\n   *     // Settings only:\n   *     .use({settings: {position: false}})\n   *   ```\n   *\n   * @template {Array<unknown>} [Parameters=[]]\n   * @template {Node | string | undefined} [Input=undefined]\n   * @template [Output=Input]\n   *\n   * @overload\n   * @param {Preset | null | undefined} [preset]\n   * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}\n   *\n   * @overload\n   * @param {PluggableList} list\n   * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}\n   *\n   * @overload\n   * @param {Plugin<Parameters, Input, Output>} plugin\n   * @param {...(Parameters | [boolean])} parameters\n   * @returns {UsePlugin<ParseTree, HeadTree, TailTree, CompileTree, CompileResult, Input, Output>}\n   *\n   * @param {PluggableList | Plugin | Preset | null | undefined} value\n   *   Usable value.\n   * @param {...unknown} parameters\n   *   Parameters, when a plugin is given as a usable value.\n   * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}\n   *   Current processor.\n   */\n  use(value, ...parameters) {\n    const attachers = this.attachers\n    const namespace = this.namespace\n\n    assertUnfrozen('use', this.frozen)\n\n    if (value === null || value === undefined) {\n      // Empty.\n    } else if (typeof value === 'function') {\n      addPlugin(value, parameters)\n    } else if (typeof value === 'object') {\n      if (Array.isArray(value)) {\n        addList(value)\n      } else {\n        addPreset(value)\n      }\n    } else {\n      throw new TypeError('Expected usable value, not `' + value + '`')\n    }\n\n    return this\n\n    /**\n     * @param {Pluggable} value\n     * @returns {undefined}\n     */\n    function add(value) {\n      if (typeof value === 'function') {\n        addPlugin(value, [])\n      } else if (typeof value === 'object') {\n        if (Array.isArray(value)) {\n          const [plugin, ...parameters] =\n            /** @type {PluginTuple<Array<unknown>>} */ (value)\n          addPlugin(plugin, parameters)\n        } else {\n          addPreset(value)\n        }\n      } else {\n        throw new TypeError('Expected usable value, not `' + value + '`')\n      }\n    }\n\n    /**\n     * @param {Preset} result\n     * @returns {undefined}\n     */\n    function addPreset(result) {\n      if (!('plugins' in result) && !('settings' in result)) {\n        throw new Error(\n          'Expected usable value but received an empty preset, which is probably a mistake: presets typically come with `plugins` and sometimes with `settings`, but this has neither'\n        )\n      }\n\n      addList(result.plugins)\n\n      if (result.settings) {\n        namespace.settings = extend(true, namespace.settings, result.settings)\n      }\n    }\n\n    /**\n     * @param {PluggableList | null | undefined} plugins\n     * @returns {undefined}\n     */\n    function addList(plugins) {\n      let index = -1\n\n      if (plugins === null || plugins === undefined) {\n        // Empty.\n      } else if (Array.isArray(plugins)) {\n        while (++index < plugins.length) {\n          const thing = plugins[index]\n          add(thing)\n        }\n      } else {\n        throw new TypeError('Expected a list of plugins, not `' + plugins + '`')\n      }\n    }\n\n    /**\n     * @param {Plugin} plugin\n     * @param {Array<unknown>} parameters\n     * @returns {undefined}\n     */\n    function addPlugin(plugin, parameters) {\n      let index = -1\n      let entryIndex = -1\n\n      while (++index < attachers.length) {\n        if (attachers[index][0] === plugin) {\n          entryIndex = index\n          break\n        }\n      }\n\n      if (entryIndex === -1) {\n        attachers.push([plugin, ...parameters])\n      }\n      // Only set if there was at least a `primary` value, otherwise we’d change\n      // `arguments.length`.\n      else if (parameters.length > 0) {\n        let [primary, ...rest] = parameters\n        const currentPrimary = attachers[entryIndex][1]\n        if (isPlainObj(currentPrimary) && isPlainObj(primary)) {\n          primary = extend(true, currentPrimary, primary)\n        }\n\n        attachers[entryIndex] = [plugin, primary, ...rest]\n      }\n    }\n  }\n}\n\n// Note: this returns a *callable* instance.\n// That’s why it’s documented as a function.\n/**\n * Create a new processor.\n *\n * @example\n *   This example shows how a new processor can be created (from `remark`) and linked\n *   to **stdin**(4) and **stdout**(4).\n *\n *   ```js\n *   import process from 'node:process'\n *   import concatStream from 'concat-stream'\n *   import {remark} from 'remark'\n *\n *   process.stdin.pipe(\n *     concatStream(function (buf) {\n *       process.stdout.write(String(remark().processSync(buf)))\n *     })\n *   )\n *   ```\n *\n * @returns\n *   New *unfrozen* processor (`processor`).\n *\n *   This processor is configured to work the same as its ancestor.\n *   When the descendant processor is configured in the future it does not\n *   affect the ancestral processor.\n */\nexport const unified = new Processor().freeze()\n\n/**\n * Assert a parser is available.\n *\n * @param {string} name\n * @param {unknown} value\n * @returns {asserts value is Parser}\n */\nfunction assertParser(name, value) {\n  if (typeof value !== 'function') {\n    throw new TypeError('Cannot `' + name + '` without `parser`')\n  }\n}\n\n/**\n * Assert a compiler is available.\n *\n * @param {string} name\n * @param {unknown} value\n * @returns {asserts value is Compiler}\n */\nfunction assertCompiler(name, value) {\n  if (typeof value !== 'function') {\n    throw new TypeError('Cannot `' + name + '` without `compiler`')\n  }\n}\n\n/**\n * Assert the processor is not frozen.\n *\n * @param {string} name\n * @param {unknown} frozen\n * @returns {asserts frozen is false}\n */\nfunction assertUnfrozen(name, frozen) {\n  if (frozen) {\n    throw new Error(\n      'Cannot call `' +\n        name +\n        '` on a frozen processor.\\nCreate a new processor first, by calling it: use `processor()` instead of `processor`.'\n    )\n  }\n}\n\n/**\n * Assert `node` is a unist node.\n *\n * @param {unknown} node\n * @returns {asserts node is Node}\n */\nfunction assertNode(node) {\n  // `isPlainObj` unfortunately uses `any` instead of `unknown`.\n  // type-coverage:ignore-next-line\n  if (!isPlainObj(node) || typeof node.type !== 'string') {\n    throw new TypeError('Expected node, got `' + node + '`')\n    // Fine.\n  }\n}\n\n/**\n * Assert that `complete` is `true`.\n *\n * @param {string} name\n * @param {string} asyncName\n * @param {unknown} complete\n * @returns {asserts complete is true}\n */\nfunction assertDone(name, asyncName, complete) {\n  if (!complete) {\n    throw new Error(\n      '`' + name + '` finished async. Use `' + asyncName + '` instead'\n    )\n  }\n}\n\n/**\n * @param {Compatible | undefined} [value]\n * @returns {VFile}\n */\nfunction vfile(value) {\n  return looksLikeAVFile(value) ? value : new VFile(value)\n}\n\n/**\n * @param {Compatible | undefined} [value]\n * @returns {value is VFile}\n */\nfunction looksLikeAVFile(value) {\n  return Boolean(\n    value &&\n      typeof value === 'object' &&\n      'message' in value &&\n      'messages' in value\n  )\n}\n\n/**\n * @param {unknown} [value]\n * @returns {value is Value}\n */\nfunction looksLikeAValue(value) {\n  return typeof value === 'string' || isUint8Array(value)\n}\n\n/**\n * Assert `value` is an `Uint8Array`.\n *\n * @param {unknown} value\n *   thing.\n * @returns {value is Uint8Array}\n *   Whether `value` is an `Uint8Array`.\n */\nfunction isUint8Array(value) {\n  return Boolean(\n    value &&\n      typeof value === 'object' &&\n      'byteLength' in value &&\n      'byteOffset' in value\n  )\n}\n","// Register `Raw` in tree:\n/// <reference types=\"mdast-util-to-hast\" />\n\n/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').ElementContent} ElementContent\n * @typedef {import('hast').Nodes} Nodes\n * @typedef {import('hast').Parents} Parents\n * @typedef {import('hast').Root} Root\n * @typedef {import('hast-util-to-jsx-runtime').Components} JsxRuntimeComponents\n * @typedef {import('remark-rehype').Options} RemarkRehypeOptions\n * @typedef {import('unist-util-visit').BuildVisitor<Root>} Visitor\n * @typedef {import('unified').PluggableList} PluggableList\n */\n\n/**\n * @callback AllowElement\n *   Filter elements.\n * @param {Readonly<Element>} element\n *   Element to check.\n * @param {number} index\n *   Index of `element` in `parent`.\n * @param {Readonly<Parents> | undefined} parent\n *   Parent of `element`.\n * @returns {boolean | null | undefined}\n *   Whether to allow `element` (default: `false`).\n *\n * @typedef {Partial<JsxRuntimeComponents>} Components\n *   Map tag names to components.\n *\n * @typedef Deprecation\n *   Deprecation.\n * @property {string} from\n *   Old field.\n * @property {string} id\n *   ID in readme.\n * @property {keyof Options} [to]\n *   New field.\n *\n * @typedef Options\n *   Configuration.\n * @property {AllowElement | null | undefined} [allowElement]\n *   Filter elements (optional);\n *   `allowedElements` / `disallowedElements` is used first.\n * @property {ReadonlyArray<string> | null | undefined} [allowedElements]\n *   Tag names to allow (default: all tag names);\n *   cannot combine w/ `disallowedElements`.\n * @property {string | null | undefined} [children]\n *   Markdown.\n * @property {string | null | undefined} [className]\n *   Wrap in a `div` with this class name.\n * @property {Components | null | undefined} [components]\n *   Map tag names to components.\n * @property {ReadonlyArray<string> | null | undefined} [disallowedElements]\n *   Tag names to disallow (default: `[]`);\n *   cannot combine w/ `allowedElements`.\n * @property {PluggableList | null | undefined} [rehypePlugins]\n *   List of rehype plugins to use.\n * @property {PluggableList | null | undefined} [remarkPlugins]\n *   List of remark plugins to use.\n * @property {Readonly<RemarkRehypeOptions> | null | undefined} [remarkRehypeOptions]\n *   Options to pass through to `remark-rehype`.\n * @property {boolean | null | undefined} [skipHtml=false]\n *   Ignore HTML in markdown completely (default: `false`).\n * @property {boolean | null | undefined} [unwrapDisallowed=false]\n *   Extract (unwrap) what’s in disallowed elements (default: `false`);\n *   normally when say `strong` is not allowed, it and it’s children are dropped,\n *   with `unwrapDisallowed` the element itself is replaced by its children.\n * @property {UrlTransform | null | undefined} [urlTransform]\n *   Change URLs (default: `defaultUrlTransform`)\n *\n * @callback UrlTransform\n *   Transform all URLs.\n * @param {string} url\n *   URL.\n * @param {string} key\n *   Property name (example: `'href'`).\n * @param {Readonly<Element>} node\n *   Node.\n * @returns {string | null | undefined}\n *   Transformed URL (optional).\n */\n\nimport {unreachable} from 'devlop'\nimport {toJsxRuntime} from 'hast-util-to-jsx-runtime'\nimport {urlAttributes} from 'html-url-attributes'\n// @ts-expect-error: untyped.\nimport {Fragment, jsx, jsxs} from 'react/jsx-runtime'\nimport remarkParse from 'remark-parse'\nimport remarkRehype from 'remark-rehype'\nimport {unified} from 'unified'\nimport {visit} from 'unist-util-visit'\nimport {VFile} from 'vfile'\n\nconst changelog =\n  'https://github.com/remarkjs/react-markdown/blob/main/changelog.md'\n\n/** @type {PluggableList} */\nconst emptyPlugins = []\n/** @type {Readonly<RemarkRehypeOptions>} */\nconst emptyRemarkRehypeOptions = {allowDangerousHtml: true}\nconst safeProtocol = /^(https?|ircs?|mailto|xmpp)$/i\n\n// Mutable because we `delete` any time it’s used and a message is sent.\n/** @type {ReadonlyArray<Readonly<Deprecation>>} */\nconst deprecations = [\n  {from: 'astPlugins', id: 'remove-buggy-html-in-markdown-parser'},\n  {from: 'allowDangerousHtml', id: 'remove-buggy-html-in-markdown-parser'},\n  {\n    from: 'allowNode',\n    id: 'replace-allownode-allowedtypes-and-disallowedtypes',\n    to: 'allowElement'\n  },\n  {\n    from: 'allowedTypes',\n    id: 'replace-allownode-allowedtypes-and-disallowedtypes',\n    to: 'allowedElements'\n  },\n  {\n    from: 'disallowedTypes',\n    id: 'replace-allownode-allowedtypes-and-disallowedtypes',\n    to: 'disallowedElements'\n  },\n  {from: 'escapeHtml', id: 'remove-buggy-html-in-markdown-parser'},\n  {from: 'includeElementIndex', id: '#remove-includeelementindex'},\n  {\n    from: 'includeNodeIndex',\n    id: 'change-includenodeindex-to-includeelementindex'\n  },\n  {from: 'linkTarget', id: 'remove-linktarget'},\n  {from: 'plugins', id: 'change-plugins-to-remarkplugins', to: 'remarkPlugins'},\n  {from: 'rawSourcePos', id: '#remove-rawsourcepos'},\n  {from: 'renderers', id: 'change-renderers-to-components', to: 'components'},\n  {from: 'source', id: 'change-source-to-children', to: 'children'},\n  {from: 'sourcePos', id: '#remove-sourcepos'},\n  {from: 'transformImageUri', id: '#add-urltransform', to: 'urlTransform'},\n  {from: 'transformLinkUri', id: '#add-urltransform', to: 'urlTransform'}\n]\n\n/**\n * Component to render markdown.\n *\n * @param {Readonly<Options>} options\n *   Props.\n * @returns {JSX.Element}\n *   React element.\n */\nexport function Markdown(options) {\n  const allowedElements = options.allowedElements\n  const allowElement = options.allowElement\n  const children = options.children || ''\n  const className = options.className\n  const components = options.components\n  const disallowedElements = options.disallowedElements\n  const rehypePlugins = options.rehypePlugins || emptyPlugins\n  const remarkPlugins = options.remarkPlugins || emptyPlugins\n  const remarkRehypeOptions = options.remarkRehypeOptions\n    ? {...options.remarkRehypeOptions, ...emptyRemarkRehypeOptions}\n    : emptyRemarkRehypeOptions\n  const skipHtml = options.skipHtml\n  const unwrapDisallowed = options.unwrapDisallowed\n  const urlTransform = options.urlTransform || defaultUrlTransform\n\n  const processor = unified()\n    .use(remarkParse)\n    .use(remarkPlugins)\n    .use(remarkRehype, remarkRehypeOptions)\n    .use(rehypePlugins)\n\n  const file = new VFile()\n\n  if (typeof children === 'string') {\n    file.value = children\n  } else {\n    unreachable(\n      'Unexpected value `' +\n        children +\n        '` for `children` prop, expected `string`'\n    )\n  }\n\n  if (allowedElements && disallowedElements) {\n    unreachable(\n      'Unexpected combined `allowedElements` and `disallowedElements`, expected one or the other'\n    )\n  }\n\n  for (const deprecation of deprecations) {\n    if (Object.hasOwn(options, deprecation.from)) {\n      unreachable(\n        'Unexpected `' +\n          deprecation.from +\n          '` prop, ' +\n          (deprecation.to\n            ? 'use `' + deprecation.to + '` instead'\n            : 'remove it') +\n          ' (see <' +\n          changelog +\n          '#' +\n          deprecation.id +\n          '> for more info)'\n      )\n    }\n  }\n\n  const mdastTree = processor.parse(file)\n  /** @type {Nodes} */\n  let hastTree = processor.runSync(mdastTree, file)\n\n  // Wrap in `div` if there’s a class name.\n  if (className) {\n    hastTree = {\n      type: 'element',\n      tagName: 'div',\n      properties: {className},\n      // Assume no doctypes.\n      children: /** @type {Array<ElementContent>} */ (\n        hastTree.type === 'root' ? hastTree.children : [hastTree]\n      )\n    }\n  }\n\n  visit(hastTree, transform)\n\n  return toJsxRuntime(hastTree, {\n    Fragment,\n    components,\n    ignoreInvalidStyle: true,\n    jsx,\n    jsxs,\n    passKeys: true,\n    passNode: true\n  })\n\n  /** @type {Visitor} */\n  function transform(node, index, parent) {\n    if (node.type === 'raw' && parent && typeof index === 'number') {\n      if (skipHtml) {\n        parent.children.splice(index, 1)\n      } else {\n        parent.children[index] = {type: 'text', value: node.value}\n      }\n\n      return index\n    }\n\n    if (node.type === 'element') {\n      /** @type {string} */\n      let key\n\n      for (key in urlAttributes) {\n        if (\n          Object.hasOwn(urlAttributes, key) &&\n          Object.hasOwn(node.properties, key)\n        ) {\n          const value = node.properties[key]\n          const test = urlAttributes[key]\n          if (test === null || test.includes(node.tagName)) {\n            node.properties[key] = urlTransform(String(value || ''), key, node)\n          }\n        }\n      }\n    }\n\n    if (node.type === 'element') {\n      let remove = allowedElements\n        ? !allowedElements.includes(node.tagName)\n        : disallowedElements\n        ? disallowedElements.includes(node.tagName)\n        : false\n\n      if (!remove && allowElement && typeof index === 'number') {\n        remove = !allowElement(node, index, parent)\n      }\n\n      if (remove && parent && typeof index === 'number') {\n        if (unwrapDisallowed && node.children) {\n          parent.children.splice(index, 1, ...node.children)\n        } else {\n          parent.children.splice(index, 1)\n        }\n\n        return index\n      }\n    }\n  }\n}\n\n/**\n * Make a URL safe.\n *\n * @satisfies {UrlTransform}\n * @param {string} value\n *   URL.\n * @returns {string}\n *   Safe URL.\n */\nexport function defaultUrlTransform(value) {\n  // Same as:\n  // <https://github.com/micromark/micromark/blob/929275e/packages/micromark-util-sanitize-uri/dev/index.js#L34>\n  // But without the `encode` part.\n  const colon = value.indexOf(':')\n  const questionMark = value.indexOf('?')\n  const numberSign = value.indexOf('#')\n  const slash = value.indexOf('/')\n\n  if (\n    // If there is no protocol, it’s relative.\n    colon < 0 ||\n    // If the first colon is after a `?`, `#`, or `/`, it’s not a protocol.\n    (slash > -1 && colon > slash) ||\n    (questionMark > -1 && colon > questionMark) ||\n    (numberSign > -1 && colon > numberSign) ||\n    // It is a protocol, it should be allowed.\n    safeProtocol.test(value.slice(0, colon))\n  ) {\n    return value\n  }\n\n  return ''\n}\n"],"names":["hasOwn","Object","prototype","hasOwnProperty","toStr","toString","defineProperty","gOPD","getOwnPropertyDescriptor","isArray","arr","Array","call","isPlainObject","obj","key","hasOwnConstructor","hasIsPrototypeOf","constructor","setProperty","target","options","name","enumerable","configurable","value","newValue","writable","getProperty","module","exports","extend","src","copy","copyIsArray","clone","arguments","i","length","deep","COMMENT_REGEX","NEWLINE_REGEX","WHITESPACE_REGEX","PROPERTY_REGEX","COLON_REGEX","VALUE_REGEX","SEMICOLON_REGEX","TRIM_REGEX","EMPTY_STRING","trim","str","replace","style","TypeError","lineno","column","updatePosition","lines","match","lastIndexOf","position","start","line","node","Position","whitespace","this","end","source","content","errorsList","error","msg","err","Error","reason","filename","silent","push","re","m","exec","slice","comments","rules","c","comment","pos","charAt","type","declaration","prop","val","ret","property","decl","decls","declarations","inline_style_parser_1","__importDefault","require","iterator","styleObject","default","hasIterator","forEach","nameRe","nameReJsx","emptyOptions","jsx","test","empty","Schema","normal","space","merge","definitions","index","assign","normalize","toLowerCase","Info","attribute","boolean","booleanish","overloadedBoolean","number","commaSeparated","spaceSeparated","commaOrSpaceSeparated","mustUseProperty","defined","powers","increment","checks","keys","types","DefinedInfo","mask","super","mark","check","values","own","create","definition","properties","info","transform","attributes","includes","xlink","_","xLinkActuate","xLinkArcRole","xLinkHref","xLinkRole","xLinkShow","xLinkTitle","xLinkType","xml","xmlLang","xmlBase","xmlSpace","caseSensitiveTransform","caseInsensitiveTransform","xmlns","xmlnsxlink","xmlnsXLink","aria","ariaActiveDescendant","ariaAtomic","ariaAutoComplete","ariaBusy","ariaChecked","ariaColCount","ariaColIndex","ariaColSpan","ariaControls","ariaCurrent","ariaDescribedBy","ariaDetails","ariaDisabled","ariaDropEffect","ariaErrorMessage","ariaExpanded","ariaFlowTo","ariaGrabbed","ariaHasPopup","ariaHidden","ariaInvalid","ariaKeyShortcuts","ariaLabel","ariaLabelledBy","ariaLevel","ariaLive","ariaModal","ariaMultiLine","ariaMultiSelectable","ariaOrientation","ariaOwns","ariaPlaceholder","ariaPosInSet","ariaPressed","ariaReadOnly","ariaRelevant","ariaRequired","ariaRoleDescription","ariaRowCount","ariaRowIndex","ariaRowSpan","ariaSelected","ariaSetSize","ariaSort","ariaValueMax","ariaValueMin","ariaValueNow","ariaValueText","role","html","acceptcharset","classname","htmlfor","httpequiv","abbr","accept","acceptCharset","accessKey","action","allow","allowFullScreen","allowPaymentRequest","allowUserMedia","alt","as","async","autoCapitalize","autoComplete","autoFocus","autoPlay","blocking","capture","charSet","checked","cite","className","cols","colSpan","contentEditable","controls","controlsList","coords","crossOrigin","data","dateTime","decoding","defer","dir","dirName","disabled","download","draggable","encType","enterKeyHint","fetchPriority","form","formAction","formEncType","formMethod","formNoValidate","formTarget","headers","height","hidden","high","href","hrefLang","htmlFor","httpEquiv","id","imageSizes","imageSrcSet","inert","inputMode","integrity","is","isMap","itemId","itemProp","itemRef","itemScope","itemType","kind","label","lang","language","list","loading","loop","low","manifest","max","maxLength","media","method","min","minLength","multiple","muted","nonce","noModule","noValidate","onAbort","onAfterPrint","onAuxClick","onBeforeMatch","onBeforePrint","onBeforeToggle","onBeforeUnload","onBlur","onCancel","onCanPlay","onCanPlayThrough","onChange","onClick","onClose","onContextLost","onContextMenu","onContextRestored","onCopy","onCueChange","onCut","onDblClick","onDrag","onDragEnd","onDragEnter","onDragExit","onDragLeave","onDragOver","onDragStart","onDrop","onDurationChange","onEmptied","onEnded","onError","onFocus","onFormData","onHashChange","onInput","onInvalid","onKeyDown","onKeyPress","onKeyUp","onLanguageChange","onLoad","onLoadedData","onLoadedMetadata","onLoadEnd","onLoadStart","onMessage","onMessageError","onMouseDown","onMouseEnter","onMouseLeave","onMouseMove","onMouseOut","onMouseOver","onMouseUp","onOffline","onOnline","onPageHide","onPageShow","onPaste","onPause","onPlay","onPlaying","onPopState","onProgress","onRateChange","onRejectionHandled","onReset","onResize","onScroll","onScrollEnd","onSecurityPolicyViolation","onSeeked","onSeeking","onSelect","onSlotChange","onStalled","onStorage","onSubmit","onSuspend","onTimeUpdate","onToggle","onUnhandledRejection","onUnload","onVolumeChange","onWaiting","onWheel","open","optimum","pattern","ping","placeholder","playsInline","popover","popoverTarget","popoverTargetAction","poster","preload","readOnly","referrerPolicy","rel","required","reversed","rows","rowSpan","sandbox","scope","scoped","seamless","selected","shadowRootClonable","shadowRootDelegatesFocus","shadowRootMode","shape","size","sizes","slot","span","spellCheck","srcDoc","srcLang","srcSet","step","tabIndex","title","translate","typeMustMatch","useMap","width","wrap","writingSuggestions","align","aLink","archive","axis","background","bgColor","border","borderColor","bottomMargin","cellPadding","cellSpacing","char","charOff","classId","clear","code","codeBase","codeType","color","compact","declare","event","face","frame","frameBorder","hSpace","leftMargin","link","longDesc","lowSrc","marginHeight","marginWidth","noResize","noHref","noShade","noWrap","object","profile","prompt","rev","rightMargin","scheme","scrolling","standby","summary","text","topMargin","valueType","version","vAlign","vLink","vSpace","allowTransparency","autoCorrect","autoSave","disablePictureInPicture","disableRemotePlayback","prefix","results","security","unselectable","svg","accentHeight","alignmentBaseline","arabicForm","baselineShift","capHeight","clipPath","clipRule","colorInterpolation","colorInterpolationFilters","colorProfile","colorRendering","dataType","dominantBaseline","enableBackground","fillOpacity","fillRule","floodColor","floodOpacity","fontFamily","fontSize","fontSizeAdjust","fontStretch","fontStyle","fontVariant","fontWeight","glyphName","glyphOrientationHorizontal","glyphOrientationVertical","horizAdvX","horizOriginX","horizOriginY","imageRendering","letterSpacing","lightingColor","markerEnd","markerMid","markerStart","navDown","navDownLeft","navDownRight","navLeft","navNext","navPrev","navRight","navUp","navUpLeft","navUpRight","onActivate","onBegin","onEnd","onFocusIn","onFocusOut","onMouseWheel","onRepeat","onShow","onZoom","overlinePosition","overlineThickness","paintOrder","panose1","pointerEvents","renderingIntent","shapeRendering","stopColor","stopOpacity","strikethroughPosition","strikethroughThickness","strokeDashArray","strokeDashOffset","strokeLineCap","strokeLineJoin","strokeMiterLimit","strokeOpacity","strokeWidth","textAnchor","textDecoration","textRendering","transformOrigin","typeOf","underlinePosition","underlineThickness","unicodeBidi","unicodeRange","unitsPerEm","vAlphabetic","vHanging","vIdeographic","vMathematical","vectorEffect","vertAdvY","vertOriginX","vertOriginY","wordSpacing","writingMode","xHeight","playbackOrder","timelineBegin","about","accumulate","additive","alphabetic","amplitude","ascent","attributeName","attributeType","azimuth","bandwidth","baseFrequency","baseProfile","bbox","begin","bias","by","calcMode","clip","clipPathUnits","contentScriptType","contentStyleType","cursor","cx","cy","d","defaultAction","descent","diffuseConstant","direction","display","dur","divisor","dx","dy","edgeMode","editable","elevation","exponent","externalResourcesRequired","fill","filter","filterRes","filterUnits","focusable","focusHighlight","format","fr","from","fx","fy","g1","g2","glyphRef","gradientTransform","gradientUnits","handler","hanging","hatchContentUnits","hatchUnits","ideographic","initialVisibility","in","in2","intercept","k","k1","k2","k3","k4","kernelMatrix","kernelUnitLength","keyPoints","keySplines","keyTimes","kerning","lengthAdjust","limitingConeAngle","local","markerHeight","markerUnits","markerWidth","maskContentUnits","maskUnits","mathematical","mediaCharacterEncoding","mediaContentEncodings","mediaSize","mediaTime","mode","numOctaves","observer","offset","opacity","operator","order","orient","orientation","origin","overflow","overlay","path","pathLength","patternContentUnits","patternTransform","patternUnits","phase","pitch","points","pointsAtX","pointsAtY","pointsAtZ","preserveAlpha","preserveAspectRatio","primitiveUnits","propagate","r","radius","refX","refY","repeatCount","repeatDur","requiredExtensions","requiredFeatures","requiredFonts","requiredFormats","resource","restart","result","rotate","rx","ry","scale","seed","side","slope","snapshotTime","specularConstant","specularExponent","spreadMethod","spacing","startOffset","stdDeviation","stemh","stemv","stitchTiles","string","stroke","surfaceScale","syncBehavior","syncBehaviorDefault","syncMaster","syncTolerance","syncToleranceDefault","systemLanguage","tableValues","targetX","targetY","textLength","transformBehavior","to","u1","u2","unicode","viewBox","viewTarget","visibility","widths","x","x1","x2","xChannelSelector","y","y1","y2","yChannelSelector","z","zoomAndPan","htmlBase","svgBase","valid","dash","cap","kebab","$0","camelcase","toUpperCase","hastToReact","StyleToObject","pointEnd","point","pointStart","undefined","stringifyPosition","VFileMessage","causeOrReason","optionsOrParentOrPlace","legacyCause","place","ancestors","cause","message","ruleId","indexOf","parent","fatal","file","stack","actual","expected","note","url","emptyMap","Map","dashSomething","tableElements","Set","tableCellElement","docs","toJsxRuntime","tree","Fragment","filePath","development","jsxDEV","props","isStaticChildren","children","columnNumber","fileName","lineNumber","developmentCreate","jsxs","fn","productionCreate","state","components","elementAttributeNameCase","evaluater","createEvaluater","ignoreInvalidStyle","passKeys","passNode","schema","stylePropertyNameCase","tableCellAlignToStyle","one","parentSchema","tagName","findComponentFromName","alignValue","createProperty","has","createElementProps","createChildren","child","thing","addNode","addChildren","pop","element","estree","expression","body","evaluateExpression","crashEstree","mdxExpression","objectExpression","argument","createJsxElementProps","mdxJsxElement","evaluateProgram","mdxEsm","root","countsByName","count","get","set","Type","rest","dashes","find","Number","isNaN","settings","join","padRight","padLeft","commas","styleToObject","replacer","toCamel","parseStyle","String","domCasing","cssCasing","transformStyleToCssCasing","transformStylesToCssCasing","allowExpression","identifiers","split","isIdentifierName","computed","Boolean","optional","toDash","$1","urlAttributes","icon","includeImageAlt","includeHtml","all","splice","remove","items","parameters","chunkStart","unshift","subtokenize","events","jumps","lineIndex","otherIndex","otherEvent","subevents","more","_tokenizer","_isInFirstContentOfListItem","contentType","subcontent","_container","eventIndex","token","context","startPosition","startPositions","tokenizer","parser","childEvents","gaps","stream","previous","current","adjust","breaks","sliceStream","next","defineSkip","_gfmTasklistFirstContentOfListItem","write","syntaxExtension","extension","hook","left","right","constructs","existing","before","add","asciiAlpha","regexCheck","asciiAlphanumeric","asciiAtext","asciiControl","asciiDigit","asciiHexDigit","asciiPunctuation","markdownLineEnding","markdownLineEndingOrSpace","markdownSpace","unicodePunctuation","unicodeWhitespace","regex","fromCharCode","factorySpace","effects","ok","limit","POSITIVE_INFINITY","enter","consume","exit","tokenize","contentStart","attempt","contentInitial","lineStart","document","self","childFlow","childToken","lineStartOffset","continued","item","containerState","continuation","documentContinue","checkNewContainers","_closeFlow","closeFlow","indexBeforeExits","indexBeforeFlow","exitContainers","documentContinued","currentConstruct","concrete","flowStart","interrupt","_gfmTableDynamicInterruptHack","containerConstruct","thereIsANewContainer","thereIsNoNewContainer","lazy","now","containerContinue","flow","flowContinue","writeToChild","eof","seen","entry","nok","disable","null","blankLine","after","partial","chunkInside","contentEnd","continuationConstruct","contentContinue","resolve","prefixed","tail","sliceSerialize","initial","flowInitial","afterConstruct","resolver","resolveAll","createResolver","initializeFactory","field","notText","atBreak","resolveAllLineSuffixes","extraResolver","chunks","tabs","bufferIndex","chunk","charCodeAt","_index","_bufferIndex","called","createTokenizer","initialize","columnStart","resolveAllConstructs","consumed","accountForPotentialSkip","fields","constructFactory","construct","addResult","onsuccessfulcheck","expandTabs","atTab","serializeChunks","main","expectedCode","startIndex","startBufferIndex","endIndex","endBufferIndex","view","head","shift","sliceChunks","chunkIndex","go","restore","onreturn","returnState","bogusState","listOfConstructs","constructIndex","handleListOfConstructs","map","def","handleMapOfConstructs","handleConstruct","startPoint","startPrevious","startCurrentConstruct","startEventsIndex","startStack","store","resolveTo","thematicBreak","marker","sequence","initialSize","atMarker","inside","onBlank","listItemPrefixWhitespaceConstruct","endOfPrefix","otherPrefix","initialBlankLine","notBlank","furtherBlankLines","notInCurrentItem","indentConstruct","blockQuote","contBefore","factoryDestination","literalType","literalMarkerType","rawType","stringType","balance","enclosedBefore","raw","enclosed","enclosedEscape","rawEscape","factoryLabel","markerType","labelInside","labelEscape","factoryTitle","escape","factoryWhitespace","normalizeIdentifier","identifier","labelAfter","markerAfter","destinationBefore","destinationAfter","titleBefore","afterWhitespace","beforeMarker","titleAfter","titleAfterOptionalWhitespace","codeIndented","afterPrefix","furtherStart","headingAtx","sequenceOpen","sequenceFurther","setextUnderline","paragraph","heading","htmlBlockNames","htmlRawNames","htmlFlow","closingTag","buffer","markerB","declarationOpen","tagCloseStart","continuationDeclarationInside","commentOpenInside","cdataOpenInside","slash","basicSelfClosing","completeClosingTagAfter","completeAttributeNameBefore","completeEnd","completeAttributeName","completeAttributeNameAfter","completeAttributeValueBefore","completeAttributeValueQuoted","completeAttributeValueUnquoted","completeAttributeValueQuotedAfter","completeAfter","continuationCommentInside","continuationRawTagOpen","continuationClose","continuationCdataInside","continuationStart","blankLineBefore","continuationAfter","nonLazyContinuationStart","continuationStartNonLazy","continuationBefore","continuationRawEndTag","nonLazyContinuation","codeFenced","closeStart","startBefore","beforeSequenceClose","sequenceClose","sizeOpen","sequenceCloseAfter","initialPrefix","beforeSequenceOpen","infoBefore","atNonLazyBreak","metaBefore","meta","contentBefore","beforeContentChunk","contentChunk","createElement","decodeNamedCharacterReference","characterReference","innerHTML","textContent","numeric","characterEscape","lineEnding","labelEnd","labelStart","_balanced","_inactive","labelEndNok","resourceConstruct","labelEndOk","referenceFullConstruct","referenceNotFull","referenceCollapsedConstruct","close","group","insideSpan","resourceBefore","resourceOpen","resourceEnd","resourceDestinationAfter","resourceDestinationMissing","resourceBetween","resourceTitleAfter","referenceFullAfter","referenceFullMissing","referenceCollapsedOpen","labelStartImage","classifyCharacter","attention","attentionMarkers","_open","_close","openingSequence","closingSequence","use","nextEvents","movePoint","autolink","schemeOrEmailAtext","emailAtext","schemeInsideOrEmailAtext","urlInside","emailAtSignOrDot","emailLabel","emailValue","htmlText","instruction","tagOpen","commentEnd","commentClose","lineEndingBefore","cdata","cdataClose","cdataEnd","instructionClose","tagClose","tagCloseBetween","tagOpenBetween","tagOpenAttributeName","tagOpenAttributeNameAfter","tagOpenAttributeValueBefore","tagOpenAttributeValueQuoted","tagOpenAttributeValueUnquoted","tagOpenAttributeValueQuotedAfter","lineEndingAfter","lineEndingAfterPrefix","labelStartLink","hardBreakEscape","codeText","between","tailExitIndex","headEnterIndex","resolveText","parse","extensions","combineExtensions","defaultConstructs","search","decodeNumericCharacterReference","base","parseInt","fromCodePoint","characterEscapeOrReference","decode","$2","hex","fromMarkdown","encoding","config","transforms","canContainEols","opener","autolinkProtocol","onenterdata","autolinkEmail","atxHeading","codeFlow","codeFencedFenceInfo","codeFencedFenceMeta","codeTextData","codeFlowValue","definitionDestinationString","definitionLabelString","definitionTitleString","emphasis","hardBreak","hardBreakTrailing","htmlFlowData","htmlTextData","image","listItem","listItemValue","onenterlistitemvalue","listOrdered","onenterlistordered","listUnordered","reference","onenterreference","referenceString","resourceDestinationString","resourceTitleString","setextHeading","strong","closer","atxHeadingSequence","onexitatxheadingsequence","onexitautolinkemail","onexitautolinkprotocol","characterEscapeValue","onexitdata","characterReferenceMarkerHexadecimal","onexitcharacterreferencemarker","characterReferenceMarkerNumeric","characterReferenceValue","onexitcharacterreferencevalue","onexitcodefenced","codeFencedFence","onexitcodefencedfence","onexitcodefencedfenceinfo","onexitcodefencedfencemeta","onexitcodeindented","onexitcodetext","onexitdefinitiondestinationstring","onexitdefinitionlabelstring","onexitdefinitiontitlestring","onexithardbreak","onexithtmlflow","onexithtmltext","onexitimage","onexitlabel","labelText","onexitlabeltext","onexitlineending","onexitlink","onexitreferencestring","onexitresourcedestinationstring","onexitresourcetitlestring","onexitresource","onexitsetextheading","setextHeadingLineSequence","onexitsetextheadinglinesequence","setextHeadingText","onexitsetextheadingtext","configure","mdastExtensions","compile","tokenStack","resume","listStack","prepareList","defaultOnError","firstBlankLineIndex","containerBalance","listSpread","tailIndex","tailEvent","_spread","and","errorHandler","onExitError","expectingFirstListItemValue","flowCodeInside","depth","setextHeadingSlurpLineEnding","codePointAt","siblings","atHardBreak","inReference","referenceType","ancestor","decodeString","fragment","characterReferenceType","ordered","spread","compiler","postprocess","atCarriageReturn","endPosition","TextDecoder","lastIndex","Math","ceil","preprocess","combined","remarkParse","doc","env","globalThis","deserialize","serialized","deserializer","$","out","unpair","Date","flags","RegExp","BigInt","EMPTY","asString","shouldSkip","_ref","TYPE","serialize","json","lossy","serializer","strict","pair","valueOf","toJSON","entries","toISOString","structuredClone","any","normalizeUri","skip","encodeURIComponent","defaultFootnoteBackContent","rereferenceIndex","defaultFootnoteBackLabel","referenceIndex","convert","castFactory","tests","_len","_key","apply","anyFactory","checkAsRecord","nodeAsRecord","propsFactory","typeFactory","testFunction","looksLikeANode","CONTINUE","EXIT","SKIP","visitParents","visitor","reverse","factory","parents","visit","subresult","grandparents","toResult","nodeAsParent","concat","testOrVisitor","visitorOrReverse","maybeReverse","revert","subtype","suffix","contents","listItemLoose","tab","trimLines","last","trimLine","handlers","blockquote","patch","applyData","break","delete","footnoteReference","clobberPrefix","safeId","footnoteOrder","counter","reuseCounter","footnoteCounts","dataFootnoteRef","sup","allowDangerousHtml","imageReference","definitionById","inlineCode","linkReference","loose","listLoose","table","firstRow","tableContent","tableCell","tableRow","cellIndex","cells","cell","toml","ignore","yaml","footnoteDefinition","hName","hChildren","hProperties","defaultUnknownHandler","nodes","trimMarkdownSpaceStart","toHast","footnoteById","defaultHandlers","handle","passThrough","shallow","unknownHandler","createState","foot","footnoteBackContent","footnoteBackLabel","footnoteLabel","footnoteLabelTagName","footnoteLabelProperties","listItems","backReferences","counts","dataFootnoteBackref","tailTail","dataFootnotes","footer","remarkRehype","destination","hastTree","run","bail","getPrototypeOf","Symbol","toStringTag","trough","fns","pipeline","middlewareIndex","callback","_len2","output","_key2","middleware","wrapped","_len3","_key3","fnExpectsCallback","done","then","_len4","_key4","middelware","basename","ext","assertPath","seenNonSlash","firstNonSlashEnd","extIndex","dirname","unmatchedSlash","extname","startPart","startDot","preDotState","joined","segments","absolute","allowAboveRoot","lastSlashIndex","lastSegmentLength","lastSlash","dots","normalizeString","sep","JSON","stringify","proc","cwd","isUrl","fileUrlOrPath","protocol","auth","urlToPath","URL","hostname","pathname","third","decodeURIComponent","getPathFromURLPosix","VFile","isUint8Array","history","messages","stored","assertNonEmpty","assertPart","stem","fail","part","CallableInstance","proto","func","setPrototypeOf","names","getOwnPropertyNames","p","descriptor","Processor","Compiler","Parser","attachers","freezeIndex","frozen","namespace","transformers","attacher","assertUnfrozen","freeze","transformer","realFile","vfile","assertParser","process","assertCompiler","executor","Promise","reject","parseTree","realDone","compileTree","compileResult","processSync","complete","assertDone","assertNode","outputTree","resultingTree","runSync","addPlugin","addList","addPreset","plugin","plugins","entryIndex","primary","currentPrimary","isPlainObj","unified","asyncName","looksLikeAVFile","emptyPlugins","emptyRemarkRehypeOptions","safeProtocol","deprecations","Markdown","allowedElements","allowElement","disallowedElements","rehypePlugins","remarkPlugins","remarkRehypeOptions","skipHtml","unwrapDisallowed","urlTransform","defaultUrlTransform","processor","deprecation","mdastTree","colon","questionMark","numberSign"],"sourceRoot":""}